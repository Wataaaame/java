<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Project - CRM 客户关系管理系统</title>
    <link href="/2022/09/06/Project%20-%20CRM%20%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/09/06/Project%20-%20CRM%20%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h1><ul><li><p>视图层（View）：展示数据，与用户交互</p><p><code>html, css, js, jQuery, bootstrap (ext, easyUI), jsp</code></p></li><li><p>控制层（Controller）：控制业务处理流程</p><ul><li><p>接收请求，接收参数，封装参数</p></li><li><p>根据不同请求调用业务层处理业务</p></li><li><p>根据处理结果，返回响应信息</p></li></ul><p><code>(servlet) springMVC (webwork, struts)</code></p></li><li><p>业务层（Service）：处理业务逻辑</p><p>处理业务的步骤以及操作的原子性</p><p><code>JavaSE (activiti, JBPM (工作流：处理复杂业务))</code></p></li><li><p>持久层（Dao&#x2F;Mapper）：操作数据库</p><p>(jdbc) MyBatis (Hibernate, ibatis)</p></li><li><p>整合层：维护类资源，维护数据库资源</p><p><code>spring(IOC, AOP) (corba, ejb)</code></p></li></ul><h1 id="软件公司"><a href="#软件公司" class="headerlink" title="软件公司"></a>软件公司</h1><h2 id="组织架构"><a href="#组织架构" class="headerlink" title="组织架构"></a>组织架构</h2><p>研发部（前后端、美工、DBA）；测试部；产品部；实施部；运维部；市场部</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ol><li><p><code>招标</code> <em>标书</em></p><ul><li>投标：制作标书</li></ul></li><li><p><code>可行性分析</code> <em>可行性分析报告</em></p><ul><li>do or not do</li></ul></li><li><p><code>需求分析</code> <em>需求文档</em></p><ul><li><p>产品经理、程序员：需求调研</p></li><li><p>项目原型：容易确定需求；开发项目时作为 JSP 网页</p></li></ul></li><li><p>分析与设计</p><ul><li><p><code>架构设计</code>（架构师） <em>架构设计文档</em></p><ul><li><p>物理架构设计</p><p>应用服务器：<code>tomcat(Apache), weblogic(bea-&gt;Oracle), websphere(IBM), jBoss(Redhet), resion(MS)</code></p><p>数据库服务器：<code>MySQL, Oracle, DB2, SQLServre, 达梦</code></p></li><li><p>逻辑架构设计：代码分层</p></li><li><p>技术选型：Java</p></li></ul></li><li><p><code>项目设计</code>（项目经理） <em>项目设计文档</em></p><ul><li><strong>物理模型设计</strong>：数据库表设计（PowerDesigner） <em>.pdm</em></li><li>逻辑模型设计：类、属性、关系等（Rational Rose） <em>.pdl</em></li><li>界面设计（产品经理、美工）：企业级应用 <em>项目原型</em></li><li>算法设计 <em>算法设计文档</em></li></ul></li></ul></li><li><p><code>搭建开发环境</code> <em>技术架构文档</em></p><p>创建项目，添加 Jar 包，添加配置文件，添加静态页面，添加公共类以及其他资源，能够正常启动运行</p></li><li><p><code>编码实现</code> <em>文档注释</em></p></li><li><p><code>测试</code> <em>测试用例</em></p></li><li><p><code>试运行</code> <em>使用手册</em></p></li><li><p><code>上线</code> <em>实施手册</em></p></li><li><p><code>运维</code> <em>运维手册</em></p></li></ol><h1 id="CRM"><a href="#CRM" class="headerlink" title="CRM"></a>CRM</h1><p>客户关系管理简称 CRM（Customer Relationship Management）。它是以<strong>客户数据的管理</strong>为核心，保持客户的联系信息处于最新状态，跟踪他们与企业的每次交互并管理他们的帐，以建立、发展和维护客户关系为主要目的</p><ul><li><p>本质是吸引客户，留住客户，实现客户利益最大化</p></li><li><p>目标是帮助发展客户关系，推动业务增长并提高客户忠诚度</p></li><li><p>企业级应用、传统应用，给销售或贸易型公司使用（扩展市场，销售产品&#x2F;服务，各个环节维护客户关系）</p></li></ul><p>此 CRM 提供给大型进出口贸易公司使用，做大宗商品的进出口贸易，受国家管制，预计开发时间为 8 个月</p><h2 id="核心业务"><a href="#核心业务" class="headerlink" title="核心业务"></a>核心业务</h2><ul><li><p>系统管理功能：保证业务管理功能正常安全地运行而设计的功能</p><ol><li>用户登录，安全退出，登录验证等（超级管理员、开发人员等使用）</li></ol></li><li><p>业务管理功能：处理业务数据</p><ol><li><p>市场活动：市场部，设计市场活动&#x2F;营销活动</p></li><li><p>线索（潜在用户）：销售部（初级销售），增加线索</p></li><li><p>客户&#x2F;联系人：销售部（高级销售），有效地区分和跟踪客户（公司）和联系人（个人）</p></li><li><p>交易（商机）：销售部（高级销售），更好地区分和统计交易的各个阶段</p></li><li><p>售后回访：客服部，妥善安排售后回访</p><blockquote><p>主动提醒功能，需要长连接协议，实现较复杂</p></blockquote></li><li><p>统计图表：管理层，统计各种销售数据，给领导决策做数据支撑</p></li></ol></li></ul><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><p>tbl_user：用户表</p><p>tbl_dic_type：数据字典类型表，存储下拉列表类型</p><p>tbl_dic_value：数据字典值，存储下拉列表内容</p><p>tbl_activity：市场活动表</p><p>tbl_activity_remark：市场活动备注表</p><p>tbl_clue：线索表</p><p>tbl_clue_remark：线索备注表</p><p>tbl_clue_activity_relation 线索和市场活动关联关系表</p><p>tbl_customer：客户表</p><p>tbl_customer_remark：客户备注表</p><p>tbl_contacts：联系人表</p><p>tbl_contacts_remark：联系人备注表</p><p>tbl_contacts_activity_relation 联系人和市场活动关联关系表</p><p>tbl_tran：交易表</p><p>tbl_tran_remark：交易备注表</p><p>tbl_tran_history：交易历史表</p><h3 id="主键字段"><a href="#主键字段" class="headerlink" title="主键字段"></a>主键字段</h3><p>在数据库表中唯一确定一条记录，推荐使用一个字段做主键；没有业务含义的字段做主键</p><p>主键字段类型和长度由主键值的生成方式决定</p><p>主键的生成方式：</p><ol><li><p>自增：借助数据库自身主键生成机制</p><p>数值型，长度由数据量来决定</p><ul><li>运行效率较低，开发效率高</li></ul></li><li><p><strong>assighed</strong>：算法手动生成主键值，需唯一非空</p><p>hi &#x2F; low：数值型，长度由数据量决定</p><p>UUDI：字符串，长度是 32 位</p></li><li><p><em>共享主键</em>：由另一张表的类型和长度决定</p><ul><li>耦合度太高</li></ul></li><li><p>联合主键：由多个字段的类型和长度决定</p></li></ol><h3 id="外键字段"><a href="#外键字段" class="headerlink" title="外键字段"></a>外键字段</h3><p>用来确定表和表之间的关系</p><ol><li><p>一对多：一张表中的一条记录对应另一张表中的多条记录；另一张表中的一条记录只能对应一张表中的一条记录</p><p>使用外键：一为父表，多为子表，子表使用外键</p><ul><li>添加数据时，先添加父表</li><li>删除数据时，先删除子表</li></ul><blockquote><p>内连接：查询所有符合条件的数据，并且要求结果在两张表中都有相对应的数据</p><p>外连接（左）：查询左侧表中所有符合条件的数据，即使在右侧表中没有相对应的数据</p><p>*如果外键不能为空，优先使用内连接反之看实际业务需求</p></blockquote></li><li><p>一对一：一张表中的一条记录对应另一张表中的一条记录；另一张表中的一条记录只能对应一张表中的一条记录</p><ol><li><p><em>共享主键</em></p></li><li><p>唯一外键：类似一对多结构，但外键唯一，不会重复</p><p>添加顺序同一对多</p></li></ol></li><li><p>多对多：一张表中的一条记录对应另一张表中的多条记录；另一张表中的一条记录只能对应一张表中的多条记录</p><p>添加关联关系表（类似于父表）</p><p>添加顺序同一对多</p></li></ol><h3 id="日期和时间字段"><a href="#日期和时间字段" class="headerlink" title="日期和时间字段"></a>日期和时间字段</h3><ol><li><p>按照字符串处理</p><p>char(10) yyyy-MM-dd</p><p>char(19) yyyy-MM-dd HH:mm:ss</p></li><li><p><a href="https://wataaaame.github.io/2022/09/01/SSM%20-%20Note04%20SpringMVC/#%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86">SpringMVC 日期处理</a></p></li></ol><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><ol><li><p>导入数据库</p></li><li><p>创建项目：Project &#x2F; CRM</p><p>设置 JDK</p></li><li><p>创建工程 crm</p><p>补全目录结构</p><p>设置编码格式为 UTF-8：<code>File -&gt; Settings -&gt; Editor -&gt; File Encodings -&gt; Project Encoding / Properties Files - Transparent</code></p></li><li><p>添加 jar 包：添加依赖</p></li><li><p>添加配置文件</p></li><li><p>添加静态页面资源</p></li><li><p>把项目部署到服务器</p></li></ol><h2 id="功能分析与设计"><a href="#功能分析与设计" class="headerlink" title="功能分析与设计"></a>功能分析与设计</h2><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><ol><li><p>需求分析</p><p>用户访问项目首页，首先进入登录页面</p></li><li><p>流程设计</p><p><img src="/images/image-project/crm/01-%E9%A6%96%E9%A1%B5%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="首页时序图"></p></li><li><p>重点回顾</p><p>是否创建 Controller 类，取决于访问的资源目录（一个资源目录占一个 Controller 类）</p></li><li><p>编码实现</p><p>UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 跳转到登录页面</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回页面地址</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@RequestMapping(&quot;/toLogin&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toLogin</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;settings/qx/user/login&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><ol><li><p>需求分析</p><p>用户在登录页面，输入用户名和密码，点击登录按钮或者回车，完成用户登录的功能</p><ul><li>用户名和密码不能为空</li><li>用户名或者密码错误，用户己过期，用户状态被锁定，ip受限都不能登录成功。</li><li>登录成功之后，所有业务页面显示当前用户的名称</li><li>实现10天记住密码</li><li>登录成功之后，跳转到业务主页面</li><li>登录失败，页面不跳转，提示信息</li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/02-%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="用户登录时序图"></p><p>异步请求与同步请求的取舍：全局刷新使用同步请求，局部刷新使用异步请求，二者皆含使用局部刷新</p></li><li><p>重点回顾</p><p>是否新建 Mapper&#x2F;Service 类取决于访问的数据库表</p><ul><li><p>使用逆向工程，根据表生成 mapper 层三部分代码：实体类、mapper 接口、映射文件：</p><ol><li>新建空 Maven Module <code>crm-mybatis-generator</code></li><li>添加 MyBatis 逆向工程插件依赖</li><li>配置文件提供：数据库连接信息；代码保存目录；表信息</li><li>可在 Maven 菜单 <code>crm-mybatis-generator -&gt; Plugins -&gt; mybatis-generator -&gt;mybatis-generator:generate</code> 点击使用</li></ol><p>使用逆向工程则无需为实体类起别名</p></li><li><p>使用 jQuery 获取指定元素的指定属性的值</p><ul><li>选择器 <code>.attr(&quot;属性名&quot;)</code>：用来获取值非 true&#x2F;false 的属性值</li><li>选择器 <code>.prop(&quot;属性名&quot;)</code>：用来获取是 true&#x2F;false 的属性值，如 checked，selected，readonly，disabled 等</li></ul></li><li><p>作用域传递数据：</p><ol><li>pageContext：在同一个页面的不同标签之间传递数据</li><li>request：在同一个请求中传递数据</li><li>session：同一个浏览器窗口的不同请求之间传递数据</li><li>application：所有用户共享的数据，并且长久频繁使用的数据</li></ol></li><li><p>使用 EL 表达式获取 cookie：<code>$&#123;cookie.loginAct.value&#125;</code></p></li></ul></li><li><p>编码实现</p><p>UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录页面的登录判断</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> loginAct 账号</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> loginPwd 密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> isRemPwd 记住密码</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request 获取访问的 IP 地址</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response 添加 Cookie 到浏览器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session 保存会话信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回登录状态给前端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">login</span><span class="hljs-params">(String loginAct, String loginPwd, String isRemPwd, HttpServletRequest request, HttpServletResponse response, HttpSession session)</span> &#123;<br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    map.put(<span class="hljs-string">&quot;loginAct&quot;</span>, loginAct);<br>    map.put(<span class="hljs-string">&quot;loginPwd&quot;</span>, loginPwd);<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.selectUserByActAndPwd(map);<br><br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">returnObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>();<br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>        returnObject.setCode(Constant.FAIL);<br>        returnObject.setMsg(<span class="hljs-string">&quot;Error name or password&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).compareTo(user.getExpireTime()) &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 判断账户过期</span><br>            returnObject.setCode(Constant.OVERDUE);<br>            returnObject.setMsg(<span class="hljs-string">&quot;Account is overdue&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;0&quot;</span>.equals(user.getLockState())) &#123;<br>            returnObject.setCode(Constant.LOCKED);<br>            returnObject.setMsg(<span class="hljs-string">&quot;Account locked&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (user.getAllowIps()==<span class="hljs-literal">null</span> || !user.getAllowIps().contains(request.getRemoteAddr())) &#123;<br>            returnObject.setCode(Constant.LIMITED);<br>            returnObject.setMsg(<span class="hljs-string">&quot;IP is limited&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            returnObject.setCode(Constant.SUCCESS);<br>            returnObject.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>            <span class="hljs-comment">// 保存用户信息到 Session 作用域中</span><br>            session.setAttribute(Constant.SESSION_USER, user);<br><br>            <span class="hljs-comment">// 用户名可以 10 天内自动填充</span><br>            <span class="hljs-type">Cookie</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;loginAct&quot;</span>, user.getLoginAct());<br>            c1.setMaxAge(<span class="hljs-number">10</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>);<br>            response.addCookie(c1);<br>            <span class="hljs-comment">// 记住密码</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;true&quot;</span>.equals(isRemPwd)) &#123;<br>                <span class="hljs-type">Cookie</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;loginPwd&quot;</span>, user.getLoginPwd());<br>                c2.setMaxAge(<span class="hljs-number">10</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>);<br><br>                response.addCookie(c2);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">Cookie</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;loginPwd&quot;</span>, user.getLoginPwd());<br>                c2.setMaxAge(<span class="hljs-number">0</span>);<br><br>                response.addCookie(c2);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> returnObject;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>v：</p><p>表单中哪怕提交使用 button 标签，想要发送 AJAX 请求，也要将 type 属性改为 button</p><p>IP6 下的本机地址为：0:0:0:0:0:0:0:1</p></blockquote></li></ol><h3 id="安全退出"><a href="#安全退出" class="headerlink" title="安全退出"></a>安全退出</h3><ol><li><p>需求分析</p><p>用户在任意的业务页面，点击“退出”按钮，弹出确认退出的模态窗口；用户在确认退出的模态窗口，点击“确定”按钮，完成安全退出的功能</p><ul><li><p>安全退出，清空 cookie，销毁session</p></li><li><p>退出完成之后，跳转到登录页面</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/03-%E5%AE%89%E5%85%A8%E9%80%80%E5%87%BA%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="安全退出时序图"></p></li><li><p>编码实现</p><p>UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 安全退出系统，清空存储的密码 cookie 与 session 会话</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response 写入 cookie</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session  销毁 session</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 重定向到登录页面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/logout&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">logout</span><span class="hljs-params">(HttpServletResponse response, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 销毁 cookie</span><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;loginPwd&quot;</span>, <span class="hljs-literal">null</span>);<br>    cookie.setMaxAge(<span class="hljs-number">0</span>);<br>    response.addCookie(cookie);<br><br>    <span class="hljs-comment">// 销毁 session</span><br>    session.invalidate();<br><br>    <span class="hljs-comment">// 跳转回登录页面</span><br>    <span class="hljs-comment">// 借助 SpringMVC 重定向，默认添加了 /crm</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/settings/qx/user/toLogin&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>v：</p><p>退出跳转需要发送重定向请求，否则地址栏显示为 &#x2F;logout，且 cookie 依旧存在</p><p>发送重定向需要填写完整路径</p></blockquote></li></ol><h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h3><ol><li><p>需求分析</p><p>用户访问任何业务资源，都需要进行登录验证</p><ul><li><p>只有登录成功的用户才能访问业务资源</p></li><li><p>没有登录成功的用户访问业务资源，跳转到登录页面</p></li></ul></li><li><p>重点回顾</p><ul><li><p>过滤器（简单）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>init() &#123;&#125;<br>    doFilter() &#123;&#125;<br>    destroy() &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置过滤器 web.xml</p></li><li><p><strong>拦截器</strong>（复杂）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    pre() &#123;&#125;<br>    post() &#123;&#125;<br>    after() &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置拦截器 springmvc.xml</p></li></ul></li><li><p>编码实现</p><p>拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户登录状态判断，若 session 无用户信息，则重定向到登录页面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (request.getSession().getAttribute(Constant.SESSION_USER) == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 重定向时，url 必须加上项目名</span><br>            response.sendRedirect(request.getContextPath() + <span class="hljs-string">&quot;/settings/qx/user/toLogin&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置拦截器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置拦截请求 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/settings/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/workbench/**&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置拦截白名单 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/settings/qx/user/toLogin&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/settings/qx/user/login&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置拦截器 bean --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.github.wataaaame.crm.settings.web.interceptor.LoginInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="创建市场活动"><a href="#创建市场活动" class="headerlink" title="创建市场活动"></a>创建市场活动</h3><ol><li><p>需求分析</p><p>用户在市场活动主页面，点击“创建”按钮，弹出创建市场活动的模态窗口；用户在创建市场活动的模态窗口填写表单，点击“保存”按钮，完成创建市场活动的功能。</p><ul><li><p>所有者是动态的（在现实市场活动主页面时，就从数据库中查询出所有用户并且显示在创建的模态窗口中）</p></li><li><p>所有者和名称不能为空</p></li><li><p>如果开始日期和结束日期都不为空，则结束日期不能比开始日期小</p></li><li><p>成本只能为非负整数</p></li><li><p>创建成功之后，关闭模态窗口，刷新市场活动列，显示第一页数据，保持每页显示条数不变</p></li><li><p>创建失败，提示信息创建失败，模态窗口不关闭，市场活动列表也不刷新</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/04-%E5%88%9B%E5%BB%BA%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="创建市场活动时序图"></p></li><li><p>重点回顾</p><ul><li><p>页面切割技术：</p><ol><li><p><em>frameset 和 frame 标签</em></p><p>frameset：切割页面</p><p>frame：显示页面</p><ul><li>每一个 frame 标签就是一个独立的浏览器窗口</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20%, 60%, 20%&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;url1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;f1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;url2&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;f1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;url3&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;f1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- target 指定打开的窗口 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;f3&quot;</span>&gt;</span>go<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>div 和 iframe 标签</p><p>div：切割页面</p><p>iframe：显示页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 10%; width=20%&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><ul><li><p>模态窗口：</p><p>从前使用 <code>window.open(&quot;url&quot;, &quot;_blank&quot;)</code> 方式打开注册页面等，比较繁琐。而模拟的窗口，本质上是 div，通过设置 z-index 大小来实现层叠顺序</p><ul><li><p>z-index 初始参数 &lt;0，需要显示时，z-index 值设置成 &gt;0 即可</p></li><li><p>通过引入 bootstrap js 框架，在 class 属性中声明 <code>modal fade</code> 来添加模态窗口</p></li></ul><p>控制模态窗口的现实与隐藏：</p><ol><li><p>通过指定元素标签</p><p>设置 <code>data-toggle=&quot;modal&quot;</code> 来开启模态窗口，通过 <code>data-target=&quot;id&quot;</code> 来指定开启的模态窗口</p></li><li><p>通过 js 函数</p><p>显示：<code>选择器（选中 div）.modal(&quot;show&quot;)</code></p><p>隐藏：<code>选择器（选中 div）.modal(&quot;hide&quot;)</code></p></li><li><p>通过标签的属性</p><p>点击添加了 <code>data-dismiss=&quot;&quot;</code> 属性的元素会关闭所在的模态窗口</p></li></ol></li><li><p>正则表达式</p><p>定义字符串的匹配模式，可以用来判断指定的具体字符串是否符合匹配模式</p><p>语法规则：</p><ol><li><p>&#x2F;&#x2F;：声明一个正则表达式</p><p><code>var regExp=/.../;</code></p></li><li><p>^：匹配字符串的开头</p><p>$：匹配字符串的结尾</p></li><li><p>[]：匹配指定字符集中的一位字符</p><p><code>/^[abc]$/</code></p><p><code>/^[a-z0-9]$/</code></p></li><li><p>{}：匹配次数</p><p><code>/^[abc]&#123;5&#125;$/</code></p><p>{m}：匹配 m 次</p><p>{m, n}：匹配 m 到 n 次</p><p>{m, }：匹配 m 次以上</p></li><li><p>特殊符号</p><p>\d：匹配一位数字，相当于 <code>[0-9]</code></p><p>\D：匹配一位非数字</p><p>\w：匹配所有字符，包括字母、数字、下划线</p><p>\W：匹配非字符</p><p>*：匹配 0 次或多次，相当于 <code>&#123;0, &#125;</code></p><p>+：匹配 1 次或多次，相当于 <code>&#123;1, &#125;</code></p><p>?：匹配 0 次或 1 次，相当于 <code>&#123;0, 1&#125;</code></p></li></ol><p><a href="https://wataaaame.github.io/2022/09/04/Project%20-%20Configuration%20and%20Appendix/#Regular-Expression">常用正则表达式</a></p></li></ul></li></ul></li><li><p>编码实现</p><p>ActivityController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 新建活动</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> activity 实体类自动填充</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session  session 获取创建者对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回 json 数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/insertActivity&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">insertActivity</span><span class="hljs-params">(Activity activity, HttpSession session)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)session.getAttribute(Constant.SESSION_USER);<br>    <span class="hljs-comment">// 封装参数</span><br>    activity.setId(UUIDUtils.getUUID());<br>    activity.setCreateTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    activity.setCreateBy(user.getId());<br><br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">returnObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 调用 service 层方法，保存创建的市场活动</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> activityService.insertActivity(activity);<br>        <span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) &#123;<br>            returnObject.setCode(Constant.SUCCESS);<br>            returnObject.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            returnObject.setCode(Constant.FAIL);<br>            returnObject.setMsg(<span class="hljs-string">&quot;The system is busy. Please try again later&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br><br>        returnObject.setCode(Constant.FAIL);<br>        returnObject.setMsg(<span class="hljs-string">&quot;The system is busy. Please try again later&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> returnObject;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>v：</p><p>发送 AJAX 请求的 data 会自动匹配给 Service 中形参的实体类</p><p>jsp 引入 js 乱码刷新浏览器缓存！！！</p></blockquote></li></ol><h3 id="分页查询活动"><a href="#分页查询活动" class="headerlink" title="分页查询活动"></a>分页查询活动</h3><ol><li><p>需求分析</p><p>当市场活动主页面加载完成之后，显示所有数据的第一页</p><p>用户在市场活动主页面填写查询条件，点击“查询”按钮，显示所有符合条件的数据的第一页，保持每页显示条数不变</p><p>实现翻页功能：</p><ul><li><p>在市场活动主页面，显示市场活动列表和记录的总条数</p></li><li><p>默认每页显示条数：10</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/05-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="分页查询市场活动时序图"></p></li><li><p>重点回顾</p><ul><li><p>Mapper.xml 中，使用 <code>&amp;gt;</code> 代表 &gt;（greater than）；使用 <code>&amp;lt;</code> 代表 &lt;（less than）</p></li><li><p>无法通过 activityList.length 计算出总条目，该数组只包含本页数据</p></li><li><p>EL 表达式用来操作 js 代码</p><p>JSTL 标签用来操作 jsp 页面</p></li><li><p>在指定的标签中显示 jsp 页面片段：</p><p><code>选择器.html();</code>：覆盖显示 html 在标签内部</p><p><code>选择器.text();</code>：覆盖显示文本在标签内部</p><p><code>选择器.append();</code>：追加显示在指定标签内部后</p><p><code>选择器.before();</code>：追加显示在指定标签外部前</p><p><code>选择器.after();</code>：追加显示在指定标签外部后</p></li><li><p>分页查询插件：bs_pagination</p></li><li><p>块元素自动分行，行元素不自动换行</p></li><li><p>js 系统函数</p><p>eval()：将字符串转换为 js 执行</p><p>parseInt()：获取小数的整数部分</p></li></ul></li><li><p>编码实现</p><p>ActivityController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取所有第一页数据以及总条目</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> owner</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> startDate</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> endDate</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pageNo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pageSize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/selectActivityByConditionForPage&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">selectActivityByConditionForPage</span><span class="hljs-params">(String owner, String name,</span><br><span class="hljs-params">                                               String startDate, String endDate,</span><br><span class="hljs-params">                                               <span class="hljs-type">int</span> pageNo, <span class="hljs-type">int</span> pageSize)</span> &#123;<br>    <span class="hljs-comment">// 封装参数</span><br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;owner&quot;</span>, owner);<br>    map.put(<span class="hljs-string">&quot;name&quot;</span>, name);<br>    map.put(<span class="hljs-string">&quot;startDate&quot;</span>, startDate);<br>    map.put(<span class="hljs-string">&quot;endDate&quot;</span>, endDate);<br>    map.put(<span class="hljs-string">&quot;pageNo&quot;</span>, (pageNo-<span class="hljs-number">1</span>)*pageSize);<br>    map.put(<span class="hljs-string">&quot;pageSize&quot;</span>, pageSize);<br><br>    <span class="hljs-comment">// 调用 Service 层方法，查询数据</span><br>    List&lt;Activity&gt; activityList = activityService.selectActivityByConditionForPage(map);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">totalRows</span> <span class="hljs-operator">=</span> activityService.selectCountOfActivityByCondition(map);<br><br>    <span class="hljs-comment">// 根据查询结果，生成响应信息</span><br>    Map&lt;String, Object&gt; retMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    retMap.put(<span class="hljs-string">&quot;activityList&quot;</span>, activityList);<br>    retMap.put(<span class="hljs-string">&quot;totalRows&quot;</span>, totalRows);<br><br>    <span class="hljs-keyword">return</span> retMap;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="删除市场活动"><a href="#删除市场活动" class="headerlink" title="删除市场活动"></a>删除市场活动</h3><ol><li><p>需求分析</p><p>用户在市场活动主页面，选择要删除的市场活动，点击“删除”按钮，弹出确认窗口</p><p>用户点击”确定”按钮，完成删除市场活动的功能</p><ul><li>每次至少删除一条市场活动</li><li>可以批量删除市场活动</li><li>删除成功之后，刷新市场活动列表，显示第一页数据，保持每页显示条数不变</li><li>删除失败，提示信息，列表不刷新</li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/06-%E5%88%A0%E9%99%A4%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="删除市场活动时序图"></p></li><li><p>重点回顾</p><ul><li><p>在页面中给元素添加事件</p><ol><li><p>使用元素事件属性：<code>onxxxx=&quot;f()&quot;</code></p></li><li><p>使用 jQuery 对象：<code>选择器.xxxx(function() &#123;&#125;)</code></p><p>以上两种只能给固有元素添加事件</p><p>固有元素：当调用事件函数给元素添加事件时，如果元素已经生成，则这些元素称为固有元素</p><p>动态元素：当调用事件函数给元素添加事件时，若元素还未生成，称为动态元素</p><blockquote><p>js 异步唤醒每个元素，于是给动态元素绑定事件时，元素可能还未渲染到页面，需要使用同步机制进行处理，见下</p></blockquote></li><li><p>使用 jQuery 的 on 函数：<code>父选择器.on(&quot;事件类型&quot;, 子选择器)</code></p><ul><li><p>父元素：必须是固有元素，可以是直接父元素，也可以是间接父元素</p></li><li><p>事件类型：跟事件属性和事件函数一一对应</p></li><li><p>子选择器：目标元素，跟父选择器构成一个父子选择器</p></li></ul><p>不但能给固有元素添加事件，还能给动态生成的元素添加事件</p></li></ol></li><li><p>str.substr(index, num)</p><p>str.substring(index, end)</p></li><li><p>AJAX 向后台发送请求时，可以通过 data 提交参数，提交格式有两种</p><ol><li><p><code>data: &#123;k: v&#125;</code></p><p>一个参数名只能对应一个参数值</p></li><li><p><code>data: k1=v1&amp;k2=v2</code></p><p>一个参数名可对应多个参数值</p></li><li><p><code>data:FormData</code></p><p>提交二进制数据（文件）</p></li></ol></li></ul></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过 id 删除一条或多条数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/deleteActivityByIds&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">deleteActivityByIds</span><span class="hljs-params">(String[] id)</span> &#123;<br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">retObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> activityService.deleteActivityByIds(id);<br>        <span class="hljs-keyword">if</span> (res &gt; <span class="hljs-number">0</span>) &#123;<br>            retObj.setCode(Constant.SUCCESS);<br>            retObj.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            retObj.setCode(Constant.FAIL);<br>            retObj.setMsg(<span class="hljs-string">&quot;Sorry, System is busy...&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        retObj.setCode(Constant.FAIL);<br>        retObj.setMsg(<span class="hljs-string">&quot;Sorry, System is busy...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> retObj;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>v：$(“#listTbd :checkbox:checked”).size())</p><p>筛选器不可以含空格</p></blockquote></li></ol><h3 id="修改市场活动"><a href="#修改市场活动" class="headerlink" title="修改市场活动"></a>修改市场活动</h3><ol><li><p>需求分析</p><p>用户在市场活动主页面，选择要修改的市场活动，点击“修改”按钮，弹出修改市场活动的模态窗口</p><p>用户在修改市场活动的模态窗口填写表单，点击“更新”按钮，完成修改市场活动的功能。</p><ul><li>每次能且只能修改一条市场活动</li><li>所有者是动态的</li><li>表单验证（同创建）</li><li>修改成功之后，关闭模态窗口，刷新市场活动列表，保持页号和每页显示条数都不变</li><li>修改失败，提示信息，模态窗口不关闭，列表也不刷新</li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/07-%E4%BF%AE%E6%94%B9%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="修改市场活动时序图"></p></li><li><p>重点回顾</p><ul><li><p>封装参数</p><ol><li>如果做查询条件，或者参数之间不属于一个实体类对象，封装成 map</li><li>如果写数据，并且参数本来就属于一个实体类对象，封装成实体类对象</li></ol></li><li><p>使用 jQuery 获取&#x2F;设置指定元素的 value 属性值</p><p>获取：<code>选择器.val()</code></p><p>设置：<code>选择器.val(属性值)</code></p></li></ul></li><li><p>编码实现</p><p>ActivityController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据主键修改信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> activity</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/updateByPrimaryKeySelective&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">updateByPrimaryKeySelective</span><span class="hljs-params">(Activity activity, HttpSession session)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) session.getAttribute(Constant.SESSION_USER);<br>    <span class="hljs-comment">// 封装修改信息</span><br>    activity.setEditTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    activity.setEditBy(user.getId());<br><br>    <span class="hljs-comment">// 调用 Service 方法，保存修改信息</span><br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">retObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>(Constant.FAIL, <span class="hljs-string">&quot;edit fail&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> activityService.updateByPrimaryKeySelective(activity);<br>        <span class="hljs-keyword">if</span> (res == <span class="hljs-number">1</span>) &#123;<br>            retObj.setCode(Constant.SUCCESS);<br>            retObj.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> retObj;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="批量导出活动"><a href="#批量导出活动" class="headerlink" title="批量导出活动"></a>批量导出活动</h3><ol><li><p>需求分析</p><p>用户在市场活动主页面，点击“批量导出”按钮，把所有市场活动生成一个 excel 文件，弹出文件下载的对话框</p><p>用户选择要保存的目录，完成导出市场活动的功能。</p><ul><li>导出成功之后，页面不刷新</li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/08-%E6%89%B9%E9%87%8F%E5%AF%BC%E5%87%BA%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="批量导出市场活动时序图"></p></li><li><p>技术准备</p><ol><li><p>使用 Java 生成 Excel 文件（<em>图形化 API 非研究方向，使用插件即可</em>）</p><p>iText（收费）</p><p><strong>apache-poi</strong></p><p>文件：<code>HSSFWorkbook</code></p><p>页：<code>HSSFSheet</code></p><p>行：<code>HSSFRow</code></p><p>列：<code>HSSFCell</code></p><p>样式：<code>HSSFCellStyle</code></p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--poi依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>生成 Excell</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpowernode.crm.poi;<br><br><span class="hljs-keyword">import</span> org.apache.poi.hssf.usermodel.*;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.HorizontalAlignment;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用apache-poi生成excel文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateExcelTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//创建HSSFWorkbook对象，对应一个excel文件</span><br>        HSSFWorkbook wb=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>();<br>        <span class="hljs-comment">//使用wb创建HSSFSheet对象，对应wb文件中的一页</span><br>        HSSFSheet sheet=wb.createSheet(<span class="hljs-string">&quot;学生列表&quot;</span>);<br>        <span class="hljs-comment">//使用sheet创建HSSFRow对象，对应sheet中的一行</span><br>        HSSFRow row=sheet.createRow(<span class="hljs-number">0</span>);<span class="hljs-comment">//行号：从0开始,依次增加</span><br>        <span class="hljs-comment">//使用row创建HSSFCell对象，对应row中的列</span><br>        HSSFCell cell=row.createCell(<span class="hljs-number">0</span>);<span class="hljs-comment">//列的编号：从0开始，依次增加</span><br>        cell.setCellValue(<span class="hljs-string">&quot;学号&quot;</span>);<br>        cell=row.createCell(<span class="hljs-number">1</span>);<br>        cell.setCellValue(<span class="hljs-string">&quot;姓名&quot;</span>);<br>        cell=row.createCell(<span class="hljs-number">2</span>);<br>        cell.setCellValue(<span class="hljs-string">&quot;年龄&quot;</span>);<br><br>        <span class="hljs-comment">//生成HSSFCellStyle对象</span><br>        HSSFCellStyle style=wb.createCellStyle();<br>        style.setAlignment(HorizontalAlignment.CENTER);<br><br>        <span class="hljs-comment">//使用sheet创建10个HSSFRow对象，对应sheet中的10行</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br>            row=sheet.createRow(i);<br><br>            cell=row.createCell(<span class="hljs-number">0</span>);<span class="hljs-comment">//列的编号：从0开始，依次增加</span><br>            cell.setCellValue(<span class="hljs-number">100</span>+i);<br>            cell=row.createCell(<span class="hljs-number">1</span>);<br>            cell.setCellValue(<span class="hljs-string">&quot;NAME&quot;</span>+i);<br>            cell=row.createCell(<span class="hljs-number">2</span>);<br>            cell.setCellStyle(style);<br>            cell.setCellValue(<span class="hljs-number">20</span>+i);<br>        &#125;<br><br>        <span class="hljs-comment">//调用工具函数生成excel文件</span><br>        OutputStream os=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\course\\18-CRM\\阶段资料\\serverDir\\studentList.xls&quot;</span>);<span class="hljs-comment">//目录必须手动创建，文件如果不存在，poi会自动创建</span><br>        wb.write(os);<br><br>        <span class="hljs-comment">//关闭资源</span><br>        os.close();<br>        wb.close();<br><br>        System.out.println(<span class="hljs-string">&quot;===========create ok==========&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol></li><li><p>文件下载</p><p>所有文件下载请求只能发同步请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/workbench/activity/fileDownload.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fileDownload</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">//1.设置响应类型</span><br>    response.setContentType(<span class="hljs-string">&quot;application/octet-stream;charset=UTF-8&quot;</span>);<br>    <span class="hljs-comment">//2.获取输出流</span><br>    OutputStream out=response.getOutputStream();<br><br>    <span class="hljs-comment">//浏览器接收到响应信息之后，默认情况下，直接在显示窗口中打开响应信息；即使打不开，也会调用应用程序打开；只有实在打不开，才会激活文件下载窗口。</span><br>    <span class="hljs-comment">//可以设置响应头信息，使浏览器接收到响应信息之后，直接激活文件下载窗口，即使能打开也不打开</span><br>    response.addHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=mystudentList.xls&quot;</span>);<br><br>    <span class="hljs-comment">//读取excel文件(InputStream)，把输出到浏览器(OutoutStream)</span><br>    InputStream is=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\course\\18-CRM\\阶段资料\\serverDir\\studentList.xls&quot;</span>);<br>    <span class="hljs-type">byte</span>[] buff=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">256</span>];<br>    <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((len=is.read(buff))!=-<span class="hljs-number">1</span>)&#123;<br>        out.write(buff,<span class="hljs-number">0</span>,len);<br>    &#125;<br><br>    <span class="hljs-comment">//关闭资源</span><br>    is.close();<br>    out.flush();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导出所有活动 Excel</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@RequestMapping(&quot;/exportAllActivity&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportAllActivity</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 获取所有 Activity</span><br>    List&lt;Activity&gt; activityList = activityService.selectAllActivity();<br>    <span class="hljs-type">HSSFWorkbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> HSSFUtils.exportActivity(activityList);<br><br>    <span class="hljs-comment">// 实现文件下载</span><br>    <span class="hljs-comment">// 设置响应头</span><br>    response.setContentType(<span class="hljs-string">&quot;application/octet-stream;charset=UTF-8&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=activityList.xls&quot;</span>);<br>    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>    <br>    <span class="hljs-comment">// 直接将文件输出到输出流</span><br>    workbook.write(out);<br><br>    out.flush();<br><br>    <span class="hljs-comment">// 释放资源</span><br>    workbook.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>HSSFUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过查询到的活动列表创建 Excel 文档</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> activityList</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HSSFWorkbook <span class="hljs-title function_">exportActivity</span><span class="hljs-params">(List&lt;Activity&gt; activityList)</span> &#123;<br>    <span class="hljs-comment">// 创建 Excel 文件，并将获取的数据写入</span><br>    <span class="hljs-type">HSSFWorkbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>();<br>    <span class="hljs-type">HSSFSheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.createSheet(<span class="hljs-string">&quot;市场活动信息&quot;</span>);<br>    <span class="hljs-comment">// 创建表头</span><br>    <span class="hljs-type">HSSFRow</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">HSSFCell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.createCell(<span class="hljs-number">0</span>);<br>    cell.setCellValue(<span class="hljs-string">&quot;ID&quot;</span>);<br>    cell = row.createCell(<span class="hljs-number">1</span>);<br>    cell.setCellValue(<span class="hljs-string">&quot;所有者&quot;</span>);<br>    cell = row.createCell(<span class="hljs-number">2</span>);<br>    cell.setCellValue(<span class="hljs-string">&quot;活动名&quot;</span>);<br>    cell = row.createCell(<span class="hljs-number">3</span>);<br>    cell.setCellValue(<span class="hljs-string">&quot;开始日期&quot;</span>);<br>    cell = row.createCell(<span class="hljs-number">4</span>);<br>    cell.setCellValue(<span class="hljs-string">&quot;截止日期&quot;</span>);<br>    cell = row.createCell(<span class="hljs-number">5</span>);<br>    cell.setCellValue(<span class="hljs-string">&quot;成本&quot;</span>);<br>    cell = row.createCell(<span class="hljs-number">6</span>);<br>    cell.setCellValue(<span class="hljs-string">&quot;描述&quot;</span>);<br>    cell = row.createCell(<span class="hljs-number">7</span>);<br>    cell.setCellValue(<span class="hljs-string">&quot;创建时间&quot;</span>);<br>    cell = row.createCell(<span class="hljs-number">8</span>);<br>    cell.setCellValue(<span class="hljs-string">&quot;创建者&quot;</span>);<br>    cell = row.createCell(<span class="hljs-number">9</span>);<br>    cell.setCellValue(<span class="hljs-string">&quot;编辑时间&quot;</span>);<br>    cell = row.createCell(<span class="hljs-number">10</span>);<br>    cell.setCellValue(<span class="hljs-string">&quot;编辑者&quot;</span>);<br><br>    <span class="hljs-comment">// 判断 activityList 是非为空</span><br>    <span class="hljs-keyword">if</span> (activityList!=<span class="hljs-literal">null</span> &amp;&amp; activityList.size()&gt;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 创建表内容</span><br>        <span class="hljs-type">Activity</span> <span class="hljs-variable">activity</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;activityList.size(); i++) &#123;<br>            activity = activityList.get(i);<br>            row = sheet.createRow(i + <span class="hljs-number">1</span>);<br>            cell = row.createCell(<span class="hljs-number">0</span>);<br>            cell.setCellValue(activity.getId());<br>            cell = row.createCell(<span class="hljs-number">1</span>);<br>            cell.setCellValue(activity.getOwner());<br>            cell = row.createCell(<span class="hljs-number">2</span>);<br>            cell.setCellValue(activity.getName());<br>            cell = row.createCell(<span class="hljs-number">3</span>);<br>            cell.setCellValue(activity.getStartDate());<br>            cell = row.createCell(<span class="hljs-number">4</span>);<br>            cell.setCellValue(activity.getEndDate());<br>            cell = row.createCell(<span class="hljs-number">5</span>);<br>            cell.setCellValue(activity.getCost());<br>            cell = row.createCell(<span class="hljs-number">6</span>);<br>            cell.setCellValue(activity.getDescription());<br>            cell = row.createCell(<span class="hljs-number">7</span>);<br>            cell.setCellValue(activity.getCreateTime());<br>            cell = row.createCell(<span class="hljs-number">8</span>);<br>            cell.setCellValue(activity.getCreateBy());<br>            cell = row.createCell(<span class="hljs-number">9</span>);<br>            cell.setCellValue(activity.getEditTime());<br>            cell = row.createCell(<span class="hljs-number">10</span>);<br>            cell.setCellValue(activity.getEditBy());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> workbook;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="选择导出活动"><a href="#选择导出活动" class="headerlink" title="选择导出活动"></a>选择导出活动</h3><ol><li><p>需求分析</p><p>用户在市场活动主页面，选择要导出的市场活动，点击“选择导出”按钮，把所有选择的数据生成一个 excel 文件，弹出文件下载的对话框</p><p>用户选择要保存的目录，完成选择导出市场活动的功能</p><ul><li><p>每次至少选择导出一条记录</p></li><li><p>导出成功之后，页面不刷新</p></li></ul></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 导出选中的活动 Excel</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/exploreByIds&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exploreByIds</span><span class="hljs-params">(String[] id, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 通过 ids 查询 activity</span><br>    List&lt;Activity&gt; activityList = activityService.selectByIds(id);<br>    <span class="hljs-type">HSSFWorkbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> ExportFormatUtils.exportActivity(activityList);<br><br>    <span class="hljs-comment">// 实现文件下载</span><br>    <span class="hljs-comment">// 设置响应头</span><br>    response.setContentType(<span class="hljs-string">&quot;application/octet-stream;charset=UTF-8&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=selectedActivityList.xls&quot;</span>);<br>    <span class="hljs-type">OutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br><br>    workbook.write(out);<br><br>    out.flush();<br><br>    workbook.close();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>v：</p><p>不能发送 ajax 请求</p></blockquote></li></ol><h3 id="批量导入活动"><a href="#批量导入活动" class="headerlink" title="批量导入活动"></a>批量导入活动</h3><ol><li><p>需求分析</p><p>用户在市场活动主页面，点击“导入”按钮，弹出导入市场活动的模态窗口</p><p>用户在导入市场活动的模态窗口选择要上传的文件，点击“导入”按钮，完成导入市场活动的功能。</p><ul><li><p>只支持。xls</p></li><li><p>文件大小不超过5MB</p></li><li><p>导入成功之后，提示成功导入记录条数，关闭模态窗口，刷新市场活动列表，显示第一页数据，保持每页显示条数不变</p></li><li><p>导入失败，提示信息，模态窗口不关闭，列表也不刷新</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/09-%E5%AF%BC%E5%85%A5%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="导入市场活动时序图"></p></li><li><p>技术准备</p><ol><li><p>文件上传</p><ol><li><p>提交表单</p><p>使用 <code>&lt;input type=&quot;file&quot; name=&quot;myFile&quot;&gt;</code> 标签</p><p>只能使用 <code>POST</code> 请求</p><p>表单的编码格式：<code>multipart/form-data</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myFile&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>提交 AJAX</p><p>data 项中使用 AJAX 提供的接口 <code>FormData</code>，可以将文件模拟成键值对向后台提交数据</p><p>FormData 最大的优势是不但能提交文本数据，还能提交二进制数据</p><ul><li><p>使用 <code>append</code> 向对象追加数据，无数量限制</p></li><li><p>AJAX 配置</p><p><code>processData: false</code>：向后台提交参数前，是否同意转换成字符串，默认 true</p><p><code>contentType: false</code>：向后台提交参数前，是否统一按 urlencoding 编码，默认 true</p></li></ul><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br><span class="hljs-comment">// 参数名需与 Controller 层形参名一致</span><br>formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>, file);<br><br><span class="hljs-comment">// 发送请求</span><br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">data</span>: formData<br>    <span class="hljs-attr">processData</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">contentType</span>: <span class="hljs-literal">false</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ol></li><li><p>服务器接收</p><p>file 文件使用 <code>MultipartFile</code> 形参接收</p><p>添加 springMVC 文件上传配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置springmvc的文件上传解析器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@RequestMapping(&quot;/workbench/activity/fileUpload.do&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> Object <span class="hljs-title function_">fileUpload</span><span class="hljs-params">(String userName, MultipartFile myFile)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">//把文本数据打印到控制台</span><br>    System.out.println(<span class="hljs-string">&quot;userName=&quot;</span>+userName);<br>    <span class="hljs-comment">//把文件在服务指定的目录中生成一个同样的文件</span><br>    String originalFilename=myFile.getOriginalFilename();<br>    File file=<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\course\\18-CRM\\阶段资料\\serverDir\\&quot;</span>,originalFilename);<span class="hljs-comment">//路径必须手动创建好，文件如果不存在，会自动创建</span><br>    myFile.transferTo(file);<br><br>    <span class="hljs-comment">//返回响应信息</span><br>    ReturnObject returnObject=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>();<br>    returnObject.setCode(Contants.RETURN_OBJECT_CODE_SUCCESS);<br>    returnObject.setMessage(<span class="hljs-string">&quot;上传成功&quot;</span>);<br>    <span class="hljs-keyword">return</span> returnObject;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 Java 解析 Excel 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用apache-poi解析excel文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParseExcelTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//根据excel文件生成HSSFWorkbook对象，封装了excel文件的所有信息</span><br>        InputStream is=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\course\\18-CRM\\阶段资料\\serverDir\\aaa.xls&quot;</span>);<br>        HSSFWorkbook wb=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>(is);<br>        <span class="hljs-comment">//根据wb获取HSSFSheet对象，封装了一页的所有信息</span><br>        HSSFSheet sheet=wb.getSheetAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//页的下标，下标从0开始，依次增加</span><br>        <span class="hljs-comment">//根据sheet获取HSSFRow对象，封装了一行的所有信息</span><br>        HSSFRow row=<span class="hljs-literal">null</span>;<br>        HSSFCell cell=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=sheet.getLastRowNum();i++) &#123;<span class="hljs-comment">//sheet.getLastRowNum()：最后一行的下标</span><br>            row=sheet.getRow(i);<span class="hljs-comment">//行的下标，下标从0开始，依次增加</span><br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;row.getLastCellNum();j++) &#123;<span class="hljs-comment">//row.getLastCellNum():最后一列的下标+1</span><br>                <span class="hljs-comment">//根据row获取HSSFCell对象，封装了一列的所有信息</span><br>                cell=row.getCell(j);<span class="hljs-comment">//列的下标，下标从0开始，依次增加</span><br><br>                <span class="hljs-comment">//获取列中的数据</span><br>                System.out.print(HSSFUtils.getCellValueForStr(cell)+<span class="hljs-string">&quot; &quot;</span>);;<br>            &#125;<br><br>            <span class="hljs-comment">//每一行中所有列都打完，打印一个换行</span><br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>封装工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从指定的HSSFCell对象中获取列的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getCellValueForStr</span><span class="hljs-params">(HSSFCell cell)</span>&#123;<br>    String ret=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(cell.getCellType()==HSSFCell.CELL_TYPE_STRING)&#123;<br>        ret=cell.getStringCellValue();<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cell.getCellType()==HSSFCell.CELL_TYPE_NUMERIC)&#123;<br>        ret=cell.getNumericCellValue()+<span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cell.getCellType()==HSSFCell.CELL_TYPE_BOOLEAN)&#123;<br>        ret=cell.getBooleanCellValue()+<span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cell.getCellType()==HSSFCell.CELL_TYPE_FORMULA)&#123;<br>        ret=cell.getCellFormula();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        ret=<span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量导入市场活动</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> activityFile</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@RequestMapping(&quot;/importActivity&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">importActivity</span><span class="hljs-params">(MultipartFile activityFile, HttpSession session)</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) session.getAttribute(Constant.SESSION_USER);<br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">retObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>(Constant.FAIL, <span class="hljs-string">&quot;系统忙&quot;</span>);<br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">HSSFWorkbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>(activityFile.getInputStream());<br>        <span class="hljs-type">HSSFSheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.getSheetAt(<span class="hljs-number">0</span>);<br>        HSSFRow row;<br>        HSSFCell cell;<br>        Activity activity;<br>        List&lt;Activity&gt; activityList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=sheet.getLastRowNum(); i++) &#123;<br>            row = sheet.getRow(i);<br>            activity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Activity</span>();<br>            String cellVal;<br><br>            activity.setId(UUIDUtils.getUUID());<br>            <span class="hljs-comment">// 谁导入的数据，所有者就是谁</span><br>            activity.setOwner(user.getId());<br>            activity.setCreateTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>            activity.setCreateBy(user.getId());<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;row.getLastCellNum(); j++) &#123;<br>                cell = row.getCell(j);<br>                cellVal = HSSFUtils.getCellValueForStr(cell);<br>                <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) &#123;<br>                    activity.setName(cellVal);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span>) &#123;<br>                    activity.setStartDate(cellVal);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">2</span>) &#123;<br>                    activity.setEndDate(cellVal);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">3</span>) &#123;<br>                    activity.setCost(cellVal);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">4</span>) &#123;<br>                    activity.setDescription(cellVal);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 每遍历出一行，保存到 List 集合中</span><br>            activityList.add(activity);<br>        &#125;<br>        <span class="hljs-comment">// 调用 Service 层方法，保存市场活动</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> activityService.saveByList(activityList);<br>        retObj.setCode(Constant.SUCCESS);<br>        retObj.setRetObject(res);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> retObj;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>v：</p><ul><li><p>读取 xls 文件时</p><p>sheet.getLastRowNum()：最后一行的下标</p><p>row.getLastCellNum()：最后一列的下标+1</p></li></ul></blockquote></li></ol><h3 id="市场活动明细"><a href="#市场活动明细" class="headerlink" title="市场活动明细"></a>市场活动明细</h3><ol><li><p>需求分析</p><p>用户在市场活动主页面，点击市场活动名称超级链接，跳转到明细页面，完成查看市场活动明细的功能。</p><ul><li>在市场活动明细页面，展示：<ol><li>市场活动的基本信息</li><li>该市场活动下所有的备注信息</li></ol></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/10-%E6%9F%A5%E7%9C%8B%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E6%98%8E%E7%BB%86%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="查看市场活动明细时序图"></p></li><li><p>重点回顾</p><ul><li><p>使用标签保存数据，以供不时之需</p><ol><li><p>表单组件标签，优先使用 value</p><p>不方便时，使用自定义属性</p></li><li><p>如果不是表单组件，优先使用自定义属性</p></li></ol><p>数据的获取：</p><ol><li>value 属性：<code>dom对象.val()</code></li><li>自定义属性：<code>dom对象.attr(&quot;属性名&quot;)</code></li></ol></li></ul></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 活动详情</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> activityId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/activityDetail&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">activityDetail</span><span class="hljs-params">(String activityId, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-comment">// 获取市场活动详情</span><br>    <span class="hljs-type">Activity</span> <span class="hljs-variable">activity</span> <span class="hljs-operator">=</span> activityService.queryActivityDetailById(activityId);<br>    <span class="hljs-comment">// 获取市场活动评论</span><br>    List&lt;ActivityRemark&gt; activityRemarkList = activityRemarkService.queryActivityRemarkByActivityId(activityId);<br><br>    <span class="hljs-comment">// 装载到 request 作用域</span><br>    request.setAttribute(<span class="hljs-string">&quot;activity&quot;</span>, activity);<br>    request.setAttribute(<span class="hljs-string">&quot;activityRemarkList&quot;</span>, activityRemarkList);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;workbench/activity/detail&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="添加活动备注"><a href="#添加活动备注" class="headerlink" title="添加活动备注"></a>添加活动备注</h3><ol><li><p>需求分析</p><p>用户在市场活动明细页面，输入备注内容，点击“保存”按钮，完成添加市场活动备注的功能</p><ul><li><p>备注内容不能为空</p></li><li><p>添加成功之后，清空输入框，刷新备注列表</p></li><li><p>添加失败，提示信息，输入框不清空，列表也不刷新</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/11-%E6%B7%BB%E5%8A%A0%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E5%A4%87%E6%B3%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="添加市场活动备注时序图"></p></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存 remark 信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> activityRemark</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/saveActivityRemarkSelective&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">saveSelective</span><span class="hljs-params">(ActivityRemark activityRemark, HttpSession session)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) session.getAttribute(Constant.SESSION_USER);<br>    <span class="hljs-comment">// 封装参数</span><br>    activityRemark.setId(UUIDUtils.getUUID());<br>    activityRemark.setCreateTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    activityRemark.setCreateBy(user.getId());<br>    activityRemark.setEditFlag(Constant.REMARK_EDIT_FLAG_NO);<br><br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">returnObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>(Constant.FAIL, <span class="hljs-string">&quot;系统忙&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 访问 Service 层，保存创建市场活动备注</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> activityRemarkService.saveSelective(activityRemark);<br><br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            returnObject.setCode(Constant.SUCCESS);<br>            returnObject.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>            returnObject.setRetObject(activityRemark);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> returnObject;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>v：</p><p>AJAX 访问 Controller 层，控制台报错找不到 jsp，查看是否添加了 ResponseBody 注解</p><p>新增加的 remark 属于动态元素，没有鼠标悬停等特效，需将绑定的函数改为 on 的形式</p></blockquote></li></ol><h3 id="删除活动备注"><a href="#删除活动备注" class="headerlink" title="删除活动备注"></a>删除活动备注</h3><ol><li><p>需求分析</p><p>用户在市场活动明细页面，点击“删除”市场活动备注的图标，完成删除市场活动备注的功能</p><ul><li><p>删除成功之后，刷新备注列表</p></li><li><p>删除失败，提示信息，备注列表不刷新</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/12-%E5%88%A0%E9%99%A4%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E5%A4%87%E6%B3%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="删除市场活动备注时序图"></p></li><li><p>重点回顾</p><ul><li><p>使用标签定位：</p><ol><li>优先考虑 id 属性（id 不可重复），其次考虑 name 属性，最后考虑自定义属性</li></ol></li><li><p>选中指定标签中的指定属性（表单可以使用 <code>:</code> 过滤器替代）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">a[name=<span class="hljs-string">&#x27;deleteA&#x27;</span>]<br></code></pre></td></tr></table></figure></li></ul></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除指定的留言</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/deleteActivityRemarkById&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">deleteActivityRemarkById</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">returnObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>(Constant.FAIL, <span class="hljs-string">&quot;系统忙&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 调用 Service 方法删除</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> activityRemarkService.deleteById(id);<br>        <span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) &#123;<br>            returnObject.setCode(Constant.SUCCESS);<br>            returnObject.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> returnObject;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="修改活动备注"><a href="#修改活动备注" class="headerlink" title="修改活动备注"></a>修改活动备注</h3><ol><li><p>需求分析</p><p>用户在市场活动明细页面，点击“修改”市场活动备注的图标，弹出修改市场活动备注的模态窗口</p><p>用户在修改市场活动备注的模态窗口，填写表单，点击“更新”按钮，完成修改市场活动备注的功能</p><ul><li><p>备注内容不能为空</p></li><li><p>修改成功之后，关闭模态窗口，刷新备注列表</p></li><li><p>修改失败，提示信息，模态窗口不关闭，列表也不刷新</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/13-%E4%BF%AE%E6%94%B9%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E5%A4%87%E6%B3%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="修改市场活动备注时序图"></p></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改市场活动备注</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> remark</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/editActivityRemarkById&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">editActivityRemarkById</span><span class="hljs-params">(ActivityRemark remark, HttpSession session)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) session.getAttribute(Constant.SESSION_USER);<br>    remark.setEditTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    remark.setEditBy(user.getId());<br>    remark.setEditFlag(Constant.REMARK_EDIT_FLAG_YES);<br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">returnObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>(Constant.FAIL, <span class="hljs-string">&quot;服务忙&quot;</span>);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> activityRemarkService.editSelective(remark);<br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            returnObject.setCode(Constant.SUCCESS);<br>            returnObject.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>            returnObject.setRetObject(remark);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> returnObject;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="创建线索"><a href="#创建线索" class="headerlink" title="创建线索"></a>创建线索</h3><ol><li><p>需求分析</p><p>用户在线索主页面，点击“创建”按钮，弹出创建线索的模态窗口</p><p>用户在创建线索的模态窗口，填写表单，点击”保存”按钮，完成创建线索的功能</p><ul><li><p>所有者、称呼、线索状态、线索来源是动态的</p></li><li><p>表单验证</p></li><li><p>创建成功之后，关闭模态窗口，刷新线索列表，显示第一页数据，保持每页显示条数不变</p></li><li><p>创建失败，提示信息，模态窗口不关闭，列表也不刷新</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/14-%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%B4%A2%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="创建线索时序图"></p></li><li><p>技术准备</p><ul><li><p>数据字典</p><p>tbl_dic_type 为数据字典表，属于系统功能，对应每一个下拉列表，字典值为用户维护</p><p>tbl_dic_value 为数据字典值，对应每一个下拉列表中的值，通过 type_code 字段与 tbl_dic_type 表一一对应</p></li></ul></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建线索</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> clue</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/create&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">create</span><span class="hljs-params">(Clue clue, HttpSession session)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) session.getAttribute(Constant.SESSION_USER);<br>    clue.setId(UUIDUtils.getUUID());<br>    clue.setCreateBy(user.getId());<br>    clue.setCreateTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br><br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">returnObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>(Constant.FAIL, <span class="hljs-string">&quot;服务忙&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> clueService.createSelective(clue);<br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) &#123;<br>            returnObject.setCode(Constant.SUCCESS);<br>            returnObject.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> returnObject;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>v：</p><p>数据库字符串排序数字会出现 1、10、2 的情况，此时需做以下处理：</p><ol><li><p>先进行位数排序，再进行字符排序</p><p><code>order by length(order_no), order_no asc</code></p></li><li><p>转化为数字类型进行排序</p><p><code>order by cast(order_no decimal) asc</code></p></li></ol></blockquote></li></ol><h3 id="查看线索明细"><a href="#查看线索明细" class="headerlink" title="查看线索明细"></a>查看线索明细</h3><ol><li><p>需求分析</p><p>用户在线索主页面，点击线索名称（fullname 和 appellition）超级链接，跳转到线索明细页面，完成查看线索明细的功能</p><ul><li>在线索明细页面，展示：<ol><li>线索的基本信息</li><li>线索的备注信息</li><li>跟该线索相关联的市场活动信息</li></ol></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/15-%E6%9F%A5%E7%9C%8B%E7%BA%BF%E7%B4%A2%E6%98%8E%E7%BB%86%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="查看线索明细时序图"></p></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线索详情</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/detail&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">detail</span><span class="hljs-params">(String clueId, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-comment">// 调用 Service 查询所需信息</span><br>    <span class="hljs-type">Clue</span> <span class="hljs-variable">clue</span> <span class="hljs-operator">=</span> clueService.queryDetailById(clueId);<br>    List&lt;Activity&gt; activityList = activityService.queryByClueId(clueId);<br><br>    <span class="hljs-comment">// 封装到 request 页面</span><br>    request.setAttribute(<span class="hljs-string">&quot;clue&quot;</span>, clue);<br>    request.setAttribute(<span class="hljs-string">&quot;activityList&quot;</span>, activityList);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;workbench/clue/detail&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="线索关联活动"><a href="#线索关联活动" class="headerlink" title="线索关联活动"></a>线索关联活动</h3><ol><li><p>需求分析</p><p>用户在线索明细页面，点击“关联市场活动”按钮，弹出线索关联市场活动的模态窗口</p><p>用户在线索关联市场活动的模态窗口，输入搜索条件，每次键盘弹起，根据名称模糊查询市场活动，把所有符合条件的市场活动显示到列表中；用户选择要关联的市场活动，点击“关联”按钮，完成线索关联市场活动的功能</p><ul><li><p>每次至少关联一个市场活动</p></li><li><p>同一个市场活动只能跟同一个线索关联一次</p></li><li><p>关联成功之后，关闭模态窗口，刷新已经关联过的市场活动列表</p></li><li><p>关联失败，提示信息，模态窗口不关闭，已经关联过的市场活动列表也不刷新</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/16-%E7%BA%BF%E7%B4%A2%E5%85%B3%E8%81%94%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="线索关联市场活动时序图"></p></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/saveRelation&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">saveRelation</span><span class="hljs-params">(String[] activityIds, String clueId)</span> &#123;<br>    ClueActivityRelation relation;<br>    List&lt;ClueActivityRelation&gt; relationList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">for</span> (String activityId: activityIds) &#123;<br>        relation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClueActivityRelation</span>();<br>        relation.setId(UUIDUtils.getUUID());<br>        relation.setActivityId(activityId);<br>        relation.setClueId(clueId);<br>        relationList.add(relation);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">countCAR</span> <span class="hljs-operator">=</span> carService.createByList(relationList);<br><br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">retObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>(Constant.FAIL, <span class="hljs-string">&quot;服务忙&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (countCAR &gt; <span class="hljs-number">0</span>) &#123;<br>            retObj.setCode(Constant.SUCCESS);<br>            retObj.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>            retObj.setRetObject(activityService.queryDetailByIds(activityIds));<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> retObj;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="线索删除关联"><a href="#线索删除关联" class="headerlink" title="线索删除关联"></a>线索删除关联</h3><ol><li><p>需求分析</p><p>用户在线索明细页面，点击某一个”解除关联“按钮”，弹出确认解除的窗口</p><p>用户点击“确定”按钮，完成解除线索关联市场活动的功能</p><ul><li><p>解除成功之后，刷新已经关联的市场活动列表</p></li><li><p>解除失败，提示信息，列表也不刷新</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/17-%E8%A7%A3%E9%99%A4%E7%BA%BF%E7%B4%A2%E5%85%B3%E8%81%94%E5%B8%82%E5%9C%BA%E6%B4%BB%E5%8A%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="解除线索关联市场活动时序图"></p></li><li><p>编码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除关联的线索</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> relation</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/deleteRelation&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">deleteRelation</span><span class="hljs-params">(ClueActivityRelation relation)</span> &#123;<br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">retObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>(Constant.FAIL, <span class="hljs-string">&quot;Server Busy&quot;</span>);<br>    <span class="hljs-comment">// 调用 Service 层删除线索活动关系</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> carService.deleteByActivityIdAndClueId(relation);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            retObj.setCode(Constant.SUCCESS);<br>            retObj.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> retObj;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="线索转换"><a href="#线索转换" class="headerlink" title="线索转换"></a>线索转换</h3><ol><li><p>需求分析</p><p>用户在线索明细页面，点击“转换”按钮，跳转到线索转换页面</p><p>用户在线索转换页面，如果需要创建创建交易，则填写交易表单数据，点击“转换”按钮，完成线索转换的功能</p><ul><li><p>在线索转换页面，展示：fullName，appellation，company，owner</p></li><li><p>市场活动源是可搜索的</p></li><li><p>数据转换：</p><ul><li><p>把线索中有关公司的信息转换到客户表中</p></li><li><p>把线索中有关个人的信息转换到联系人表中</p></li><li><p>把线索的备注信息转换到客户备注表中一份</p></li><li><p>把线索的备注信息转换到联系人备注表中一份</p></li><li><p>把线索和市场活动的关联关系转换到联系人和市场活动的关联关系表中</p></li><li><p>如果需要创建交易，还要往交易表中添加一条记录</p></li><li><p>如果需要创建交易，还要把线索的备注信息转换到交易备注表中一份</p></li><li><p>删除线索的备注</p></li><li><p>删除线索和市场活动的关联关系</p></li><li><p>删除线索</p></li><li><p>在一同个事务中完成</p></li></ul></li><li><p>转换成功之后，跳转到线索主页面</p></li><li><p>转换失败，提示信息，页面不跳转</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/18-%E7%BA%BF%E7%B4%A2%E8%BD%AC%E6%8D%A2%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="线索转换时序图"></p></li><li><p>编码实现</p><p>Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveConvert</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>    <span class="hljs-comment">/* 把线索中有关公司的信息转换到客户表中 */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">clueId</span> <span class="hljs-operator">=</span> (String) map.get(<span class="hljs-string">&quot;clueId&quot;</span>);<br>    <span class="hljs-comment">// Controller 获取的用户信息传递到 Service</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) map.get(Constant.SESSION_USER);<br>    <span class="hljs-comment">// 根据 clueId 查询 clue 信息</span><br>    <span class="hljs-type">Clue</span> <span class="hljs-variable">clue</span> <span class="hljs-operator">=</span> clueMapper.selectByPrimaryKey(clueId);<br><br>    <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>    customer.setId(UUIDUtils.getUUID());<br>    customer.setOwner(user.getId());    <span class="hljs-comment">// 谁创建的谁是所有者</span><br>    customer.setName(clue.getCompany());<br>    customer.setWebsite(clue.getWebsite());<br>    customer.setPhone(clue.getPhone());<br>    customer.setCreateBy(user.getId());<br>    customer.setCreateTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    customer.setContactSummary(clue.getContactSummary());<br>    customer.setNextContactTime(clue.getNextContactTime());<br>    customer.setDescription(clue.getDescription());<br>    customer.setAddress(clue.getAddress());<br>    <span class="hljs-comment">// 保存到客户</span><br>    customerMapper.insertSelective(customer);<br><br>    <span class="hljs-comment">/* 把线索中有关个人的信息转换到联系人表中 */</span><br>    <span class="hljs-type">Contacts</span> <span class="hljs-variable">contacts</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contacts</span>();<br>    contacts.setId(UUIDUtils.getUUID());<br>    contacts.setOwner(user.getId());<br>    contacts.setSource(clue.getSource());<br>    contacts.setCustomerId(UUIDUtils.getUUID());<br>    contacts.setFullname(clue.getFullname());<br>    contacts.setAppellation(clue.getAppellation());<br>    contacts.setEmail(clue.getEmail());<br>    contacts.setMphone(clue.getMphone());<br>    contacts.setJob(clue.getJob());<br>    contacts.setCreateBy(user.getId());<br>    contacts.setCreateTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    contacts.setDescription(clue.getDescription());<br>    contacts.setContactSummary(clue.getContactSummary());<br>    contacts.setNextContactTime(clue.getNextContactTime());<br>    contacts.setAddress(clue.getAddress());<br>    contactsMapper.insertSelective(contacts);<br><br>    <span class="hljs-comment">/* 把线索的备注信息转换到客户、联系人备注表中一份 */</span><br>    <span class="hljs-comment">// 根据 clueId 查询 clueRemark 信息</span><br>    List&lt;ClueRemark&gt; clueRemarkList = clueRemarkMapper.selectByClueId(clueId);<br>    <span class="hljs-keyword">if</span> (clueRemarkList!=<span class="hljs-literal">null</span> &amp;&amp; clueRemarkList.size()&gt;<span class="hljs-number">0</span>) &#123;<br>        CustomerRemark customerRemark;<br>        ContactsRemark contactsRemark;<br>        <span class="hljs-keyword">for</span> (ClueRemark cr : clueRemarkList) &#123;<br>            <span class="hljs-comment">// 获取参数</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> cr.getId();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">noteContent</span> <span class="hljs-operator">=</span> cr.getNoteContent();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">createBy</span> <span class="hljs-operator">=</span> cr.getCreateBy();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">createTime</span> <span class="hljs-operator">=</span> cr.getCreateTime();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">editBy</span> <span class="hljs-operator">=</span> cr.getEditBy();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">editTime</span> <span class="hljs-operator">=</span> cr.getEditTime();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">editFlag</span> <span class="hljs-operator">=</span> cr.getEditFlag();<br><br>            <span class="hljs-comment">// CustomerRemark</span><br>            customerRemark = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerRemark</span>();<br>            customerRemark.setId(id);<br>            customerRemark.setNoteContent(noteContent);<br>            customerRemark.setCreateBy(createBy);<br>            customerRemark.setCreateTime(createTime);<br>            customerRemark.setEditBy(editBy);<br>            customerRemark.setEditTime(editTime);<br>            customerRemark.setEditFlag(editFlag);<br>            customerRemark.setCustomerId(customer.getId());<br>            customerRemarkMapper.insert(customerRemark);<br><br>            <span class="hljs-comment">// ContactsRemark</span><br>            contactsRemark = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContactsRemark</span>();<br>            contactsRemark.setId(id);<br>            contactsRemark.setNoteContent(noteContent);<br>            contactsRemark.setCreateBy(createBy);<br>            contactsRemark.setCreateTime(createTime);<br>            contactsRemark.setEditBy(editBy);<br>            contactsRemark.setEditTime(editTime);<br>            contactsRemark.setEditFlag(editFlag);<br>            contactsRemark.setContactsId(contacts.getId());<br>            contactsRemarkMapper.insert(contactsRemark);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* 把线索和市场活动的关联关系转换到联系人和市场活动的关联关系表中 */</span><br>    <span class="hljs-comment">// 根据 clueId 查询 clueActivityRelationList</span><br>    List&lt;ClueActivityRelation&gt; clueARList = clueARMapper.selectByClueId(clueId);<br>    <span class="hljs-keyword">if</span> (clueARList!=<span class="hljs-literal">null</span> &amp;&amp; clueARList.size()&gt;<span class="hljs-number">0</span>) &#123;<br>        ContactsActivityRelation conAR;<br>        <span class="hljs-keyword">for</span> (ClueActivityRelation clueAR : clueARList) &#123;<br>            conAR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContactsActivityRelation</span>();<br>            conAR.setId(clueAR.getId());<br>            conAR.setActivityId(clueAR.getActivityId());<br>            conAR.setContactsId(contacts.getId());<br>            conARMapper.insert(conAR);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* 如果需要创建交易，还要往交易表中添加一条记录 */</span><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-type">boolean</span>) map.get(<span class="hljs-string">&quot;isCreateTran&quot;</span>)) &#123;<br>        <span class="hljs-type">Transaction</span> <span class="hljs-variable">tran</span> <span class="hljs-operator">=</span> (Transaction) map.get(<span class="hljs-string">&quot;transaction&quot;</span>);<br>        tran.setId(UUIDUtils.getUUID());<br>        tran.setOwner(user.getId());<br>        tran.setCustomerId(customer.getId());<br>        tran.setContactsId(contacts.getId());<br>        tran.setCreateBy(user.getId());<br>        tran.setCreateTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>        transactionMapper.insertSelective(tran);<br><br>        <span class="hljs-comment">/* 如果需要创建交易，还要把线索的备注信息转换到交易备注表中一份 */</span><br>        <span class="hljs-comment">// TransactionRemark</span><br>        <span class="hljs-keyword">if</span> (clueRemarkList!=<span class="hljs-literal">null</span> &amp;&amp; clueRemarkList.size()&gt;<span class="hljs-number">0</span>) &#123;<br>            TransactionRemark tranRemark;<br>            <span class="hljs-keyword">for</span> (ClueRemark cr : clueRemarkList) &#123;<br>                tranRemark = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionRemark</span>();<br>                tranRemark.setId(cr.getId());<br>                tranRemark.setNoteContent(cr.getNoteContent());<br>                tranRemark.setCreateBy(cr.getCreateBy());<br>                tranRemark.setCreateTime(cr.getCreateTime());<br>                tranRemark.setEditBy(cr.getEditBy());<br>                tranRemark.setEditTime(cr.getEditTime());<br>                tranRemark.setEditFlag(cr.getEditFlag());<br>                tranRemark.setTranId(tran.getId());<br>                transactionRemarkMapper.insert(tranRemark);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* 删除线索备注 */</span><br>    clueRemarkMapper.deleteByClueId(clueId);<br>    <span class="hljs-comment">/* 删除线索和市场活动的关联关系 */</span><br>    clueARMapper.deleteByClueId(clueId);<br>    <span class="hljs-comment">/* 删除线索 */</span><br>    clueMapper.deleteByPrimaryKey(clueId);<br>&#125;<br></code></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线索转换 - 获取线索信息、数据字典</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> clueId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/convert&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">convert</span><span class="hljs-params">(String clueId, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-comment">// 查询需要动态显示的线索信息</span><br>    <span class="hljs-type">Clue</span> <span class="hljs-variable">clue</span> <span class="hljs-operator">=</span> clueService.queryDetailById(clueId);<br>    <span class="hljs-comment">// 查询交易阶段字典值</span><br>    List&lt;DictionaryValue&gt; stageList = dictionaryValueService.queryByTypeCode(<span class="hljs-string">&quot;stage&quot;</span>);<br><br>    <span class="hljs-comment">// 封装到 request 域中</span><br>    request.setAttribute(<span class="hljs-string">&quot;clue&quot;</span>, clue);<br>    request.setAttribute(<span class="hljs-string">&quot;stageList&quot;</span>, stageList);<br><br>    <span class="hljs-comment">// 请求转发</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;workbench/clue/convert&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线索转换 - 查询活动列表（仅已关联活动）</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> activityName</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> clueId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/convert/activity&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">convertActivity</span><span class="hljs-params">(String activityName, String clueId)</span> &#123;<br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;activityName&quot;</span>, activityName);<br>    map.put(<span class="hljs-string">&quot;clueId&quot;</span>, clueId);<br><br>    <span class="hljs-keyword">return</span> activityService.queryByNameAndClueIdOnlyBounded(map);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线索转换 - 业务执行</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> clueId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> transaction</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> isCreateTran</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/convert/execute&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">convertExecute</span><span class="hljs-params">(String clueId, Transaction transaction, <span class="hljs-type">boolean</span> isCreateTran, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 封装所需信息到 Map</span><br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;clueId&quot;</span>, clueId);<br>    map.put(<span class="hljs-string">&quot;transaction&quot;</span>, transaction);<br>    map.put(<span class="hljs-string">&quot;isCreateTran&quot;</span>, isCreateTran);<br>    map.put(Constant.SESSION_USER, session.getAttribute(Constant.SESSION_USER));<br><br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">retObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>(Constant.FAIL, <span class="hljs-string">&quot;Server Busy&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        clueService.saveConvert(map);<br><br>        <span class="hljs-comment">// 还没报异常则执行成功</span><br>        retObj.setCode(Constant.SUCCESS);<br>        retObj.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> retObj;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="查询、创建交易"><a href="#查询、创建交易" class="headerlink" title="查询、创建交易"></a>查询、创建交易</h3><ol><li><p>需求分析</p><p>用户在交易主页面，点击“创建”按钮，跳转到创建交易的页面</p><p>用户在创建交易的页面填写表单，点击”保存”按钮，完成创建交易的功能</p><ul><li><p>所有者、阶段、类型、来源 都是动态的</p></li><li><p>市场活动源是可搜索的</p></li><li><p>联系人也是可搜索的</p></li><li><p>可能性是可配置的</p></li><li><p>客户名称支持自动补全</p></li><li><p>表单验证</p></li><li><p>保存成功之后，跳转到交易主页面</p></li><li><p>保存失败，提示信息，页面不跳转</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/19-%E6%9F%A5%E8%AF%A2%E3%80%81%E5%88%9B%E5%BB%BA%E4%BA%A4%E6%98%93%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="查询、创建交易时序图"></p></li><li><p>技术准备</p><ul><li><p>可能性配置</p><p>创建交易时选择“阶段”，“可能性”自动填充该阶段对应成交的百分比</p><p>用户提供配置文件，配置每个阶段对应的可能性，显示到输入框</p><ol><li><p>提供配置文件，保存在后台服务器</p><p>possibility.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">资质审查</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">需求分析</span>=<span class="hljs-string">20</span><br><span class="hljs-attr">价值建议</span>=<span class="hljs-string">30</span><br><span class="hljs-attr">确定决策者</span>=<span class="hljs-string">50</span><br><span class="hljs-attr">提案/报价</span>=<span class="hljs-string">70</span><br><span class="hljs-attr">谈判/复审</span>=<span class="hljs-string">90</span><br><span class="hljs-attr">成交</span>=<span class="hljs-string">100</span><br><span class="hljs-attr">丢失的线索</span>=<span class="hljs-string">0</span><br><span class="hljs-attr">因竞争丢失关闭</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure></li><li><p>用户每次选择阶段，向后台发送请求</p></li><li><p>后台提供 Controller，接收请求，根据选择的阶段，解析配置文件，获取对应的可能性</p></li><li><p>把可能性返回前台，显示在输入框</p></li></ol></li><li><p>jQuery find()</p><p>找到某一标签下的子标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> stageValue = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;option:selected&quot;</span>).<span class="hljs-title function_">text</span>();<br></code></pre></td></tr></table></figure></li><li><p>Service 层传递 Map</p><p>若要传递 Map 到 Service 层，则需要在 Map 形参定义前添加 <code>@RequestParam</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, Object&gt; map)</span>&#123;&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>编码实现</p><p>Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">saveSelective</span><span class="hljs-params">(Transaction transaction, User user)</span> &#123;<br>    <span class="hljs-comment">// 封装 transaction</span><br>    transaction.setId(UUIDUtils.getUUID());<br>    transaction.setCreateBy(user.getId());<br>    transaction.setCreateTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br><br>    <span class="hljs-comment">// 调用 customerMapper 判断该公司名是否存在</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">customerId</span> <span class="hljs-operator">=</span> customerMapper.selectIdByCustomerId(transaction.getCustomerId());<br><br>    <span class="hljs-keyword">if</span> (customerId != <span class="hljs-literal">null</span>) &#123;<br>        transaction.setCustomerId(customerId);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 若查无此公司，则新建一个公司</span><br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>();<br>        customer.setId(UUIDUtils.getUUID());<br>        customer.setOwner(user.getId());<br>        customer.setName(transaction.getCustomerId());<br>        customer.setCreateBy(user.getId());<br>        customer.setCreateTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>        customerMapper.insertSelective(customer);<br><br>        transaction.setCustomerId(customer.getId());<br>    &#125;<br><br>    <span class="hljs-comment">// 调用完成后，往 TransactionHistory 中添加一条数据</span><br>    <span class="hljs-type">TransactionHistory</span> <span class="hljs-variable">tranHistory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionHistory</span>();<br>    tranHistory.setId(UUIDUtils.getUUID());<br>    tranHistory.setStage(transaction.getStage());<br>    tranHistory.setMoney(transaction.getMoney());<br>    tranHistory.setExpectedDate(transaction.getExpectedDate());<br>    tranHistory.setCreateTime(DateUtils.formatDateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    tranHistory.setCreateBy(user.getId());<br>    tranHistory.setTranId(transaction.getId());<br>    transactionHistoryMapper.insert(tranHistory);<br><br>    <span class="hljs-keyword">return</span> transactionMapper.insertSelective(transaction);<br>&#125;<br></code></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存 - 跳转到保存页面</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@RequestMapping(&quot;/save&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    request.setAttribute(<span class="hljs-string">&quot;userList&quot;</span>, userService.selectAll());<br>    request.setAttribute(<span class="hljs-string">&quot;stageList&quot;</span>, dictionaryValueService.queryByTypeCode(<span class="hljs-string">&quot;stage&quot;</span>));<br>    request.setAttribute(<span class="hljs-string">&quot;typeList&quot;</span>, dictionaryValueService.queryByTypeCode(<span class="hljs-string">&quot;transactionType&quot;</span>));<br>    request.setAttribute(<span class="hljs-string">&quot;sourceList&quot;</span>, dictionaryValueService.queryByTypeCode(<span class="hljs-string">&quot;source&quot;</span>));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;workbench/transaction/save&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存 - 获取阶段可能性</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stageValue</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@RequestMapping(&quot;/save/getPossibilityByStage&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getPossibilityByStage</span><span class="hljs-params">(String stageValue)</span> &#123;<br>    <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;possibility&quot;</span>);<br>    <span class="hljs-keyword">return</span> bundle.getString(stageValue);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存 - 自动补全公司名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@RequestMapping(&quot;/save/queryAllCustomerName&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">queryAllCustomerName</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> customerService.queryCustomerName(name);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存 transaction</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> transaction</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@RequestMapping(&quot;/save/do&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doSave</span><span class="hljs-params">(Transaction transaction, HttpSession session)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) session.getAttribute(Constant.SESSION_USER);<br><br>    <span class="hljs-type">ReturnObject</span> <span class="hljs-variable">retObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReturnObject</span>(Constant.FAIL, <span class="hljs-string">&quot;Server Busy&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (transactionService.saveSelective(transaction, user) &gt; <span class="hljs-number">0</span>) &#123;<br>            retObj.setCode(Constant.SUCCESS);<br>            retObj.setMsg(<span class="hljs-string">&quot;Success&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">return</span> retObj;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="查看交易明细"><a href="#查看交易明细" class="headerlink" title="查看交易明细"></a>查看交易明细</h3><ol><li><p>需求分析</p><p>用户在交易主页面，点击交易名称超级链接，跳转到交易明细页面，完成查看交易明细的功能</p><ul><li><p>显示交易的基本信息</p></li><li><p>显示交易的备注信息</p></li><li><p>显示交易的历史信息</p></li><li><p>显示交易的阶段图标信息</p></li></ul></li><li><p>流程设计</p><p><img src="/images/image-project/crm/20-%E6%9F%A5%E7%9C%8B%E4%BA%A4%E6%98%93%E6%98%8E%E7%BB%86%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="查看交易明细时序图"></p></li><li><p>技术准备</p><ul><li><p>Java 中的实体类不止操作表，可自定义添加属性，附带传输其他数据</p><blockquote><p>数据库表在 Java 中一定有实体类相对应，数据库表字段在 Java 中一定有属性相对应</p></blockquote></li><li><p>显示交易阶段图标</p><p>按照顺序查询交易所有的阶段：stageList</p><p>遍历 stageList，显示每个阶段对应的图标，图标上显示的阶段名从遍历中取</p></li></ul></li><li><p>编码实现</p><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 详情页面</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/detail&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">detail</span><span class="hljs-params">(String id, HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">Transaction</span> <span class="hljs-variable">tran</span> <span class="hljs-operator">=</span> transactionService.queryDetailById(id);<br>    List&lt;TransactionHistory&gt; tranHistoryList = transactionHistoryService.queryDetailByTranId(id);<br>    <span class="hljs-comment">// 从配置文件查询可能性</span><br>    <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;possibility&quot;</span>);<br>    <span class="hljs-comment">// 调用数据字典值查询 stage</span><br>    List&lt;DictionaryValue&gt; stageList = dicValService.queryByTypeCode(<span class="hljs-string">&quot;stage&quot;</span>);<br><br>    request.setAttribute(<span class="hljs-string">&quot;tran&quot;</span>, tran);<br>    request.setAttribute(<span class="hljs-string">&quot;tranHistoryList&quot;</span>, tranHistoryList);<br>    request.setAttribute(<span class="hljs-string">&quot;possibility&quot;</span>, bundle.getString(tran.getStage()));<br>    request.setAttribute(<span class="hljs-string">&quot;stageList&quot;</span>, stageList);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;workbench/transaction/detail&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="交易统计图表"><a href="#交易统计图表" class="headerlink" title="交易统计图表"></a>交易统计图表</h3><ol><li><p>需求分析</p><p>用户点击”交易统计图表”菜单，显示交易统计图表页面，以销售漏斗图的形式显示交易表中各个阶段的记录数量，完成查看交易统计图表的功能</p></li><li><p>流程设计</p><p><img src="/images/image-project/crm/21-%E4%BA%A4%E6%98%93%E7%BB%9F%E8%AE%A1%E5%9B%BE%E8%A1%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="交易统计图表时序图"></p></li><li><p>技术准备</p><ul><li><p>销售漏斗图</p><p>展示商品销售数据、销售业绩</p><blockquote><p>报表插件：jfreechart，iReport，锐浪，echarts</p></blockquote><p><a href="https://echarts.apache.org/zh/tutorial.html">echarts</a> 的使用：</p><ol><li>引入开发包 <code>echarts.min.js</code>（需 jQuery 包）</li><li>创建容器</li><li>当容器加载完成后，对容器调用工具函数</li></ol><p>示例代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第一个 ECharts 实例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入 echarts.js --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> myChart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;main&#x27;</span>));</span><br><span class="language-javascript"> </span><br><span class="language-javascript">        <span class="hljs-comment">// 指定图表的配置项和数据</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> option = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;第一个 ECharts 实例&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">tooltip</span>: &#123;&#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">legend</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>:[<span class="hljs-string">&#x27;销量&#x27;</span>]</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;衬衫&quot;</span>,<span class="hljs-string">&quot;羊毛衫&quot;</span>,<span class="hljs-string">&quot;雪纺衫&quot;</span>,<span class="hljs-string">&quot;裤子&quot;</span>,<span class="hljs-string">&quot;高跟鞋&quot;</span>,<span class="hljs-string">&quot;袜子&quot;</span>]</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">yAxis</span>: &#123;&#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">series</span>: [&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;销量&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>: [<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">36</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>]</span><br><span class="language-javascript">            &#125;]</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript"> </span><br><span class="language-javascript">        <span class="hljs-comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="language-javascript">        myChart.<span class="hljs-title function_">setOption</span>(option);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>编码实现</p><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">basePath</span> <span class="hljs-operator">=</span> request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;jquery/jquery-1.11.1-min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;jquery/echars/echarts.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        $(function () &#123;<br>            $.ajax(&#123;<br>                url: <span class="hljs-string">&#x27;workbench/chart/transaction/queryCountOfTranGroupByStage?t=&#x27;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().valueOf(),<br>                type: <span class="hljs-string">&#x27;get&#x27;</span>,<br>                dataType: <span class="hljs-string">&#x27;json&#x27;</span>,<br>                success: function (res) &#123;<br>                    <span class="hljs-comment">// 基于准备好的dom，初始化 ECharts 实例</span><br>                    <span class="hljs-type">var</span> <span class="hljs-variable">myChart</span> <span class="hljs-operator">=</span> echarts.init($(<span class="hljs-string">&quot;#main&quot;</span>)[<span class="hljs-number">0</span>]);<br><br>                    <span class="hljs-comment">// 指定图表的配置项和数据</span><br>                    <span class="hljs-type">var</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> &#123;<br>                        title: &#123;<br>                            text: <span class="hljs-string">&#x27;交易统计图表&#x27;</span>,<br>                            subtext: <span class="hljs-string">&#x27;交易表中各个阶段的数量&#x27;</span><br>                        &#125;,<br>                        tooltip: &#123;<br>                            trigger: <span class="hljs-string">&#x27;item&#x27;</span>,<br>                            formatter: <span class="hljs-string">&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125;&quot;</span><br>                        &#125;,<br>                        toolbox: &#123;<br>                            feature: &#123;<br>                                dataView: &#123;readOnly: <span class="hljs-literal">false</span>&#125;,<br>                                restore: &#123;&#125;,<br>                                saveAsImage: &#123;&#125;<br>                            &#125;<br>                        &#125;,<br>                        series: [<br>                            &#123;<br>                                name: <span class="hljs-string">&#x27;数据量&#x27;</span>,<br>                                type: <span class="hljs-string">&#x27;funnel&#x27;</span>,<br>                                left: <span class="hljs-string">&#x27;10%&#x27;</span>,<br>                                width: <span class="hljs-string">&#x27;80%&#x27;</span>,<br>                                label: &#123;<br>                                    formatter: <span class="hljs-string">&#x27;&#123;b&#125;&#x27;</span><br>                                &#125;,<br>                                labelLine: &#123;<br>                                    show: <span class="hljs-literal">true</span><br>                                &#125;,<br>                                itemStyle: &#123;<br>                                    opacity: <span class="hljs-number">0.7</span><br>                                &#125;,<br>                                emphasis: &#123;<br>                                    label: &#123;<br>                                        position: <span class="hljs-string">&#x27;inside&#x27;</span>,<br>                                        formatter: <span class="hljs-string">&#x27;&#123;b&#125;: &#123;c&#125;&#x27;</span><br>                                    &#125;<br>                                &#125;,<br>                                data: res<br>                            &#125;<br>                        ]<br>                    &#125;;<br><br>                    <span class="hljs-comment">// 使用刚指定的配置项和数据显示图表。</span><br>                    myChart.setOption(option);<br>                &#125;<br>            &#125;)<br>        &#125;);<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 Dom --&gt;<br>&lt;div id=<span class="hljs-string">&quot;main&quot;</span> style=<span class="hljs-string">&quot;width: 600px;height:400px;&quot;</span>&gt;&lt;/div&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CRM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Project - Configuration and Appendix</title>
    <link href="/2022/09/04/Project%20-%20Configuration%20and%20Appendix/"/>
    <url>/2022/09/04/Project%20-%20Configuration%20and%20Appendix/</url>
    
    <content type="html"><![CDATA[<h1 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database if not exists xxxx default character set utf8;<br>use xxxx;<br><br>drop table if exists xxxx;<br>create table xxxx (<br>xxxx varchar(255) not null,<br>    xxxx varchar(255) default null,<br>    primary key(xxxx) using btree<br>) engine = innodb character set = utf8;<br></code></pre></td></tr></table></figure><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>放到坐标标签下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-comment">&lt;!-- 集中定义依赖版本号 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.32<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- mybatis 支持的分页插件（作用于 JSP，Vue 用不到） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.paginator.version</span>&gt;</span>1.2.15<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.paginator.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pagehelper.version</span>&gt;</span>5.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">pagehelper.version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- mybatis 与 sping 整合 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.spring.version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.spring.version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-api.version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-api.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp-api.version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">jsp-api.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jstl.vesion</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">jstl.vesion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">taglibs-standard.version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">taglibs-standard.version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jackson.version</span>&gt;</span>2.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">jackson.version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slf4j.version</span>&gt;</span>1.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">slf4j.version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- mysql --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- MyBatis --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MyBatis 支持的分页插件（作用于 JSP，Vue 用不到） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.miemiedev<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-paginator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis.paginator.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- spring --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jms<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Spring AOP --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <br>    <span class="hljs-comment">&lt;!-- Spring 整合 MyBatis --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis.spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- servlet及jstl标签库依赖的JAR配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;servlet-api.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jsp-api.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jstl.vesion&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>taglibs-standard-spec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;taglibs-standard.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>taglibs-standard-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;taglibs-standard.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Jackson Json 处理工具包--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.json<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>20140107<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 文件异步上传 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--poi依赖--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--      &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--      &lt;artifactId&gt;poi&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--      &lt;version&gt;3.15&lt;/version&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/dependency&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--      &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--      &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--      &lt;scope&gt;test&lt;/scope&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/dependency&gt;--&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 识别所有配置文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/xxxx?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">xxxx</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">xxxx</span><br></code></pre></td></tr></table></figure><h2 id="SqlMapConfig-xml"><a href="#SqlMapConfig-xml" class="headerlink" title="SqlMapConfig.xml"></a>SqlMapConfig.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置日志输出语句，显示相应操作的 sql --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="applicationContext"><a href="#applicationContext" class="headerlink" title="applicationContext"></a>applicationContext</h2><h3 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="_mapper.xml"></a>_mapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 读取属性文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:property-placeholder</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置 SqlSessionFactoryBean --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置数据源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置 SqlMapConfig.xml 核心配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:SqlMapConfig.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注册实体类（逆向工程无需注册，包名会自动填充）</span><br><span class="hljs-comment">        &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.github.wataaaame.xxxx.pojo&quot;&gt;&lt;/property&gt;</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注册 mapper.xml --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.github.wataaaame.xxxx.mapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="service-xml"><a href="#service-xml" class="headerlink" title="_service.xml"></a>_service.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 添加包扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.github.wataaaame.xxxx.service.impl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 添加事务管理器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置数据源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置事务切面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*select*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*insert*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*delete*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*update*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;SUPPORTS&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置切入点 + 绑定 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.github.wataaaame.crm.service.impl.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;myCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="springMVC-xml"><a href="#springMVC-xml" class="headerlink" title="springMVC.xml"></a>springMVC.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 添加包扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.github.wataaaame.xxxx.web.controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--静态资源释放--&gt;</span><br>    <span class="hljs-comment">&lt;!--    &lt;mvc:default-servlet-handler /&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 添加注解驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 非 AJAX 请求需配置视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 配置文件上传解析器 id:必须是multipartResolver--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="hljs-comment">        &lt;property name=&quot;maxUploadSize&quot; value=&quot;#&#123;1024*1024*80&#125;&quot;/&gt;</span><br><span class="hljs-comment">        &lt;property name=&quot;defaultEncoding&quot; value=&quot;utf-8&quot;/&gt;</span><br><span class="hljs-comment">    &lt;/bean&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 欢迎页，默认进入index controller --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 添加中文编码过滤器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注册 SpringMVC 框架 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 监听器在服务器启动时注册 Spring 框架，启动 Spring 容器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext_*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="xxxxMapper-xml"><a href="#xxxxMapper-xml" class="headerlink" title="xxxxMapper.xml"></a>xxxxMapper.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">    <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;接口完全限定名&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h1><h2 id="MyBatis-逆向工程"><a href="#MyBatis-逆向工程" class="headerlink" title="MyBatis 逆向工程"></a>MyBatis 逆向工程</h2><h3 id="插件依赖"><a href="#插件依赖" class="headerlink" title="插件依赖"></a>插件依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MyBatis 逆向工程插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>generator.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driverLocation</span>=<span class="hljs-string">C:/vv/code/Java/Dev/jdbc/mysql-connector-java-5.1.23.jar</span><br><span class="hljs-attr">jdbc.driverClass</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">jdbc.connectionURL</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/xxxx</span><br><span class="hljs-attr">jdbc.userId</span>=<span class="hljs-string">xxxx</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">xxxx</span><br></code></pre></td></tr></table></figure><p>generatorConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入属性配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;generator.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--指定特定数据库的jdbc驱动jar包的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">classPathEntry</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverLocation&#125;&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;default&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- optional，旨在创建class时，对注释进行控制，false生成注释,true无注释 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressDate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressAllComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--jdbc的数据库连接 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span></span><br><span class="hljs-tag">                <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;$&#123;jdbc.connectionURL&#125;&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;$&#123;jdbc.userId&#125;&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br><br><br>        <span class="hljs-comment">&lt;!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br><br><br>        <span class="hljs-comment">&lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类</span><br><span class="hljs-comment">            targetPackage     指定生成的model生成所在的包名</span><br><span class="hljs-comment">            targetProject     指定在该项目下所在的路径|指定生成到的工程名称</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.github.wataaaame.crm.workbench.pojo&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;C:/vv/code/Java/Project/CRM/crm/src/main/java&quot;</span>&gt;</span><br><br>            <span class="hljs-comment">&lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否对model添加 构造函数 true添加，false不添加--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;constructorBased&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;immutable&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.github.wataaaame.crm.workbench.mapper&quot;</span></span><br><span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;C:/vv/code/Java/Project/CRM/crm/src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码</span><br><span class="hljs-comment">                type=&quot;ANNOTATEDMAPPER&quot;,生成Java Model 和基于注解的Mapper对象</span><br><span class="hljs-comment">                type=&quot;MIXEDMAPPER&quot;,生成基于注解的Java Model 和相应的Mapper对象</span><br><span class="hljs-comment">                type=&quot;XMLMAPPER&quot;,生成SQLMap XML文件和独立的Mapper接口</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.github.wataaaame.crm.workbench.mapper&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;C:/vv/code/Java/Project/CRM/crm/src/main/java&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 注册的表 --&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_user&quot; domainObjectName=&quot;User&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_clue&quot; domainObjectName=&quot;Clue&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_clue_activity_relation&quot; domainObjectName=&quot;ClueActivityRelation&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_clue_remark&quot; domainObjectName=&quot;ClueRemark&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_contacts&quot; domainObjectName=&quot;Contacts&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_contacts_activity_relation&quot; domainObjectName=&quot;ContactsActivityRelation&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_contacts_remark&quot; domainObjectName=&quot;ContactsRemark&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_customer&quot; domainObjectName=&quot;Customer&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_customer_remark&quot; domainObjectName=&quot;CustomerRemark&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_dic_type&quot; domainObjectName=&quot;DictionaryType&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_dic_value&quot; domainObjectName=&quot;DictionaryValue&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_activity&quot; domainObjectName=&quot;Activity&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_activity_remark&quot; domainObjectName=&quot;ActivityRemark&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_tran&quot; domainObjectName=&quot;Transaction&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_tran_history&quot; domainObjectName=&quot;TransactionHistory&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        &lt;table tableName=&quot;tbl_tran_remark&quot; domainObjectName=&quot;TransactionRemark&quot;</span><br><span class="hljs-comment">               enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;</span><br><span class="hljs-comment">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot;</span><br><span class="hljs-comment">               selectByExampleQueryId=&quot;false&quot;&gt;</span><br><span class="hljs-comment">        &lt;/table&gt;</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>配置：数据库连接信息；代码保存目录；表信息（需要的表解开注释）</li></ul><h1 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h1><h2 id="校验数字"><a href="#校验数字" class="headerlink" title="校验数字"></a>校验数字</h2><ol><li><p>数字：<code>^[0-9]*$</code></p></li><li><p>n位的数字：<code>^\d&#123;n&#125;$</code></p></li><li><p>至少n位的数字：<code>^\d&#123;n,&#125;$</code></p></li><li><p>m-n位的数字：<code>^\d&#123;m,n&#125;$</code></p></li><li><p>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p></li><li><p>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</code></p></li><li><p>带1-2位小数的正数或负数：<code>^(\-)?\d+(\.\d&#123;1,2&#125;)?$</code></p></li><li><p>正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code></p></li><li><p>有两位小数的正实数：<code>^[0-9]+(.[0-9]&#123;2&#125;)?$</code></p></li><li><p>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]&#123;1,3&#125;)?$</code></p></li><li><p>非零的正整数：<code>^[1-9]\d*$</code> 或 <code>^([1-9][0-9]*)&#123;1,3&#125;$</code> 或 <code>^\+?[1-9][0-9]*$</code></p></li><li><p>非零的负整数：<code>^\-[1-9][]0-9&quot;*$</code> 或 <code>^-[1-9]\d*$</code></p></li><li><p>非负整数：<code>^(([1-9]\d*)|0)$</code></p></li><li><p>非正整数：<code>^-[1-9]\d*|0$</code> 或 <code>^((-\d+)|(0+))$</code></p></li><li><p>非负浮点数：<code>^\d+(\.\d+)?$</code> 或 <code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></p></li><li><p>非正浮点数：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code> 或 <code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></p></li><li><p>正浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</code> 或 <code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></p></li><li><p>负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code> 或 <code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></p></li><li><p>浮点数：<code>^(-?\d+)(\.\d+)?$</code> 或 <code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></p></li></ol><h2 id="校验字符"><a href="#校验字符" class="headerlink" title="校验字符"></a>校验字符</h2><ol><li>汉字：<code>^[\u4e00-\u9fa5]&#123;0,&#125;$</code></li><li>英文和数字：<code>^[A-Za-z0-9]+$</code> 或 <code>^[A-Za-z0-9]&#123;4,40&#125;$</code></li><li>长度为3-20的所有字符：<code>^.&#123;3,20&#125;$</code></li><li>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></li><li>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></li><li>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></li><li>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></li><li>由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$</code> 或 <code>^\w&#123;3,20&#125;$</code></li><li>中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></li><li>中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code> 或 <code>^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</code></li><li>可以输入含有^%&amp;’,;&#x3D;?$&quot;等字符：<code>[^%&amp;&#39;,;=?$\x22]+</code></li><li>禁止输入含有<del>的字符：&#96;[^</del>\x22]+&#96;</li></ol><h2 id="特殊需求"><a href="#特殊需求" class="headerlink" title="特殊需求"></a>特殊需求</h2><ol><li><p>Email地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></p></li><li><p>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</code></p></li><li><p>InternetURL：<code>[a-zA-z]+://[^\s]*</code> 或 <code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></p></li><li><p>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</code></p></li><li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$</code></p></li><li><p>国内电话号码(0511-4405222、021-87888822)：<code>\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</code></p></li><li><p>身份证号(15位、18位数字)：<code>^\d&#123;15&#125;|\d&#123;18&#125;$</code></p></li><li><p>短身份证号码(数字、字母x结尾)：<code>^([0-9])&#123;7,18&#125;(x|X)?$</code> 或 <code>^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$</code></p></li><li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</code></p></li><li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w&#123;5,17&#125;$</code></p></li><li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</code></p></li><li><p>日期格式：<code>^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</code></p></li><li><p>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p></li><li><p>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p></li><li><p>钱的输入格式：</p><ol><li>我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></li><li>这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></li><li>一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></li><li>这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></li></ol><p>必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]&#123;2&#125;)?$</code></p><p>这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]&#123;1,2&#125;)?$</code></p><p>这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$</code></p><p>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$</code></p><blockquote><p>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p></blockquote></li><li><p>xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</code></p></li><li><p>中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></p></li><li><p>双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p></li><li><p>空白行的正则表达式：<code>\n\s*\r</code> (可以用来删除空白行)</p></li><li><p>HTML标记的正则表达式：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p></li><li><p>首尾空白字符的正则表达式：<code>^\s*|\s*$或(^\s*)|(\s*$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p></li><li><p>腾讯QQ号：<code>[1-9][0-9]&#123;4,&#125;</code> (腾讯QQ号从10000开始)</p></li><li><p>中国邮政编码：<code>[1-9]\d&#123;5&#125;(?!\d)</code> (中国邮政编码为6位数字)</p></li><li><p>IP地址：<code>\d+\.\d+\.\d+\.\d+</code>（提取IP地址时有用）</p></li><li><p>IP地址：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></p></li></ol><p>附：正则表达式语法大全：<a href="https://www.runoob.com/regexp/regexp-tutorial.html">https://www.runoob.com/regexp/regexp-tutorial.html</a></p><h1 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h1><h2 id="setHeader"><a href="#setHeader" class="headerlink" title="setHeader"></a>setHeader</h2><p>下载框</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=xxxx.xxxx&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="setContentType"><a href="#setContentType" class="headerlink" title="setContentType"></a>setContentType</h2><table><thead><tr><th align="left">文件扩展名</th><th align="left">Content-Type(Mime-Type)</th><th align="left">文件扩展名</th><th align="left">Content-Type(Mime-Type)</th></tr></thead><tbody><tr><td align="left">.*（ 二进制流，不知道下载文件类型）</td><td align="left">application&#x2F;octet-stream</td><td align="left">.tif</td><td align="left">image&#x2F;tiff</td></tr><tr><td align="left">.001</td><td align="left">application&#x2F;x-001</td><td align="left">.301</td><td align="left">application&#x2F;x-301</td></tr><tr><td align="left">.323</td><td align="left">text&#x2F;h323</td><td align="left">.906</td><td align="left">application&#x2F;x-906</td></tr><tr><td align="left">.907</td><td align="left">drawing&#x2F;907</td><td align="left">.a11</td><td align="left">application&#x2F;x-a11</td></tr><tr><td align="left">.acp</td><td align="left">audio&#x2F;x-mei-aac</td><td align="left">.ai</td><td align="left">application&#x2F;postscript</td></tr><tr><td align="left">.aif</td><td align="left">audio&#x2F;aiff</td><td align="left">.aifc</td><td align="left">audio&#x2F;aiff</td></tr><tr><td align="left">.aiff</td><td align="left">audio&#x2F;aiff</td><td align="left">.anv</td><td align="left">application&#x2F;x-anv</td></tr><tr><td align="left">.asa</td><td align="left">text&#x2F;asa</td><td align="left">.asf</td><td align="left">video&#x2F;x-ms-asf</td></tr><tr><td align="left">.asp</td><td align="left">text&#x2F;asp</td><td align="left">.asx</td><td align="left">video&#x2F;x-ms-asf</td></tr><tr><td align="left">.au</td><td align="left">audio&#x2F;basic</td><td align="left">.avi</td><td align="left">video&#x2F;avi</td></tr><tr><td align="left">.awf</td><td align="left">application&#x2F;vnd.adobe.workflow</td><td align="left">.biz</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.bmp</td><td align="left">application&#x2F;x-bmp</td><td align="left">.bot</td><td align="left">application&#x2F;x-bot</td></tr><tr><td align="left">.c4t</td><td align="left">application&#x2F;x-c4t</td><td align="left">.c90</td><td align="left">application&#x2F;x-c90</td></tr><tr><td align="left">.cal</td><td align="left">application&#x2F;x-cals</td><td align="left">.cat</td><td align="left">application&#x2F;vnd.ms-pki.seccat</td></tr><tr><td align="left">.cdf</td><td align="left">application&#x2F;x-netcdf</td><td align="left">.cdr</td><td align="left">application&#x2F;x-cdr</td></tr><tr><td align="left">.cel</td><td align="left">application&#x2F;x-cel</td><td align="left">.cer</td><td align="left">application&#x2F;x-x509-ca-cert</td></tr><tr><td align="left">.cg4</td><td align="left">application&#x2F;x-g4</td><td align="left">.cgm</td><td align="left">application&#x2F;x-cgm</td></tr><tr><td align="left">.cit</td><td align="left">application&#x2F;x-cit</td><td align="left">.class</td><td align="left">java&#x2F;*</td></tr><tr><td align="left">.cml</td><td align="left">text&#x2F;xml</td><td align="left">.cmp</td><td align="left">application&#x2F;x-cmp</td></tr><tr><td align="left">.cmx</td><td align="left">application&#x2F;x-cmx</td><td align="left">.cot</td><td align="left">application&#x2F;x-cot</td></tr><tr><td align="left">.crl</td><td align="left">application&#x2F;pkix-crl</td><td align="left">.crt</td><td align="left">application&#x2F;x-x509-ca-cert</td></tr><tr><td align="left">.csi</td><td align="left">application&#x2F;x-csi</td><td align="left">.css</td><td align="left">text&#x2F;css</td></tr><tr><td align="left">.cut</td><td align="left">application&#x2F;x-cut</td><td align="left">.dbf</td><td align="left">application&#x2F;x-dbf</td></tr><tr><td align="left">.dbm</td><td align="left">application&#x2F;x-dbm</td><td align="left">.dbx</td><td align="left">application&#x2F;x-dbx</td></tr><tr><td align="left">.dcd</td><td align="left">text&#x2F;xml</td><td align="left">.dcx</td><td align="left">application&#x2F;x-dcx</td></tr><tr><td align="left">.der</td><td align="left">application&#x2F;x-x509-ca-cert</td><td align="left">.dgn</td><td align="left">application&#x2F;x-dgn</td></tr><tr><td align="left">.dib</td><td align="left">application&#x2F;x-dib</td><td align="left">.dll</td><td align="left">application&#x2F;x-msdownload</td></tr><tr><td align="left">.doc</td><td align="left">application&#x2F;msword</td><td align="left">.dot</td><td align="left">application&#x2F;msword</td></tr><tr><td align="left">.drw</td><td align="left">application&#x2F;x-drw</td><td align="left">.dtd</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.dwf</td><td align="left">Model&#x2F;vnd.dwf</td><td align="left">.dwf</td><td align="left">application&#x2F;x-dwf</td></tr><tr><td align="left">.dwg</td><td align="left">application&#x2F;x-dwg</td><td align="left">.dxb</td><td align="left">application&#x2F;x-dxb</td></tr><tr><td align="left">.dxf</td><td align="left">application&#x2F;x-dxf</td><td align="left">.edn</td><td align="left">application&#x2F;vnd.adobe.edn</td></tr><tr><td align="left">.emf</td><td align="left">application&#x2F;x-emf</td><td align="left">.eml</td><td align="left">message&#x2F;rfc822</td></tr><tr><td align="left">.ent</td><td align="left">text&#x2F;xml</td><td align="left">.epi</td><td align="left">application&#x2F;x-epi</td></tr><tr><td align="left">.eps</td><td align="left">application&#x2F;x-ps</td><td align="left">.eps</td><td align="left">application&#x2F;postscript</td></tr><tr><td align="left">.etd</td><td align="left">application&#x2F;x-ebx</td><td align="left">.exe</td><td align="left">application&#x2F;x-msdownload</td></tr><tr><td align="left">.fax</td><td align="left">image&#x2F;fax</td><td align="left">.fdf</td><td align="left">application&#x2F;vnd.fdf</td></tr><tr><td align="left">.fif</td><td align="left">application&#x2F;fractals</td><td align="left">.fo</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.frm</td><td align="left">application&#x2F;x-frm</td><td align="left">.g4</td><td align="left">application&#x2F;x-g4</td></tr><tr><td align="left">.gbr</td><td align="left">application&#x2F;x-gbr</td><td align="left">.</td><td align="left">application&#x2F;x-</td></tr><tr><td align="left">.gif</td><td align="left">image&#x2F;gif</td><td align="left">.gl2</td><td align="left">application&#x2F;x-gl2</td></tr><tr><td align="left">.gp4</td><td align="left">application&#x2F;x-gp4</td><td align="left">.hgl</td><td align="left">application&#x2F;x-hgl</td></tr><tr><td align="left">.hmr</td><td align="left">application&#x2F;x-hmr</td><td align="left">.hpg</td><td align="left">application&#x2F;x-hpgl</td></tr><tr><td align="left">.hpl</td><td align="left">application&#x2F;x-hpl</td><td align="left">.hqx</td><td align="left">application&#x2F;mac-binhex40</td></tr><tr><td align="left">.hrf</td><td align="left">application&#x2F;x-hrf</td><td align="left">.hta</td><td align="left">application&#x2F;hta</td></tr><tr><td align="left">.htc</td><td align="left">text&#x2F;x-component</td><td align="left">.htm</td><td align="left">text&#x2F;html</td></tr><tr><td align="left">.html</td><td align="left">text&#x2F;html</td><td align="left">.htt</td><td align="left">text&#x2F;webviewhtml</td></tr><tr><td align="left">.htx</td><td align="left">text&#x2F;html</td><td align="left">.icb</td><td align="left">application&#x2F;x-icb</td></tr><tr><td align="left">.ico</td><td align="left">image&#x2F;x-icon</td><td align="left">.ico</td><td align="left">application&#x2F;x-ico</td></tr><tr><td align="left">.iff</td><td align="left">application&#x2F;x-iff</td><td align="left">.ig4</td><td align="left">application&#x2F;x-g4</td></tr><tr><td align="left">.igs</td><td align="left">application&#x2F;x-igs</td><td align="left">.iii</td><td align="left">application&#x2F;x-iphone</td></tr><tr><td align="left">.img</td><td align="left">application&#x2F;x-img</td><td align="left">.ins</td><td align="left">application&#x2F;x-internet-signup</td></tr><tr><td align="left">.isp</td><td align="left">application&#x2F;x-internet-signup</td><td align="left">.IVF</td><td align="left">video&#x2F;x-ivf</td></tr><tr><td align="left">.java</td><td align="left">java&#x2F;*</td><td align="left">.jfif</td><td align="left">image&#x2F;jpeg</td></tr><tr><td align="left">.jpe</td><td align="left">image&#x2F;jpeg</td><td align="left">.jpe</td><td align="left">application&#x2F;x-jpe</td></tr><tr><td align="left">.jpeg</td><td align="left">image&#x2F;jpeg</td><td align="left">.jpg</td><td align="left">image&#x2F;jpeg</td></tr><tr><td align="left">.jpg</td><td align="left">application&#x2F;x-jpg</td><td align="left">.js</td><td align="left">application&#x2F;x-javascript</td></tr><tr><td align="left">.jsp</td><td align="left">text&#x2F;html</td><td align="left">.la1</td><td align="left">audio&#x2F;x-liquid-file</td></tr><tr><td align="left">.lar</td><td align="left">application&#x2F;x-laplayer-reg</td><td align="left">.latex</td><td align="left">application&#x2F;x-latex</td></tr><tr><td align="left">.lavs</td><td align="left">audio&#x2F;x-liquid-secure</td><td align="left">.lbm</td><td align="left">application&#x2F;x-lbm</td></tr><tr><td align="left">.lmsff</td><td align="left">audio&#x2F;x-la-lms</td><td align="left">.ls</td><td align="left">application&#x2F;x-javascript</td></tr><tr><td align="left">.ltr</td><td align="left">application&#x2F;x-ltr</td><td align="left">.m1v</td><td align="left">video&#x2F;x-mpeg</td></tr><tr><td align="left">.m2v</td><td align="left">video&#x2F;x-mpeg</td><td align="left">.m3u</td><td align="left">audio&#x2F;mpegurl</td></tr><tr><td align="left">.m4e</td><td align="left">video&#x2F;mpeg4</td><td align="left">.mac</td><td align="left">application&#x2F;x-mac</td></tr><tr><td align="left">.man</td><td align="left">application&#x2F;x-troff-man</td><td align="left">.math</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.mdb</td><td align="left">application&#x2F;msaccess</td><td align="left">.mdb</td><td align="left">application&#x2F;x-mdb</td></tr><tr><td align="left">.mfp</td><td align="left">application&#x2F;x-shockwave-flash</td><td align="left">.mht</td><td align="left">message&#x2F;rfc822</td></tr><tr><td align="left">.mhtml</td><td align="left">message&#x2F;rfc822</td><td align="left">.mi</td><td align="left">application&#x2F;x-mi</td></tr><tr><td align="left">.mid</td><td align="left">audio&#x2F;mid</td><td align="left">.midi</td><td align="left">audio&#x2F;mid</td></tr><tr><td align="left">.mil</td><td align="left">application&#x2F;x-mil</td><td align="left">.mml</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.mnd</td><td align="left">audio&#x2F;x-musicnet-download</td><td align="left">.mns</td><td align="left">audio&#x2F;x-musicnet-stream</td></tr><tr><td align="left">.mocha</td><td align="left">application&#x2F;x-javascript</td><td align="left">.movie</td><td align="left">video&#x2F;x-sgi-movie</td></tr><tr><td align="left">.mp1</td><td align="left">audio&#x2F;mp1</td><td align="left">.mp2</td><td align="left">audio&#x2F;mp2</td></tr><tr><td align="left">.mp2v</td><td align="left">video&#x2F;mpeg</td><td align="left">.mp3</td><td align="left">audio&#x2F;mp3</td></tr><tr><td align="left">.mp4</td><td align="left">video&#x2F;mpeg4</td><td align="left">.mpa</td><td align="left">video&#x2F;x-mpg</td></tr><tr><td align="left">.mpd</td><td align="left">application&#x2F;vnd.ms-project</td><td align="left">.mpe</td><td align="left">video&#x2F;x-mpeg</td></tr><tr><td align="left">.mpeg</td><td align="left">video&#x2F;mpg</td><td align="left">.mpg</td><td align="left">video&#x2F;mpg</td></tr><tr><td align="left">.mpga</td><td align="left">audio&#x2F;rn-mpeg</td><td align="left">.mpp</td><td align="left">application&#x2F;vnd.ms-project</td></tr><tr><td align="left">.mps</td><td align="left">video&#x2F;x-mpeg</td><td align="left">.mpt</td><td align="left">application&#x2F;vnd.ms-project</td></tr><tr><td align="left">.mpv</td><td align="left">video&#x2F;mpg</td><td align="left">.mpv2</td><td align="left">video&#x2F;mpeg</td></tr><tr><td align="left">.mpw</td><td align="left">application&#x2F;vnd.ms-project</td><td align="left">.mpx</td><td align="left">application&#x2F;vnd.ms-project</td></tr><tr><td align="left">.mtx</td><td align="left">text&#x2F;xml</td><td align="left">.mxp</td><td align="left">application&#x2F;x-mmxp</td></tr><tr><td align="left">.net</td><td align="left">image&#x2F;pnetvue</td><td align="left">.nrf</td><td align="left">application&#x2F;x-nrf</td></tr><tr><td align="left">.nws</td><td align="left">message&#x2F;rfc822</td><td align="left">.odc</td><td align="left">text&#x2F;x-ms-odc</td></tr><tr><td align="left">.out</td><td align="left">application&#x2F;x-out</td><td align="left">.p10</td><td align="left">application&#x2F;pkcs10</td></tr><tr><td align="left">.p12</td><td align="left">application&#x2F;x-pkcs12</td><td align="left">.p7b</td><td align="left">application&#x2F;x-pkcs7-certificates</td></tr><tr><td align="left">.p7c</td><td align="left">application&#x2F;pkcs7-mime</td><td align="left">.p7m</td><td align="left">application&#x2F;pkcs7-mime</td></tr><tr><td align="left">.p7r</td><td align="left">application&#x2F;x-pkcs7-certreqresp</td><td align="left">.p7s</td><td align="left">application&#x2F;pkcs7-signature</td></tr><tr><td align="left">.pc5</td><td align="left">application&#x2F;x-pc5</td><td align="left">.pci</td><td align="left">application&#x2F;x-pci</td></tr><tr><td align="left">.pcl</td><td align="left">application&#x2F;x-pcl</td><td align="left">.pcx</td><td align="left">application&#x2F;x-pcx</td></tr><tr><td align="left">.pdf</td><td align="left">application&#x2F;pdf</td><td align="left">.pdf</td><td align="left">application&#x2F;pdf</td></tr><tr><td align="left">.pdx</td><td align="left">application&#x2F;vnd.adobe.pdx</td><td align="left">.pfx</td><td align="left">application&#x2F;x-pkcs12</td></tr><tr><td align="left">.pgl</td><td align="left">application&#x2F;x-pgl</td><td align="left">.pic</td><td align="left">application&#x2F;x-pic</td></tr><tr><td align="left">.pko</td><td align="left">application&#x2F;vnd.ms-pki.pko</td><td align="left">.pl</td><td align="left">application&#x2F;x-perl</td></tr><tr><td align="left">.plg</td><td align="left">text&#x2F;html</td><td align="left">.pls</td><td align="left">audio&#x2F;scpls</td></tr><tr><td align="left">.plt</td><td align="left">application&#x2F;x-plt</td><td align="left">.png</td><td align="left">image&#x2F;png</td></tr><tr><td align="left">.png</td><td align="left">application&#x2F;x-png</td><td align="left">.pot</td><td align="left">application&#x2F;vnd.ms-powerpoint</td></tr><tr><td align="left">.ppa</td><td align="left">application&#x2F;vnd.ms-powerpoint</td><td align="left">.ppm</td><td align="left">application&#x2F;x-ppm</td></tr><tr><td align="left">.pps</td><td align="left">application&#x2F;vnd.ms-powerpoint</td><td align="left">.ppt</td><td align="left">application&#x2F;vnd.ms-powerpoint</td></tr><tr><td align="left">.ppt</td><td align="left">application&#x2F;x-ppt</td><td align="left">.pr</td><td align="left">application&#x2F;x-pr</td></tr><tr><td align="left">.prf</td><td align="left">application&#x2F;pics-rules</td><td align="left">.prn</td><td align="left">application&#x2F;x-prn</td></tr><tr><td align="left">.prt</td><td align="left">application&#x2F;x-prt</td><td align="left">.ps</td><td align="left">application&#x2F;x-ps</td></tr><tr><td align="left">.ps</td><td align="left">application&#x2F;postscript</td><td align="left">.ptn</td><td align="left">application&#x2F;x-ptn</td></tr><tr><td align="left">.pwz</td><td align="left">application&#x2F;vnd.ms-powerpoint</td><td align="left">.r3t</td><td align="left">text&#x2F;vnd.rn-realtext3d</td></tr><tr><td align="left">.ra</td><td align="left">audio&#x2F;vnd.rn-realaudio</td><td align="left">.ram</td><td align="left">audio&#x2F;x-pn-realaudio</td></tr><tr><td align="left">.ras</td><td align="left">application&#x2F;x-ras</td><td align="left">.rat</td><td align="left">application&#x2F;rat-file</td></tr><tr><td align="left">.rdf</td><td align="left">text&#x2F;xml</td><td align="left">.rec</td><td align="left">application&#x2F;vnd.rn-recording</td></tr><tr><td align="left">.red</td><td align="left">application&#x2F;x-red</td><td align="left">.rgb</td><td align="left">application&#x2F;x-rgb</td></tr><tr><td align="left">.rjs</td><td align="left">application&#x2F;vnd.rn-realsystem-rjs</td><td align="left">.rjt</td><td align="left">application&#x2F;vnd.rn-realsystem-rjt</td></tr><tr><td align="left">.rlc</td><td align="left">application&#x2F;x-rlc</td><td align="left">.rle</td><td align="left">application&#x2F;x-rle</td></tr><tr><td align="left">.rm</td><td align="left">application&#x2F;vnd.rn-realmedia</td><td align="left">.rmf</td><td align="left">application&#x2F;vnd.adobe.rmf</td></tr><tr><td align="left">.rmi</td><td align="left">audio&#x2F;mid</td><td align="left">.rmj</td><td align="left">application&#x2F;vnd.rn-realsystem-rmj</td></tr><tr><td align="left">.rmm</td><td align="left">audio&#x2F;x-pn-realaudio</td><td align="left">.rmp</td><td align="left">application&#x2F;vnd.rn-rn_music_package</td></tr><tr><td align="left">.rms</td><td align="left">application&#x2F;vnd.rn-realmedia-secure</td><td align="left">.rmvb</td><td align="left">application&#x2F;vnd.rn-realmedia-vbr</td></tr><tr><td align="left">.rmx</td><td align="left">application&#x2F;vnd.rn-realsystem-rmx</td><td align="left">.rnx</td><td align="left">application&#x2F;vnd.rn-realplayer</td></tr><tr><td align="left">.rp</td><td align="left">image&#x2F;vnd.rn-realpix</td><td align="left">.rpm</td><td align="left">audio&#x2F;x-pn-realaudio-plugin</td></tr><tr><td align="left">.rsml</td><td align="left">application&#x2F;vnd.rn-rsml</td><td align="left">.rt</td><td align="left">text&#x2F;vnd.rn-realtext</td></tr><tr><td align="left">.rtf</td><td align="left">application&#x2F;msword</td><td align="left">.rtf</td><td align="left">application&#x2F;x-rtf</td></tr><tr><td align="left">.rv</td><td align="left">video&#x2F;vnd.rn-realvideo</td><td align="left">.sam</td><td align="left">application&#x2F;x-sam</td></tr><tr><td align="left">.sat</td><td align="left">application&#x2F;x-sat</td><td align="left">.sdp</td><td align="left">application&#x2F;sdp</td></tr><tr><td align="left">.sdw</td><td align="left">application&#x2F;x-sdw</td><td align="left">.sit</td><td align="left">application&#x2F;x-stuffit</td></tr><tr><td align="left">.slb</td><td align="left">application&#x2F;x-slb</td><td align="left">.sld</td><td align="left">application&#x2F;x-sld</td></tr><tr><td align="left">.slk</td><td align="left">drawing&#x2F;x-slk</td><td align="left">.smi</td><td align="left">application&#x2F;smil</td></tr><tr><td align="left">.smil</td><td align="left">application&#x2F;smil</td><td align="left">.smk</td><td align="left">application&#x2F;x-smk</td></tr><tr><td align="left">.snd</td><td align="left">audio&#x2F;basic</td><td align="left">.sol</td><td align="left">text&#x2F;plain</td></tr><tr><td align="left">.sor</td><td align="left">text&#x2F;plain</td><td align="left">.spc</td><td align="left">application&#x2F;x-pkcs7-certificates</td></tr><tr><td align="left">.spl</td><td align="left">application&#x2F;futuresplash</td><td align="left">.spp</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.ssm</td><td align="left">application&#x2F;streamingmedia</td><td align="left">.sst</td><td align="left">application&#x2F;vnd.ms-pki.certstore</td></tr><tr><td align="left">.stl</td><td align="left">application&#x2F;vnd.ms-pki.stl</td><td align="left">.stm</td><td align="left">text&#x2F;html</td></tr><tr><td align="left">.sty</td><td align="left">application&#x2F;x-sty</td><td align="left">.svg</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.swf</td><td align="left">application&#x2F;x-shockwave-flash</td><td align="left">.tdf</td><td align="left">application&#x2F;x-tdf</td></tr><tr><td align="left">.tg4</td><td align="left">application&#x2F;x-tg4</td><td align="left">.tga</td><td align="left">application&#x2F;x-tga</td></tr><tr><td align="left">.tif</td><td align="left">image&#x2F;tiff</td><td align="left">.tif</td><td align="left">application&#x2F;x-tif</td></tr><tr><td align="left">.tiff</td><td align="left">image&#x2F;tiff</td><td align="left">.tld</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.top</td><td align="left">drawing&#x2F;x-top</td><td align="left">.torrent</td><td align="left">application&#x2F;x-bittorrent</td></tr><tr><td align="left">.tsd</td><td align="left">text&#x2F;xml</td><td align="left">.txt</td><td align="left">text&#x2F;plain</td></tr><tr><td align="left">.uin</td><td align="left">application&#x2F;x-icq</td><td align="left">.uls</td><td align="left">text&#x2F;iuls</td></tr><tr><td align="left">.vcf</td><td align="left">text&#x2F;x-vcard</td><td align="left">.vda</td><td align="left">application&#x2F;x-vda</td></tr><tr><td align="left">.vdx</td><td align="left">application&#x2F;vnd.visio</td><td align="left">.vml</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.vpg</td><td align="left">application&#x2F;x-vpeg005</td><td align="left">.vsd</td><td align="left">application&#x2F;vnd.visio</td></tr><tr><td align="left">.vsd</td><td align="left">application&#x2F;x-vsd</td><td align="left">.vss</td><td align="left">application&#x2F;vnd.visio</td></tr><tr><td align="left">.vst</td><td align="left">application&#x2F;vnd.visio</td><td align="left">.vst</td><td align="left">application&#x2F;x-vst</td></tr><tr><td align="left">.vsw</td><td align="left">application&#x2F;vnd.visio</td><td align="left">.vsx</td><td align="left">application&#x2F;vnd.visio</td></tr><tr><td align="left">.vtx</td><td align="left">application&#x2F;vnd.visio</td><td align="left">.vxml</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.wav</td><td align="left">audio&#x2F;wav</td><td align="left">.wax</td><td align="left">audio&#x2F;x-ms-wax</td></tr><tr><td align="left">.wb1</td><td align="left">application&#x2F;x-wb1</td><td align="left">.wb2</td><td align="left">application&#x2F;x-wb2</td></tr><tr><td align="left">.wb3</td><td align="left">application&#x2F;x-wb3</td><td align="left">.wbmp</td><td align="left">image&#x2F;vnd.wap.wbmp</td></tr><tr><td align="left">.wiz</td><td align="left">application&#x2F;msword</td><td align="left">.wk3</td><td align="left">application&#x2F;x-wk3</td></tr><tr><td align="left">.wk4</td><td align="left">application&#x2F;x-wk4</td><td align="left">.wkq</td><td align="left">application&#x2F;x-wkq</td></tr><tr><td align="left">.wks</td><td align="left">application&#x2F;x-wks</td><td align="left">.wm</td><td align="left">video&#x2F;x-ms-wm</td></tr><tr><td align="left">.wma</td><td align="left">audio&#x2F;x-ms-wma</td><td align="left">.wmd</td><td align="left">application&#x2F;x-ms-wmd</td></tr><tr><td align="left">.wmf</td><td align="left">application&#x2F;x-wmf</td><td align="left">.wml</td><td align="left">text&#x2F;vnd.wap.wml</td></tr><tr><td align="left">.wmv</td><td align="left">video&#x2F;x-ms-wmv</td><td align="left">.wmx</td><td align="left">video&#x2F;x-ms-wmx</td></tr><tr><td align="left">.wmz</td><td align="left">application&#x2F;x-ms-wmz</td><td align="left">.wp6</td><td align="left">application&#x2F;x-wp6</td></tr><tr><td align="left">.wpd</td><td align="left">application&#x2F;x-wpd</td><td align="left">.wpg</td><td align="left">application&#x2F;x-wpg</td></tr><tr><td align="left">.wpl</td><td align="left">application&#x2F;vnd.ms-wpl</td><td align="left">.wq1</td><td align="left">application&#x2F;x-wq1</td></tr><tr><td align="left">.wr1</td><td align="left">application&#x2F;x-wr1</td><td align="left">.wri</td><td align="left">application&#x2F;x-wri</td></tr><tr><td align="left">.wrk</td><td align="left">application&#x2F;x-wrk</td><td align="left">.ws</td><td align="left">application&#x2F;x-ws</td></tr><tr><td align="left">.ws2</td><td align="left">application&#x2F;x-ws</td><td align="left">.wsc</td><td align="left">text&#x2F;scriptlet</td></tr><tr><td align="left">.wsdl</td><td align="left">text&#x2F;xml</td><td align="left">.wvx</td><td align="left">video&#x2F;x-ms-wvx</td></tr><tr><td align="left">.xdp</td><td align="left">application&#x2F;vnd.adobe.xdp</td><td align="left">.xdr</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.xfd</td><td align="left">application&#x2F;vnd.adobe.xfd</td><td align="left">.xfdf</td><td align="left">application&#x2F;vnd.adobe.xfdf</td></tr><tr><td align="left">.xhtml</td><td align="left">text&#x2F;html</td><td align="left">.xls</td><td align="left">application&#x2F;vnd.ms-excel</td></tr><tr><td align="left">.xls</td><td align="left">application&#x2F;x-xls</td><td align="left">.xlw</td><td align="left">application&#x2F;x-xlw</td></tr><tr><td align="left">.xml</td><td align="left">text&#x2F;xml</td><td align="left">.xpl</td><td align="left">audio&#x2F;scpls</td></tr><tr><td align="left">.xq</td><td align="left">text&#x2F;xml</td><td align="left">.xql</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.xquery</td><td align="left">text&#x2F;xml</td><td align="left">.xsd</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.xsl</td><td align="left">text&#x2F;xml</td><td align="left">.xslt</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.xwd</td><td align="left">application&#x2F;x-xwd</td><td align="left">.x_b</td><td align="left">application&#x2F;x-x_b</td></tr><tr><td align="left">.sis</td><td align="left">application&#x2F;vnd.symbian.install</td><td align="left">.sisx</td><td align="left">application&#x2F;vnd.symbian.install</td></tr><tr><td align="left">.x_t</td><td align="left">application&#x2F;x-x_t</td><td align="left">.ipa</td><td align="left">application&#x2F;vnd.iphone</td></tr><tr><td align="left">.apk</td><td align="left">application&#x2F;vnd.android.package-archive</td><td align="left">.xap</td><td align="left">application&#x2F;x-silverlight-app</td></tr></tbody></table><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myFile&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br><span class="hljs-comment">// 参数名需与 Controller 层形参名一致</span><br>formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>, file);<br><br><span class="hljs-comment">// 发送请求</span><br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">data</span>: formData<br>    <span class="hljs-attr">processData</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">contentType</span>: <span class="hljs-literal">false</span><br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Configuration</tag>
      
      <tag>Appendix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM - Note04 SpringMVC</title>
    <link href="/2022/09/01/SSM%20-%20Note04%20SpringMVC/"/>
    <url>/2022/09/01/SSM%20-%20Note04%20SpringMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>基于 MVC 开发模式的框架，用来优化控制器，是 Spring 家族的一员，也具备 IOC 与 AOP</p><p>特点：</p><ol><li>轻量级，基于 MVN 框架</li><li>易于上手、容易理解、功能强大</li><li>具备 IOC 与 AOP</li><li>完全基于注解开发</li></ol><p><img src="/images/image-ssm/note04-01-SpringMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.PNG" alt="SpringMVC执行流程"></p><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>一种开发模式，是模型视图控制器的简称，所有的 web 应用都是基于 MVC 开发</p><ul><li>M：模型层，包含实体类、业务逻辑层、数据访问层</li><li>V：视图层，如 html、javascript、vue 等，用来显现数据</li><li>C：控制器，用来接收客户端请求，返回响应到客户端的组件，如 Servlet</li></ul><p><img src="/images/image-ssm/note04-02-SSM%E6%A1%86%E6%9E%B6%E4%BC%98%E5%8C%96%E6%96%B9%E5%90%91.PNG" alt="SSM框架优化方向"></p><h1 id="注解式开发"><a href="#注解式开发" class="headerlink" title="注解式开发"></a>注解式开发</h1><ol><li><p>新建项目，选择 webapp 模板</p></li><li><p>修改目录，添加缺失的 test、java、resources（两套），并修改目录属性</p></li><li><p>修改 pom.xml 文件，添加 SpringMVC 依赖，添加 Servlet 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SpringMVC 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Servlet 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 springmvc.xml 配置文件，指定包扫描，添加视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 添加包扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;github.wataaaame.controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 添加视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/admin/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Project Structure 中，点击项目中的 Web，删除旧的 web.xml，点击应用，新建 web.xml</p><p>否则 jsp 中 EL 表达式失效</p></li><li><p>在 web.xml 文件中注册 springmvc 框架<strong>（所有 web 请求都是基于 Servlet 的，开发控制器只是一个普通的类）</strong></p><p>于是 web 请求执行流程通过<strong>核心处理器</strong>完成流转</p><p><code>index.jsp &lt;--&gt; DispatcherServlet &lt;--&gt; SpringMVC（普通方法）</code></p><ul><li>DispatcherServlet 要在 web.xml 文件中注册才可用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注册 SpringMVC 框架 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 初始化 springmvc.xml 到配置文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.action<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>webapp 目录新建 <code>admin - main.jsp</code>，删除并添加新 index.jsp 页面，发送请求给服务器</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;index&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;This is index.jsp&lt;/h1&gt;<br>    &lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/demo.action&quot;</span>&gt;&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>开发控制器（Servlet）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoAction</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 以前的 Servlet 规范</span><br><span class="hljs-comment">     * protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;&#125;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * action 中所有的功能实现都是由方法来完成的</span><br><span class="hljs-comment">     * action 方法规范：</span><br><span class="hljs-comment">     *      1. 访问权限是 public</span><br><span class="hljs-comment">     *      2. 方法返回值任意</span><br><span class="hljs-comment">     *      3. 方法名称任意</span><br><span class="hljs-comment">     *      4. 方法可以没有参数，如果有可以是任意类型</span><br><span class="hljs-comment">     *      5. 要使用 <span class="hljs-doctag">@RequestMapping</span> 注解来声明一个访问的路径（名称）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/demo&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务器被访问&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;  <span class="hljs-comment">// 可以直接跳转到 /admin/main.jsp 上</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>.action 供 DispatcherServlet 核心处理器解析</li></ul></li><li><p>添加 tomcat 进行功能测试</p></li></ol><h2 id="RequestMapping-详解"><a href="#RequestMapping-详解" class="headerlink" title="@RequestMapping 详解"></a>@RequestMapping 详解</h2><p>此注解用来映射服务器访问路径</p><ol><li><p>可加在方法上，为此方法注册一个可以访问的名称（路径）</p></li><li><p>可加在类上，提供一个虚拟路径，以<strong>区分不同类中的相同路径</strong>，如：@RequestMapping(“&#x2F;war&#x2F;demo”)</p></li><li><p>区分 GET 请求和 POST 请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReqAction</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/req&quot;, method = RequestMethod.GET)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">req</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;I&#x27;m do for GET&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/req&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reqp</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;I&#x27;m do for POST&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="五种数据提交方式"><a href="#五种数据提交方式" class="headerlink" title="五种数据提交方式"></a>五种数据提交方式</h2><p><img src="/images/image-ssm/note04-03-SpringMVC%E4%BC%98%E5%8C%96%E5%86%85%E5%AE%B9.PNG" alt="SpringMVC优化内容"></p><ol><li><p>散提交数据</p><p>只需形参类型与形参名同提交的一致即可</p><p>jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;h1&gt;单个数据提交&lt;/h1&gt;<br>&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/one.action&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    name: &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;<br>    &lt;br&gt;<br>    age: &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;age&quot;</span>&gt;<br>    &lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSubmitAction</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/one&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">one</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;name=&quot;</span>+name+<span class="hljs-string">&quot;, age=&quot;</span>+(age+<span class="hljs-number">100</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对象封装提交数据</p><p>在提交请求中，保证请求参数的名称与实体类中成员变量的名称一致，则可以自动创建并提交数据，自动类型转换，自动封装数据到对象中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/two&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">two</span><span class="hljs-params">(User user)</span> &#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>动态占位符提交</p><p>仅限于超链接或地址栏提交数据，<code>.action</code> 前，一杠一值，用一杠一大括号取（内填 name），使用 <code>@PathVariable</code> 注解解析（支持解析成不同名字）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// &lt;h1&gt;3. 动态占位符提交&lt;/h1&gt;</span><br><span class="hljs-comment">// &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/three/vv/12.action&quot;&gt;go with vv/12&lt;/a&gt;</span><br><br><span class="hljs-meta">@RequestMapping(&quot;/three/&#123;name&#125;/&#123;uage&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">three</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable(&quot;name&quot;)</span></span><br><span class="hljs-params">        String name,</span><br><span class="hljs-params">        <span class="hljs-meta">@PathVariable(&quot;uage&quot;)</span></span><br><span class="hljs-params">        <span class="hljs-type">int</span> age)</span> &#123;<br>    System.out.println(name + <span class="hljs-string">&quot; &quot;</span> + age);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>映射名称不一致</strong></p><p>提交请求参数与 action 方法的形参名不一致，使用注解 @RequestParam 来解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/four&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">four</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(&quot;name&quot;)</span></span><br><span class="hljs-params">        String uname,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span></span><br><span class="hljs-params">        <span class="hljs-type">int</span> uage</span><br><span class="hljs-params">)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + uname + <span class="hljs-string">&quot;, &quot;</span> + <span class="hljs-string">&quot;age = &quot;</span> + uage);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>手工提取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/five&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">five</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> Integer.parseInt(request.getParameter(<span class="hljs-string">&quot;age&quot;</span>));<br>    System.out.println(name + <span class="hljs-string">&quot; &quot;</span> + age);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="请求参数中文乱码"><a href="#请求参数中文乱码" class="headerlink" title="请求参数中文乱码"></a>请求参数中文乱码</h2><p>配置过滤器，最好放在所有过滤器之前</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encode<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encode<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="处理方法的返回值"><a href="#处理方法的返回值" class="headerlink" title="处理方法的返回值"></a>处理方法的返回值</h2><ol><li>String：返回客户端资源地址（自动拼接前缀后缀），支持屏蔽自动拼接，从而返回指定路径</li><li>Object：返回 Json 格式对象，使用 Jackson 工具进行转换（需添加依赖），自动将对象或集合转为 Json，一般用于 AJAX 请求</li><li>void：无返回值，一般用于 AJAX 请求</li><li>8 种基本数据类型：用于 AJAX 请求</li><li><em>ModelAndView</em>：返回数据和视图对象</li></ol><h3 id="AJAX-请求示例"><a href="#AJAX-请求示例" class="headerlink" title="AJAX 请求示例"></a>AJAX 请求示例</h3><p>完成 AJAX 请求访问服务器，返回学生集合：</p><ol><li><p>添加 Jackson 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加 Jackson 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>springmvc.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加包扫描 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;github.wataaaame.controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 不用添加视图解析器，处理的 AJAX 直接原路返回 --&gt;</span><br><span class="hljs-comment">&lt;!-- 必须添加注解驱动，专门用来处理 AJAX 请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>&lt;mvc:annotationdriven/&gt;</code>，用来解析 @ResponseBody 注解</li></ul></li><li><p>在 webapp 目录下新建 js 目录，添加 jQuery 函数库</p></li><li><p>在 index.jsp 页面导入函数库</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;AJAX&lt;/title&gt;<br>    &lt;script src=<span class="hljs-string">&quot;js/jquery-3.6.0.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    function <span class="hljs-title function_">showStu</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 使用 jQuery 封装 AJAX 请求</span><br>        $.ajax(&#123;<br>            url: <span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/list.action&quot;</span>,<br>            type: <span class="hljs-string">&quot;GET&quot;</span>,<br>            dataType: <span class="hljs-string">&quot;json&quot;</span>,<br>            success: function (stuList) &#123;<br>                <span class="hljs-type">var</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                $.each(stuList, function (i, stu) &#123;<br>                    html += stu.name + <span class="hljs-string">&quot;, &quot;</span> + stu.age + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>                &#125;)<br>                <span class="hljs-comment">// 回显数据</span><br>                $(<span class="hljs-string">&quot;#mydiv&quot;</span>).html(html);<br>            &#125;<br>        &#125;)<br>    &#125;<br>&lt;/script&gt;<br><br>&lt;a href=<span class="hljs-string">&quot;javascript:showStu()&quot;</span>&gt;访问服务器返回学生集合&lt;/a&gt;&lt;br&gt;<br>&lt;div id=<span class="hljs-string">&quot;mydiv&quot;</span>&gt;等待服务器返回数据&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li><li><p>在 action 上添加注解 @ResponseBody，用来处理 AJAX 请求</p><p>若本类中全都是 AJAX 请求，则类使用 @RestController 注解，方法的 @ResponseBody 可不写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.controller;<br><br><span class="hljs-keyword">import</span> github.wataaaame.bean.Student;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StuListAction</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span>   <span class="hljs-comment">// 解析 AJAX 请求，必须在 springmvc.xml 中添加注册驱动</span><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Student&gt; stuList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        stuList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;vv&quot;</span>, <span class="hljs-number">22</span>));<br>        stuList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;ee&quot;</span>, <span class="hljs-number">19</span>));<br><br>        <span class="hljs-keyword">return</span> stuList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回一个集合，SpringMVC 会自动调用 Jackson 转换为 json 格式</p></li></ol><h2 id="四种跳转方式"><a href="#四种跳转方式" class="headerlink" title="四种跳转方式"></a>四种跳转方式</h2><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: vv<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">9</span>/<span class="hljs-number">1</span><br>  Time: <span class="hljs-number">18</span>:<span class="hljs-number">17</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/one.action&quot;</span>&gt;<span class="hljs-number">1.</span> 请求转发页面（默认）&lt;/a&gt;<br>&lt;br&gt;&lt;br&gt;<br>&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/two.action&quot;</span>&gt;<span class="hljs-number">2.</span> 请求转发 action&lt;/a&gt;<br>&lt;br&gt;&lt;br&gt;<br>&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/three.action&quot;</span>&gt;<span class="hljs-number">3.</span> 重定向页面&lt;/a&gt;<br>&lt;br&gt;&lt;br&gt;<br>&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/four.action&quot;</span>&gt;<span class="hljs-number">4.</span> 重定向 action&lt;/a&gt;<br>&lt;br&gt;&lt;br&gt;<br>&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/five.action&quot;</span>&gt;<span class="hljs-number">5.</span> 跳到其他目录&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>JumpAction.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JumpAction</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/other&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">other</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;other go&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/one&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">one</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;one go&quot;</span>);<br>        <span class="hljs-comment">// 默认是请求转发到页面，使用视图解析器拼接</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/two&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">two</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;two go&quot;</span>);<br>        <span class="hljs-comment">// forward 屏蔽前缀后缀拼接，实现请求转发跳转</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/other.action&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/three&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">three</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;three go&quot;</span>);<br>        <span class="hljs-comment">// redirect 屏蔽前缀后缀拼接，实现重定向跳转</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/admin/main.jsp&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/four&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">four</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;four go&quot;</span>);<br>        <span class="hljs-comment">// redirect 屏蔽前缀后缀拼接，实现重定向跳转</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/other.action&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/five&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">five</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;five go&quot;</span>);<br>        <span class="hljs-comment">// redirect 屏蔽前缀后缀拼接，实现重定向跳转</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/other/other.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="默认支持的参数类型"><a href="#默认支持的参数类型" class="headerlink" title="默认支持的参数类型"></a>默认支持的参数类型</h2><p>不需要创建，直接添加使用</p><ol><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li><li>Model</li><li>Map</li><li>ModelMap</li></ol><p>注意：</p><ul><li>Map、Model、ModelMap 同 Request，使用请求作用域进行数据传递，所以服务器端的跳转必须是请求转发；Session 作用域不受此影响</li><li>Response 不能传递数据</li></ul><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;a href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/data.action?name=ee&quot;</span>&gt;访问服务器，进行数据携带跳转&lt;/a&gt;<br></code></pre></td></tr></table></figure><p>DataAction.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.controller;<br><br><span class="hljs-keyword">import</span> github.wataaaame.bean.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.ui.ModelMap;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataAction</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/data&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">data</span><span class="hljs-params">(</span><br><span class="hljs-params">            HttpServletRequest request,</span><br><span class="hljs-params">            HttpServletResponse response,</span><br><span class="hljs-params">            HttpSession session,</span><br><span class="hljs-params">            Model model,</span><br><span class="hljs-params">            Map map,</span><br><span class="hljs-params">            ModelMap modelMap</span><br><span class="hljs-params">    )</span> &#123;<br>        <span class="hljs-comment">// 做一个 User 数据，传递到 main.jsp</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;vv&quot;</span>, <span class="hljs-number">12</span>);<br><br>        request.setAttribute(<span class="hljs-string">&quot;requestUser&quot;</span>, user);<br>        session.setAttribute(<span class="hljs-string">&quot;sessionUser&quot;</span>, user);<br>        model.addAttribute(<span class="hljs-string">&quot;modelUser&quot;</span>, user);<br>        map.put(<span class="hljs-string">&quot;mapUser&quot;</span>, user);<br>        modelMap.addAttribute(<span class="hljs-string">&quot;modelMapUser&quot;</span>, user);<br><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;main&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>main.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: vv<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">9</span>/<span class="hljs-number">1</span><br>  Time: <span class="hljs-number">18</span>:<span class="hljs-number">47</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;main&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;main.jsp&lt;/h1&gt;<br><br>&lt;%--<br>    request.setAttribute(<span class="hljs-string">&quot;requestUser&quot;</span>, user);<br>    session.setAttribute(<span class="hljs-string">&quot;sessionUser&quot;</span>, user);<br>    model.addAttribute(<span class="hljs-string">&quot;modelUser&quot;</span>, user);<br>    map.put(<span class="hljs-string">&quot;mapUser&quot;</span>, user);<br>    modelMap.addAttribute(<span class="hljs-string">&quot;modelMapUser&quot;</span>, user);<br>--%&gt;<br>request: $&#123;requestUser&#125;&lt;br&gt;<br>session: $&#123;sessionUser&#125;&lt;br&gt;<br>model: $&#123;modelUser&#125;&lt;br&gt;<br>map: $&#123;mapUser&#125;&lt;br&gt;<br>modelMap: $&#123;modelMapUser&#125;&lt;br&gt;<br>&lt;%-- 使用 param. 的方式取出携带数据 --%&gt;<br>从 index.jsp 来的数据：$&#123;param.name&#125;&lt;br&gt;<br><br>&lt;button onclick=<span class="hljs-string">&quot;window.history.back()&quot;</span>&gt;back&lt;/button&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="日期处理"><a href="#日期处理" class="headerlink" title="日期处理"></a>日期处理</h2><h3 id="日期的提交处理"><a href="#日期的提交处理" class="headerlink" title="日期的提交处理"></a>日期的提交处理</h3><p>日期无法在函数的参数中直接提取，需要特殊处理</p><ol><li><p>单个日期处理</p><p>在方法参数或 set 方法上使用注解 @DataTimeFormat，此注解必须搭配 springmvc.xml 中的 <code>&lt;mvc:annotationdriver&gt;</code> 标签（AJAX 请求同样需要）</p><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%-- 处理日期 --%&gt;<br>&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/date.action&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;date&quot;</span> name=<span class="hljs-string">&quot;date&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>DateAction.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.format.annotation.DateTimeFormat;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateAction</span> &#123;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/date&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">date</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="hljs-params">            Date date</span><br><span class="hljs-params">    )</span> &#123;<br>        System.out.println(sdf.format(date));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;date&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类中全局日期处理</p><p>注册一个注解，用来解析本类中所有日期类型，自动转换</p><ul><li>注册全局日期注解后无需注册驱动标签</li></ul><p>DateAction.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注册一个全局的日期处理注解</span><br><span class="hljs-meta">@InitBinder</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBinder</span><span class="hljs-params">(WebDataBinder webDataBinder)</span> &#123;<br>    webDataBinder.registerCustomEditor(Date.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomDateEditor</span>(sdf, <span class="hljs-literal">true</span>));<br>&#125;<br><span class="hljs-meta">@RequestMapping(&quot;/date&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">date</span><span class="hljs-params">(Date date)</span> &#123;<br>    System.out.println(date);<br>    System.out.println(sdf.format(date));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;date&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="日期的显示处理"><a href="#日期的显示处理" class="headerlink" title="日期的显示处理"></a>日期的显示处理</h3><ol><li><p>单个日期对象转换</p><p>直接格式化为字符串进行传递显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单个日期传递</span><br>request.setAttribute(<span class="hljs-string">&quot;date&quot;</span>, sdf.format(date));<br></code></pre></td></tr></table></figure></li><li><p>List 中实体类对象成员变量的日期转换</p><p>添加 JSTL 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- JSTL 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用 JSTL 标签</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: vv<br>  Date: <span class="hljs-number">2022</span>/<span class="hljs-number">9</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">17</span>:<span class="hljs-number">11</span><br>  To change <span class="hljs-built_in">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%-- 导入 JSTL 核心标签库 --%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br>&lt;%-- 导入 JSTL 格式化标签库 --%&gt;<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;fmt&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;<br><br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;学生集合&lt;/h2&gt;<br>&lt;table width=<span class="hljs-string">&quot;800px&quot;</span> border=<span class="hljs-string">&quot;1px&quot;</span>&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;name&lt;/th&gt;<br>        &lt;th&gt;birthday&lt;/th&gt;<br>    &lt;/tr&gt;<br>    &lt;c:forEach items=<span class="hljs-string">&quot;$&#123;stuList&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;stu&quot;</span>&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;$&#123;stu.name&#125;&lt;/td&gt;<br>            &lt;td&gt;$&#123;stu.birthday&#125;-----&lt;fmt:formatDate value=<span class="hljs-string">&quot;$&#123;stu.birthday&#125;&quot;</span> pattern=<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>&gt;&lt;/fmt:formatDate&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/c:forEach&gt;<br>&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure></li></ol><p>返回为 Json 需要在实体类中的成员变量 get 方法上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getDate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> date;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="mvc-annotation-driven-标签"><a href="#mvc-annotation-driven-标签" class="headerlink" title="mvc:annotation-driven 标签"></a>mvc:annotation-driven 标签</h2><p>该标签会自动注册两个 bean，分别为：<code>DefaultAnnotationHandlerMapping</code> 和 <code>AnnotationMethodHandleerAdapter</code>，是 springmvc 为 @controller 分发请求所必需的，除了注册 bean，还提供很多支持：</p><ol><li><em>支持使用 ConversionService 实例对表单参数进行类型转换</em></li><li>支持使用 @NumberFormat、@DateTimeFormat</li><li>注解完成数据类型的格式化</li><li>支持使用 @RequestBody 和 ResponseBody 注解</li><li><em>支持使用静态资源的分流</em></li></ol><h2 id="资源在-WEB-INF-下"><a href="#资源在-WEB-INF-下" class="headerlink" title="资源在 WEB-INF 下"></a>资源在 WEB-INF 下</h2><p>此目录下的动态资源，不可直接访问，只能通过请求转发的方式进行访问</p><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>WebinfAction.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebinfAction</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/showMain&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">showMain</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;showMain Action go!&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;main&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="去掉后缀-action"><a href="#去掉后缀-action" class="headerlink" title="去掉后缀 action"></a>去掉后缀 action</h2><p>注册 SpringMVC 框架时修改 url-pattern 标签内容为 <code>/</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 注册 Servlet 框架 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--        &lt;url-pattern&gt;*.action&lt;/url-pattern&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如此则 WEB-INF 下的文件也能被访问，需要设置拦截器以提高安全性</p><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>针对请求和响应进行的额外处理，在请求和响应的过程中添加预处理，后处理和最终处理</p><h2 id="执行时机"><a href="#执行时机" class="headerlink" title="执行时机"></a>执行时机</h2><ol><li><p>preHandle()：预处理，请求被处理之前进行操作</p><p>返回布尔类型，用于标识是否继续执行</p></li><li><p>postHandle()：请求被处理之后，但结果还没有渲染之前进行操作，可改变响应结果</p></li><li><p>afterCompletion：最终处理，所有请求响应结束后执行善后工作，清理对象，关闭资源</p></li></ol><h2 id="两种实现方式"><a href="#两种实现方式" class="headerlink" title="两种实现方式"></a>两种实现方式</h2><ol><li>继承 HandlerInterceptorAdapter 的父类</li><li><strong>实现 HandlerInterceptor 接口</strong></li></ol><p>以第二种方式为例，实现步骤如下：</p><ol><li><p>改造登录方法，在 Session 中存储用户信息，用于进行登录验证</p></li><li><p>开发拦截器的功能，实现 HandlerInterceptor 接口，重写 preHandle() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.github.wataaaame.crm.workbench.web.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkbenchIndexController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/workbench/index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;workbench/index&quot;</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 springmvc.xml 文件中注册拦截器</p><p>注册示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置拦截请求 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/settings/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/workbench/**&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置拦截白名单 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/settings/qx/user/toLogin&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/settings/qx/user/login&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置拦截器 bean --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.github.wataaaame.crm.settings.web.interceptor.LoginInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="SSM-整合"><a href="#SSM-整合" class="headerlink" title="SSM 整合"></a>SSM 整合</h1><p>使用 SSM + Vue 整合一个用户表页面</p><h2 id="后端-SSM"><a href="#后端-SSM" class="headerlink" title="后端 SSM"></a>后端 SSM</h2><ol><li><p>建库建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database if not exists ssm default character set utf8;<br>use ssm;<br><br>drop table if exists ssmuser;<br>create table ssmuser (<br>user_id varchar(255) not null,<br>    card_type varchar(255) default null,<br>    card_no varchar(255) default null,<br>    user_name varchar(255) default null,<br>    user_sex varchar(255) default null,<br>    user_age varchar(255) default null,<br>    user_role varchar(255) default null,<br>    primary key(user_id) using btree<br>) engine = innodb character set = utf8;<br><br>insert into ssmuser values(&#x27;101&#x27;, &#x27;身份证&#x27;, &#x27;350201198701146613&#x27;, &#x27;窦民佑&#x27;, &#x27;男&#x27;, &#x27;18&#x27;, &#x27;办事人员和有关人员&#x27;);<br>insert into ssmuser values(&#x27;102&#x27;, &#x27;护照&#x27;, &#x27;A32532643&#x27;, &#x27;青海霞&#x27;, &#x27;女&#x27;, &#x27;32&#x27;, &#x27;不便分类的其他从业人员&#x27;);<br>insert into ssmuser values(&#x27;103&#x27;, &#x27;身份证&#x27;, &#x27;156323198701146613&#x27;, &#x27;王中言&#x27;, &#x27;男&#x27;, &#x27;53&#x27;, &#x27;农、林、牧、渔、水利业生产人员&#x27;);<br>insert into ssmuser values(&#x27;104&#x27;, &#x27;身份证&#x27;, &#x27;974432198701146613&#x27;, &#x27;方天岚&#x27;, &#x27;男&#x27;, &#x27;48&#x27;, &#x27;未知&#x27;);<br>insert into ssmuser values(&#x27;105&#x27;, &#x27;军官证&#x27;, &#x27;军34829043&#x27;, &#x27;钱好问&#x27;, &#x27;男&#x27;, &#x27;33&#x27;, &#x27;不便分类的其他从业人员&#x27;);<br>insert into ssmuser values(&#x27;106&#x27;, &#x27;身份证&#x27;, &#x27;239834198701146613&#x27;, &#x27;肯迪亚&#x27;, &#x27;女&#x27;, &#x27;23&#x27;, &#x27;未知&#x27;);<br></code></pre></td></tr></table></figure></li><li><p>新建 Maven 项目，选择 webapp 模板</p></li><li><p>修改目录</p></li><li><p><a href="https://wataaaame.github.io/2022/09/04/Project%20-%20Configuration/#SSM">添加配置文件（模板）</a></p><ul><li><p>pom.xml</p></li><li><p>jdbc.properties</p></li><li><p>sqlMapConfig.xml</p></li><li><p>applicationContext.xml（mapper、service）</p></li><li><p>springmvc.xml</p></li><li><p>web.xml</p></li></ul></li><li><p>实体类</p><p>可以在数据库可视化中，右键选中的表名，点击 <code>Scripted Extensions -&gt; Generate POJOs.Groovy</code>，选择目录后自动生成 bean&#x2F;pojo 文件，可通过 <code>Alt + Ctrl + L</code> 修改一下缩进</p></li><li><p>Mapper 层</p></li><li><p>Service 层</p></li><li><p>测试</p><p>Spring 接管 junit 单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span> <span class="hljs-comment">// 启动 Spring 容器</span><br><span class="hljs-meta">@ContextConfiguration(locations = &#123;&quot;classpath:applicationContext_mapper.xml&quot;, &quot;classpath:applicationContext_service.xml&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    UserService userService;<br>    <br>    <span class="hljs-meta">@Test</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Controller 层</p></li><li><p>浏览器测试</p></li></ol><h2 id="前端-Vue"><a href="#前端-Vue" class="headerlink" title="前端 Vue"></a>前端 Vue</h2><p>Element 框架实现页面</p><ol><li><p>涉及跨域访问，服务器端 Controller 类上添加 ＠CrossOrigin 字段以支持跨域访问</p></li><li><p>后端端口改为 8082（也可更改前端）</p></li><li><p><a href="https://element.eleme.cn/#/zh-CN/component/installation">Element UI 框架帮助文档</a></p></li><li><p>安装 nodejs</p><p>使当前计算机使用 vue 框架</p><p><code>node-v</code>：查看 node 版本</p><p><code>npm -v</code>：查看 npm 版本</p></li><li><p>使用命令行进入到要运行的 <strong>vue 项目目录下</strong>，运行以下命令进行项目构建：</p><ul><li><p><code>npm i element -ui -S</code></p><p>下载 Element UI 框架</p></li><li><p><code>npm install</code></p><p>打包项目</p></li><li><p><code>npm install --save vue-axios</code></p><p>下载跨域访问组件 axios</p></li></ul></li><li><p>IDEA 中的 <code>File -&gt; Settings -&gt; Plugins</code> 添加 Vue 插件，重启 IDEA</p></li><li><p>启动服务器，新窗口中打开提供的前端项目</p></li><li><p>点击 <code>Add Configuration...</code>，添加 npm</p><p><code>Node interpreter</code> ：node.exe 安装路径</p><p><code>Scripts</code>（package.json 中规定的当前项目启动方式）：选择 dev</p></li><li><p>运行即可</p></li></ol><h3 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h3><p>config&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Paths</span><br><span class="hljs-attr">assetsSubDirectory</span>: <span class="hljs-string">&#x27;static&#x27;</span>,<br><span class="hljs-attr">assetsPublicPath</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br><span class="hljs-attr">proxyTable</span>: devEnv.<span class="hljs-property">OPEN_PROXY</span> === <span class="hljs-literal">false</span> ? &#123;&#125; : &#123;<br>    <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-comment">// 后端服务器地址端口</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8082&#x27;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// 项目中以 /api 开头，统一替换为 / 供服务器识别</span><br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>            <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;,<br>    <span class="hljs-comment">// Various Dev Server settings</span><br>        <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-comment">// can be overwritten by process.env.HOST</span><br>        <span class="hljs-comment">// 前端端口号，可修改为 8082 与后端替换</span><br>        <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>, <span class="hljs-comment">// can be overwritten by process.env.PORT, if port is in use, a free one will be determined</span><br>        <span class="hljs-attr">autoOpenBrowser</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">errorOverlay</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">notifyOnErrors</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">poll</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-</span><br></code></pre></td></tr></table></figure><p>test&#x2F;package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 项目启动方式</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm run dev&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;unit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jest --config test/unit/jest.conf.js --coverage&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;e2e&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node test/e2e/runner.js&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm run unit &amp;&amp; npm run e2e&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint --ext .js,.vue src test/unit test/e2e/specs&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node build/build.js&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// 项目依赖使用的版本号</span><br><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;axios&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.21.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;element&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^0.1.4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;element-ui&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.15.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.5.2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-axios&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.4.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vue-router&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.5.2&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">src<br>|___ assets<span class="hljs-regexp">//</span> 静态资源<br>|___ componeents<span class="hljs-regexp">//</span> 组件<br> |___ HelloWorld.vue<br> |___ UserHome.vue<br>|___ router<span class="hljs-regexp">//</span> 路由，进行跳转<br>|___ App.vue<span class="hljs-regexp">//</span> 入口组件<br>|___ main.js<span class="hljs-regexp">//</span> 入口的 JS 文件<br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用 ElementUI</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>)<br><span class="hljs-comment">// 跨域组件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$axios</span> = axios<br><span class="hljs-comment">// 自动转换 JSON</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">qs</span> = qs<br><span class="hljs-comment">/* eslint-disable no-new */</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router,<br>  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">App</span> &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;App/&gt;&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;router-view/&gt;<br>     &lt;!-- 路由跳转 --&gt;<br>     &lt;router-link to=&quot;/user&quot;&gt;UserHome&lt;/router-link&gt; |<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>UserHome.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-form :inline=&quot;true&quot; :model=&quot;formInline&quot; class=&quot;demo-form-inline&quot;&gt;<br>      &lt;el-form-item&gt;<br>        &lt;el-input v-model=&quot;formInline.search1&quot; size=&quot;mini&quot; placeholder=&quot;输入姓名查询&quot; v-on:input=&quot;handleSearch()&quot;&gt;<br>        &lt;/el-input&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item&gt;<br>        &lt;el-select size=&quot;mini&quot; v-model=&quot;formInline.search2&quot; v-on:change=&quot;handleSearch()&quot;&gt;<br>          &lt;el-option label=&quot;请选择性别&quot; value=&quot;&quot;&gt;&lt;/el-option&gt;<br>          &lt;el-option label=&quot;男&quot; value=&quot;男&quot;&gt;&lt;/el-option&gt;<br>          &lt;el-option label=&quot;女&quot; value=&quot;女&quot;&gt;&lt;/el-option&gt;<br>        &lt;/el-select&gt;<br>      &lt;/el-form-item&gt;<br>       &lt;el-form-item&gt;<br>        &lt;el-button icon=&quot;el-icon-circle-plus-outline&quot; type=&quot;text&quot; @click=&quot;search = true&quot;&gt;查询&lt;/el-button&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item&gt;<br>        &lt;el-button icon=&quot;el-icon-circle-plus-outline&quot; type=&quot;text&quot; @click=&quot;dialogAdd = true&quot;&gt;添加&lt;/el-button&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item&gt;<br>        &lt;el-button icon=&quot;el-icon-delete&quot; type=&quot;text&quot; @click=&quot;handleDeleteList()&quot;&gt;删除&lt;/el-button&gt;<br>      &lt;/el-form-item&gt;<br>    &lt;/el-form&gt;<br><br>    &lt;el-table<br>      ref=&quot;multipleTable&quot;<br>      :data=&quot;tableData&quot;<br>      border<br>      highlight-current-row<br>      style=&quot;width: 100%&quot;<br>      @selection-change=&quot;handleSelectionDelete&quot;&gt;<br>      &lt;el-table-column type=&quot;selection&quot; width=&quot;55&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;用户编号&quot;&gt;<br>        &lt;template slot-scope=&quot;scope&quot;&gt;<br>          &lt;span&gt;&#123;&#123; scope.row.userId &#125;&#125;&lt;/span&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;证件类型&quot; prop=&quot;cardType&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;证件号码&quot; prop=&quot;cardNo&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;用户姓名&quot;&gt;<br>        &lt;template slot-scope=&quot;scope&quot;&gt;<br>          &lt;el-popover trigger=&quot;hover&quot; placement=&quot;right&quot;&gt;<br>            &lt;p&gt;证件类型: &#123;&#123; scope.row.cardType &#125;&#125;&lt;/p&gt;<br>            &lt;p&gt;证件号码: &#123;&#123; scope.row.cardNo &#125;&#125;&lt;/p&gt;<br>            &lt;p&gt;用户姓名：&#123;&#123; scope.row.userName &#125;&#125;&lt;/p&gt;<br>            &lt;p&gt;用户性别: &#123;&#123; scope.row.userSex &#125;&#125;&lt;/p&gt;<br>            &lt;p&gt;用户年龄: &#123;&#123; scope.row.userAge &#125;&#125;&lt;/p&gt;<br>            &lt;p&gt;用户角色：&#123;&#123; scope.row.userRole &#125;&#125;&lt;/p&gt;<br>            &lt;div slot=&quot;reference&quot; class=&quot;name-wrapper&quot;&gt;<br>              &lt;el-button type=&quot;text&quot;&gt;&#123;&#123; scope.row.userName &#125;&#125;&lt;/el-button&gt;<br>            &lt;/div&gt;<br>          &lt;/el-popover&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;用户性别&quot; prop=&quot;userSex&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;用户年龄&quot; prop=&quot;userAge&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;用户角色&quot; prop=&quot;userRole&quot;&gt;&lt;/el-table-column&gt;<br>      &lt;el-table-column label=&quot;操作&quot;&gt;<br>        &lt;template slot-scope=&quot;scope&quot;&gt;<br>          &lt;el-button type=&quot;text&quot; icon=&quot;el-icon-edit&quot; @click=&quot;handleEdit(scope.$index, scope.row)&quot;&gt;编辑&lt;/el-button&gt;<br>          &lt;el-button type=&quot;text&quot; icon=&quot;el-icon-delete&quot; @click=&quot;handleDelete(scope.$index, scope.row)&quot;&gt;删除&lt;/el-button&gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br> &lt;el-dialog title=&quot;添加&quot; :append-to-body=&#x27;true&#x27; :visible.sync=&quot;dialogAdd&quot; :before-close=&quot;handleClose&quot;&gt;<br>      &lt;el-form :model=&quot;ruleForm&quot; :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; label-width=&quot;80px&quot; class=&quot;demo-ruleForm&quot; size=&quot;medium&quot;&gt;<br>        &lt;el-form-item label=&quot;证件类型&quot;&gt;<br>          &lt;el-select v-model=&quot;ruleForm.cardType&quot; placeholder=&quot;请选择证件类型&quot; prop=&quot;cardType&quot;&gt;<br>            &lt;el-option label=&quot;身份证&quot; value=&quot;身份证&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;军官证&quot; value=&quot;军官证&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;护照&quot; value=&quot;护照&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;港澳居民通行证&quot; value=&quot;港澳居民通行证&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;台湾往来大陆通行证&quot; value=&quot;台湾往来大陆通行证&quot;&gt;&lt;/el-option&gt;<br>          &lt;/el-select&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;证件号码&quot;&gt;<br>          &lt;el-input v-model=&quot;ruleForm.cardNo&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;用户姓名&quot;&gt;<br>          &lt;el-input v-model=&quot;ruleForm.userName&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;用户性别&quot;&gt;<br>          &lt;el-radio-group v-model=&quot;ruleForm.userSex&quot;&gt;<br>            &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt;<br>            &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt;<br>          &lt;/el-radio-group&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;用户年龄&quot;&gt;<br>          &lt;el-slider v-model=&quot;ruleForm.userAge&quot; show-input&gt;&lt;/el-slider&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;用户角色&quot;&gt;<br>          &lt;el-select v-model=&quot;ruleForm.userRole&quot; placeholder=&quot;请选择用户角色&quot; prop=&quot;userRole&quot;&gt;<br>            &lt;el-option label=&quot;国家机关、党群组织、企业、事业单位负责人&quot; value=&quot;国家机关、党群组织、企业、事业单位负责人&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;专业技术人员&quot; value=&quot;专业技术人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;办事人员和有关人员&quot; value=&quot;办事人员和有关人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;商业、服务业人员&quot; value=&quot;商业、服务业人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;农、林、牧、渔、水利业生产人员&quot; value=&quot;农、林、牧、渔、水利业生产人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;生产、运输设备操作人员及有关人员&quot; value=&quot;生产、运输设备操作人员及有关人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;军人&quot; value=&quot;军人&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;不便分类的其他从业人员&quot; value=&quot;不便分类的其他从业人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;未知&quot; value=&quot;未知&quot;&gt;&lt;/el-option&gt;<br>          &lt;/el-select&gt;<br>        &lt;/el-form-item&gt;<br>      &lt;/el-form&gt;<br>        &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;       &lt;el-button @click=&quot;emptyUserData()&quot; size=&quot;medium&quot;&gt;取 消&lt;/el-button&gt;      &lt;el-button @click=&quot;addUser(&#x27;ruleForm&#x27;)&quot; type=&quot;primary&quot; size=&quot;medium&quot;&gt;确 定&lt;/el-button&gt;<br>&lt;/span&gt;<br>   &lt;/el-dialog&gt;<br><br>    &lt;el-dialog title=&quot;编辑&quot; :append-to-body=&#x27;true&#x27; :visible.sync=&quot;dialogUpdate&quot; :before-close=&quot;handleClose&quot;&gt;<br>      &lt;el-form :model=&quot;ruleForm&quot; :rules=&quot;rules&quot; ref=&quot;ruleForm&quot; label-width=&quot;70px&quot; class=&quot;demo-ruleForm&quot; size=&quot;medium&quot;&gt;<br>        &lt;el-form-item label=&quot;证件类型&quot;&gt;<br>          &lt;el-select v-model=&quot;ruleForm.cardType&quot; placeholder=&quot;请选择证件类型&quot; prop=&quot;cardType&quot;&gt;<br>            &lt;el-option label=&quot;身份证&quot; value=&quot;身份证&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;军官证&quot; value=&quot;军官证&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;护照&quot; value=&quot;护照&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;港澳居民通行证&quot; value=&quot;港澳居民通行证&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;台湾往来大陆通行证&quot; value=&quot;台湾往来大陆通行证&quot;&gt;&lt;/el-option&gt;<br>          &lt;/el-select&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;证件号码&quot;&gt;<br>          &lt;el-input v-model=&quot;ruleForm.cardNo&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;用户姓名&quot;&gt;<br>          &lt;el-input v-model=&quot;ruleForm.userName&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;用户性别&quot;&gt;<br>          &lt;el-radio-group v-model=&quot;ruleForm.userSex&quot;&gt;<br>            &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt;<br>            &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt;<br>          &lt;/el-radio-group&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;用户年龄&quot;&gt;<br>          &lt;el-slider v-model=&quot;ruleForm.userAge&quot; show-input&gt;&lt;/el-slider&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item label=&quot;用户角色&quot;&gt;<br>          &lt;el-select v-model=&quot;ruleForm.userRole&quot; placeholder=&quot;请选择用户角色&quot; prop=&quot;userRole&quot;&gt;<br>            &lt;el-option label=&quot;国家机关、党群组织、企业、事业单位负责人&quot; value=&quot;国家机关、党群组织、企业、事业单位负责人&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;专业技术人员&quot; value=&quot;专业技术人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;办事人员和有关人员&quot; value=&quot;办事人员和有关人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;商业、服务业人员&quot; value=&quot;商业、服务业人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;农、林、牧、渔、水利业生产人员&quot; value=&quot;农、林、牧、渔、水利业生产人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;生产、运输设备操作人员及有关人员&quot; value=&quot;生产、运输设备操作人员及有关人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;军人&quot; value=&quot;军人&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;不便分类的其他从业人员&quot; value=&quot;不便分类的其他从业人员&quot;&gt;&lt;/el-option&gt;<br>            &lt;el-option label=&quot;未知&quot; value=&quot;未知&quot;&gt;&lt;/el-option&gt;<br>          &lt;/el-select&gt;<br>        &lt;/el-form-item&gt;<br>      &lt;/el-form&gt;<br>        &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;&lt;el-button @click=&quot;emptyUserData()&quot; size=&quot;medium&quot;&gt;取 消&lt;/el-button&gt;        &lt;el-button @click=&quot;updateUser()&quot; type=&quot;primary&quot; size=&quot;medium&quot;&gt;确 定&lt;/el-button&gt;<br>    &lt;/span&gt;<br>    &lt;/el-dialog&gt;<br><br>    &lt;br&gt;<br><br>    &lt;el-pagination<br>      background<br>      :disabled=&quot;disablePage&quot;<br>      :current-page.sync=&quot;currentPage&quot;<br>      small<br>      layout=&quot;prev, pager, next&quot;<br>      :page-size=&quot;pageSize&quot;<br>      :total=&quot;total&quot;<br>      @current-change=&quot;handlePageChange&quot;&gt;<br>    &lt;/el-pagination&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>/* eslint-disable */<br>export default &#123;<br>  name: &#x27;UserHome&#x27;,<br>  data() &#123;<br>    return &#123;<br>      ruleForm: &#123;<br>        userId: null,//用户id<br>        cardType: null,//证件类型<br>        cardNo: null,//证件号码<br>        userName: null,//用户姓名<br>        userSex: null,//用户性别<br>        userAge: 25,//用户年龄<br>        userRole: null//用户角色<br>      &#125;,<br>      rules: &#123;&#125;,<br>      tableData: [],<br>      formInline:&#123;<br>        search1: &#x27;&#x27;,<br>        search2: &#x27;&#x27;<br>      &#125;,<br>      dialogAdd: false,<br>      dialogUpdate: false,<br>      pageSize: 5,<br>      currentPage: 1,<br>      total: 0,<br>      disablePage: false,<br>      multipleSelection: []<br>    &#125;;<br>  &#125;,<br>  // 钩子函数，在页面打开时自动调用<br>  created() &#123;<br>    this.handlePageChange();<br>    this.getRowCount();<br>  &#125;,<br>  <br>  methods: &#123;<br>    /**<br>     * 分页<br>     */<br>    handlePageChange() &#123;<br>      // 调用 stringify 进行数据转 json 对象<br>      let postData=this.qs.stringify(&#123;<br>        page:this.currentPage,<br>        userName:this.formInline.search1,<br>        userSex:this.formInline.search2<br>      &#125;);<br>      // AJAX 跨域访问请求<br>      this.$axios(&#123;<br>        method:&#x27;post&#x27;,<br>        url:&#x27;/api/user/selectUserPage&#x27;,<br>        data:postData<br>      &#125;).then(response=&gt;&#123;<br>        this.tableData=response.data;<br>      &#125;).catch(error=&gt;&#123;<br>        console.log(error);<br>      &#125;)<br>    &#125;,<br><br>    /**<br>     * 统计用户个数<br>     */<br>    getRowCount() &#123;<br>      let postData=this.qs.stringify(&#123;<br>        userName:this.formInline.search1,<br>        userSex:this.formInline.search2<br>      &#125;);<br>      this.$axios(&#123;<br>        method:&#x27;post&#x27;,<br>        url:&#x27;/api/user/getRowCount&#x27;,<br>        data:postData<br>      &#125;).then(response=&gt;&#123;<br>        this.total=response.data;<br>      &#125;).catch(error=&gt;&#123;<br>        console.log(error);<br>      &#125;)<br>    &#125;,<br><br>    /**<br>     * 添加用户<br>     */<br>    addUser() &#123;<br>      if (this.ruleForm.cardType == null || this.ruleForm.cardNo == null || this.ruleForm.userName == null || this.ruleForm.userSex == null || this.ruleForm.userRole == null) &#123;<br>        this.$alert(&#x27;用户信息不完整请检查&#x27;, &#x27;温馨提示&#x27;, &#123;<br>          confirmButtonText: &#x27;确定&#x27;<br>        &#125;);<br>        return;<br>      &#125;<br>      let postData = this.qs.stringify(&#123;<br>        cardType: this.ruleForm.cardType,//证件类型<br>        cardNo: this.ruleForm.cardNo,//证件号码<br>        userName: this.ruleForm.userName,//用户姓名<br>        userSex: this.ruleForm.userSex,//用户性别<br>        userAge: this.ruleForm.userAge,//用户年龄<br>        userRole: this.ruleForm.userRole,//用户角色<br>      &#125;);<br>      this.$axios(&#123;<br>        method:&#x27;post&#x27;,<br>        url:&#x27;/api/user/createUser&#x27;,<br>        data:postData<br>      &#125;).then(response=&gt;&#123;<br>        this.handlePageChange();<br>        this.getRowCount();<br>        this.$message(&#123;<br>          type: &#x27;success&#x27;,<br>          message: &#x27;已添加!&#x27;<br>        &#125;);<br>        this.emptyUserData();<br>      &#125;).catch(error=&gt;&#123;<br>        console.log(error);<br>      &#125;)<br>    &#125;,<br>    search()&#123;<br>         this.handlePageChange();<br>      this.getRowCount();<br>    &#125;,<br><br>    handleSearch() &#123;<br>      this.handlePageChange();<br>      this.getRowCount();<br>    &#125;,<br><br>    handleEdit(index, row) &#123;<br>      this.dialogUpdate = true;<br>      row.userAge = Number(row.userAge);<br>      this.ruleForm = Object.assign(&#123;&#125;, row, index); //这句是关键！！！<br>    &#125;,<br><br>    handleClose(done) &#123;<br>      this.$confirm(&#x27;确认关闭？&#x27;)<br>        .then(_ =&gt; &#123;<br>          done();<br>          this.emptyUserData();<br>        &#125;)<br>        .catch(_ =&gt; &#123;<br>        &#125;);<br>    &#125;,<br><br>    /**<br>     * 清空绑定数据<br>     */<br>    emptyUserData() &#123;<br>      this.dialogAdd = false;<br>      this.dialogUpdate = false;<br>      this.ruleForm = &#123;<br>        userId: null,//用户id<br>        cardType: null,//证件类型<br>        cardNo: null,//证件号码<br>        userName: null,//用户姓名<br>        userSex: null,//用户性别<br>        userAge: 25,//用户年龄<br>        userRole: null//用户角色<br>      &#125;;<br>    &#125;,<br><br>    /**<br>     * 根据 userId 删除用户<br>     * @param index<br>     * @param row<br>     */<br>    handleDelete(index, row) &#123;<br>      //console.log(index, row);<br>      this.$confirm(&#x27;删除操作, 是否继续?&#x27;, &#x27;提示&#x27;, &#123;<br>        confirmButtonText: &#x27;确定&#x27;,<br>        cancelButtonText: &#x27;取消&#x27;,<br>        type: &#x27;warning&#x27;<br>      &#125;).then(() =&gt; &#123;<br>        let postData = this.qs.stringify(&#123;<br>          userId: row.userId,<br>        &#125;);<br>        this.$axios(&#123;<br>          method: &#x27;post&#x27;,<br>          url: &#x27;/api/user/deleteUserById&#x27;,<br>          data: postData<br>        &#125;).then(response =&gt; &#123;<br>          this.getRowCount();<br>          if (this.total % 5 == 1 &amp;&amp; this.currentPage &gt;= 1) &#123;<br>            if (this.total / 5 &lt; this.currentPage) &#123;<br>              this.currentPage = this.currentPage - 1;<br>            &#125;<br>          &#125;<br>          this.handlePageChange();<br><br>          this.$message(&#123;<br>            type: &#x27;success&#x27;,<br>            message: &#x27;删除成功!&#x27;<br>          &#125;);<br>          //console.log(response);<br>        &#125;).catch(error =&gt; &#123;<br>          console.log(error);<br>        &#125;);<br><br>      &#125;).catch(() =&gt; &#123;<br>        this.$message(&#123;<br>          type: &#x27;info&#x27;,<br>          message: &#x27;已取消删除&#x27;<br>        &#125;);<br>      &#125;);<br>    &#125;,<br><br>    handleSelectionDelete(val) &#123;<br>      this.multipleSelection = val;<br>    &#125;,<br><br>    /**<br>     * 根据 userId 批量删除用户<br>     */<br>    handleDeleteList() &#123;<br>      let userIds = &quot;&quot;;<br>      this.multipleSelection.forEach(item =&gt; &#123;<br>        userIds += item.userId + &#x27;,&#x27;;<br>      &#125;)<br>      console.log(userIds);<br>      // let userIds= this.multipleSelection.map(item =&gt; item.userId).join()<br><br>      this.$confirm(&#x27;删除操作, 是否继续?&#x27;, &#x27;提示&#x27;, &#123;<br>        confirmButtonText: &#x27;确定&#x27;,<br>        cancelButtonText: &#x27;取消&#x27;,<br>        type: &#x27;warning&#x27;<br>      &#125;).then(() =&gt; &#123;<br>        let postData = this.qs.stringify(&#123;<br>          userIdList: userIds<br>        &#125;);<br>        console.log(postData);<br>        this.$axios(&#123;<br>          method: &#x27;post&#x27;,<br>          url: &#x27;/api/user/deleteUserByIdList&#x27;,<br>          data: postData<br>        &#125;).then(response =&gt; &#123;<br>          this.getRowCount();<br>          if (this.total % 5 == 1 &amp;&amp; this.currentPage &gt;= 1) &#123;<br>            if (this.total / 5 &lt; this.currentPage) &#123;<br>              this.currentPage = this.currentPage - 1;<br>            &#125;<br>          &#125;<br>          this.handlePageChange();<br><br>          this.$message(&#123;<br>            type: &#x27;success&#x27;,<br>            message: &#x27;删除成功!&#x27;<br>          &#125;);<br>          //console.log(response);<br>        &#125;).catch(error =&gt; &#123;<br>          console.log(error);<br>        &#125;);<br><br>      &#125;).catch(() =&gt; &#123;<br>        this.$message(&#123;<br>          type: &#x27;info&#x27;,<br>          message: &#x27;已取消删除&#x27;<br>        &#125;);<br>      &#125;);<br>    &#125;,<br><br><br>    updateUser() &#123;<br>      if (this.ruleForm.cardType == null || this.ruleForm.cardNo == null || this.ruleForm.userName == null || this.ruleForm.userSex == null || this.ruleForm.userRole == null) &#123;<br>        this.$alert(&#x27;用户信息不完整请检查&#x27;, &#x27;温馨提示&#x27;, &#123;<br>          confirmButtonText: &#x27;确定&#x27;<br>        &#125;);<br>        return;<br>      &#125;<br>      let postData = this.qs.stringify(&#123;<br>        userId: this.ruleForm.userId,//用户 Id<br>        cardType: this.ruleForm.cardType,//证件类型<br>        cardNo: this.ruleForm.cardNo,//证件号码<br>        userName: this.ruleForm.userName,//用户姓名<br>        userSex: this.ruleForm.userSex,//用户性别<br>        userAge: this.ruleForm.userAge,//用户年龄<br>        userRole: this.ruleForm.userRole,//用户角色<br>      &#125;);<br>      this.$axios(&#123;<br>        method: &#x27;post&#x27;,<br>        url: &#x27;/api/user/updateUserById&#x27;,<br>        data: postData<br>      &#125;).then(response =&gt; &#123;<br>        this.handlePageChange();<br>        this.getRowCount();<br>        this.$message(&#123;<br>          type: &#x27;success&#x27;,<br>          message: &#x27;已编辑!&#x27;<br>        &#125;);<br>        this.emptyUserData();<br>        //console.log(response);<br>      &#125;).catch(error =&gt; &#123;<br>        console.log(error);<br>      &#125;);<br>    &#125;<br>  &#125;,<br><br><br>&#125;<br>/* eslint-disable */<br>&lt;/script&gt;<br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM - Note03 Spring</title>
    <link href="/2022/08/25/SSM%20-%20Note03%20Spring/"/>
    <url>/2022/08/25/SSM%20-%20Note03%20Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>是一个容器，整合其他框架的框架，核心是 IOC 和 AOP，由 20 多个模块构成，在很多领域都提供优秀的解决方案</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>轻量级</p><p>由 20 多个模块构成，对代码无污染</p></li><li><p>面向切面编程</p><p>使用接口就是面向灵活，项目可扩展性可维护性极高</p></li><li><p>AOP 面向切面编程</p><p>将公共、通用、重复的代码单独开发，在需要的时候反织回去，底层原理是动态代理</p></li><li><p>整合其他框架</p><p>使其他框架更易用</p></li></ol><h1 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="*IOC 控制反转"></a>*IOC 控制反转</h1><p>IoC（Inversion of Control）是一个概念、一种思想，由 Spring 容器进行对象的创建和依赖注入，程序员在使用时直接取出使用</p><ul><li><p>正转：由程序员进行对象的创建和依赖注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<span class="hljs-comment">// 程序员创建对象</span><br>sut.setName(<span class="hljs-string">&quot;vv&quot;</span>);<span class="hljs-comment">// 程序员进行赋值</span><br>stu.setAge(<span class="hljs-number">22</span>);<br></code></pre></td></tr></table></figure></li><li><p>反转：由 Spring 容器创建对象和依赖注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Sprint 创建对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.bean.Stuent&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Sprint 进行赋值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;vv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>&quot;<span class="hljs-attr">age</span>&quot; <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;22&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="XML-创建对象"><a href="#XML-创建对象" class="headerlink" title="XML 创建对象"></a>XML 创建对象</h2><p>添加依赖文件：</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Student 实体类：</p><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;no value executed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Resources 新建一个 <code>XML Configuration File -&gt; Spring Config</code> 文件</p><p>创建好 Student 实体类后在此文件中创建对象：</p><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 创建学生对象</span><br><span class="hljs-comment">        等同于 Student stu = new Student();</span><br><span class="hljs-comment">        id：创建对象的名称</span><br><span class="hljs-comment">        class：创建对象的类型，底层通过反射构建</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.bean.Student&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用 Spring 反转创建对象：</p><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStudentSpring</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 若想从 Spring 容器中取出对象，则要先创建容器对象并启动</span><br>    <span class="hljs-comment">// 启动容器的同时创建对象</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-comment">// 取出对象</span><br>    <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) ac.getBean(<span class="hljs-string">&quot;stu&quot;</span>);<br>    System.out.println(student);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对象赋值"><a href="#对象赋值" class="headerlink" title="对象赋值"></a>对象赋值</h3><ol><li><p>使用 Setter 注入</p><p>必须提供 Setter 方法</p><ol><li>简单类型注入：使用 value 属性</li><li>引用类型注入：使用 ref 属性（引用类位置无影响）</li></ol><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.bean.Student&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 使用 Setter 注入值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;vv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;22&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用构造方法注入</p><p>必须提供带参构造方法</p><ol><li><p>使用构造方法的参数名称注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;school&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.bean.School&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WUT&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jiangxia Street&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用构造方法参数下标注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;school&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.bean.School&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WUT&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jiangxia Street&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用默认的构造方法参数顺序注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;school&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.bean.School&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WUT&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jiangxia Street&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="引用类型自动注入"><a href="#引用类型自动注入" class="headerlink" title="引用类型自动注入"></a>引用类型自动注入</h3><p>在 XML 文件中注入引用类型时，可以在标签中声明 autowire 属性来根据条件匹配引用类型对象，从而代替引用类型标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 创建学校对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;school&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.bean.School&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;WUT&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jiangxia&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 创建学生对象 --&gt;</span><br><span class="hljs-comment">&lt;!-- autowire 引用类型自动注入</span><br><span class="hljs-comment">byType：通过类型注入，类似于 @Autowire</span><br><span class="hljs-comment">byName：通过名称注入，类似于 @Autowired + @Qualifier</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.bean.Student&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;vv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;22&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;property name=&quot;school&quot; ref=&quot;school&quot;&gt;&lt;/property&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>使用<strong>三层架构</strong>进行用户的插入操作</p><p>界面层、业务逻辑层、数据访问层（模拟）</p><blockquote><p>除实体类的创建，Spring 接管了整个三层架构</p></blockquote><h4 id="非-Spring-接管"><a href="#非-Spring-接管" class="headerlink" title="非 Spring 接管"></a>非 Spring 接管</h4><ul><li><p>实体类</p><p><code>github.wataaaame.bean</code> User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uid;<br>    <span class="hljs-keyword">private</span> String uname;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uage;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> uid, String uname, <span class="hljs-type">int</span> uage)</span> &#123;<br>        <span class="hljs-built_in">this</span>.uid = uid;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>        <span class="hljs-built_in">this</span>.uage = uage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUid</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> uid;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span> &#123;<br>        <span class="hljs-built_in">this</span>.uid = uid;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> uname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUname</span><span class="hljs-params">(String uname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.uname = uname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> uage;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUage</span><span class="hljs-params">(<span class="hljs-type">int</span> uage)</span> &#123;<br>        <span class="hljs-built_in">this</span>.uage = uage;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;uid=&quot;</span> + uid +<br>                <span class="hljs-string">&quot;, uname=&#x27;&quot;</span> + uname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, uage=&quot;</span> + uage +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>数据访问层</p><p><code>github.wataaaame.dao</code></p><p>UserMapper.java（接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.dao;<br><br><span class="hljs-keyword">import</span> github.wataaaame.bean.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserMapperImpl.java（实现类）（模拟）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.dao;<br><br><span class="hljs-keyword">import</span> github.wataaaame.bean.User;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据访问层的实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span> &#123;<br>        System.out.println(user.getUname() + <span class="hljs-string">&quot; has inserted&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>业务逻辑层</p><p><code>github.wataaaame.service</code></p><p>UserService.java（接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.service;<br><br><span class="hljs-keyword">import</span> github.wataaaame.bean.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceImpl.java（实现类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.service.impl;<br><br><span class="hljs-keyword">import</span> github.wataaaame.bean.User;<br><span class="hljs-keyword">import</span> github.wataaaame.dao.UserMapper;<br><span class="hljs-keyword">import</span> github.wataaaame.dao.UserMapperImpl;<br><span class="hljs-keyword">import</span> github.wataaaame.service.UserService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 业务逻辑层的实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// 切记：所有业务逻辑层都必定有数据访问层的对象，通过该对象交流</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserMapperImpl</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> userMapper.insert(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>界面层</p><p><code>github.wataaaame.controller</code></p><p>UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.controller;<br><br><span class="hljs-keyword">import</span> github.wataaaame.bean.User;<br><span class="hljs-keyword">import</span> github.wataaaame.service.UserService;<br><span class="hljs-keyword">import</span> github.wataaaame.service.impl.UserServiceImpl;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 界面层</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-comment">// 创建业务逻辑层对象供页面层访问</span><br>    <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br><br>    <span class="hljs-comment">// 界面层的功能实现，对外提供访问的功能</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.insert(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="Spring-接管"><a href="#Spring-接管" class="headerlink" title="Spring 接管"></a>Spring 接管</h4><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 创建各种对象 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 创建数据访问层对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.dao.UserMapperImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 创建业务逻辑层对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userMapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 创建界面层对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.controller.UserController&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>取消各个实现类中手动创建的对象</p><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 创建容器并启动</span><br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br><br>    <span class="hljs-comment">// 取出对象</span><br>    <span class="hljs-type">UserController</span> <span class="hljs-variable">userController</span> <span class="hljs-operator">=</span> (UserController) applicationContext.getBean(<span class="hljs-string">&quot;userController&quot;</span>);<br><br>    <span class="hljs-comment">// 测试功能</span><br>    System.out.println(userController.insert(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">101</span>, <span class="hljs-string">&quot;vv&quot;</span>, <span class="hljs-number">22</span>)));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基于注解的-IOC"><a href="#基于注解的-IOC" class="headerlink" title="基于注解的 IOC"></a>基于注解的 IOC</h2><p>也成为 DI（Dependency Injection），依赖注入，它是 IOC 的具体实现技术</p><p><strong>必须在 Spring 核心配置文件中添加包扫描</strong></p><ol><li><p><strong>单个包扫描</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加包扫描 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;github.wataaaame.bean1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>可以使用逗号分隔多个包</p></li><li><p><em>扫描根包</em></p></li></ol><h3 id="创建对象注解"><a href="#创建对象注解" class="headerlink" title="创建对象注解"></a>创建对象注解</h3><ul><li><p>@Component：可以创建任意对象</p><p>创建对象的默认名称是类名的驼峰命名法，也可以指定对象的名称 <code>@Component(&quot;stu&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Student&#x27;s no param method execute&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>@Controller：专门用来创建控制器的对象（Servlet），这种对象可以接受用户请求、返回处理结果给客户端</p></li><li><p>@Service：专门用来创建业务逻辑层对象，负责向下访问数据访问层，处理完毕后的结果返回给界面层</p></li><li><p>@Repository：专门用来创建数据库访问层对象，负责数据库中的增删改查所有操作</p></li></ul><h3 id="依赖注入注解"><a href="#依赖注入注解" class="headerlink" title="依赖注入注解"></a>依赖注入注解</h3><h4 id="值类型注入"><a href="#值类型注入" class="headerlink" title="值类型注入"></a>值类型注入</h4><ul><li><p>@Value：用来给简单类型注入值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;vv&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@Value(&quot;22&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br></code></pre></td></tr></table></figure></li></ul><h4 id="引用类型注入"><a href="#引用类型注入" class="headerlink" title="引用类型注入"></a>引用类型注入</h4><blockquote><p>注入条件：</p><ol><li><p>同源类型（类型相同）</p><p>同源类型会自动在 Bean 工厂中找到相应对象</p></li><li><p>父子类型</p><p>子类创建默认会调用父类无参构造方法</p><p><strong>直接按名称进行注入值</strong></p></li><li><p>接口实现</p></li></ol></blockquote><ul><li><p>@Autowired：使用类型注入值，从整个 Bean 工厂中搜索同源类型的对象进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 同源类型</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> School school;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 父子类型</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> School school;<br></code></pre></td></tr></table></figure><ul><li>按照对象名称进行二次筛选，选中与被注入对象相同名称的对象进行注入（名称可在创建对象时指定）</li></ul></li><li><p>@Autowired + @Qualifier：使用名称注入值，从整个 Bean 工厂中搜索相同名称的对象进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 同源类型</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;school&quot;)</span><br><span class="hljs-keyword">private</span> School school;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 父子类型</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;subSchool&quot;)</span><br><span class="hljs-keyword">private</span> School school;<br></code></pre></td></tr></table></figure><ul><li><strong>直接使用名称挑选指定对象</strong></li></ul></li></ul><h2 id="配置文件拆分"><a href="#配置文件拆分" class="headerlink" title="配置文件拆分"></a>配置文件拆分</h2><ol><li><p>按层拆</p><p>applicationContext_controller.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.controller.UserController&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.controller.BookController&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>applicationContext_service.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.controller.UserService&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.controller.BookService&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>applicationContext_mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.controller.UserMapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.controller.BookMapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>按功能拆</p><p>applicationContext_user.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.controller.UserController&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.service.UserService&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.mapper.UserMapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>applicationContext_book.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bController&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.controller.BookController&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.service.BookService&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.mapper.BookMapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="配置文件合并"><a href="#配置文件合并" class="headerlink" title="配置文件合并"></a>配置文件合并</h2><ol><li><p>单条导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 单个文件导入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext_mapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">import</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext_service.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">import</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext_controller.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">import</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>批量导入</p><p>支持星号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 批量导入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext_*.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">import</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="*AOP 面向切面编程"></a>*AOP 面向切面编程</h1><p>AOP（Aspect Orient Programming），面向切面编程</p><p>公共的、通用的、重复的功能成为切面，面向切面编程就是将切面提取出来，单独开发，在需要调用的方法中通过动态代理的方式进行置入</p><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><p>手写 AOP 框架</p><p>业务：图书购买业务</p><p>切面：事务</p><ul><li>第一个版本：业务和切面紧耦合在一起，没有拆分</li><li>第二个版本：使用<strong>子类代理</strong>拆分业务和切面</li><li>第三个版本：使用静态代理拆分业务和切面，业务和业务接口已拆分，此时切面紧耦合在业务中</li><li>第四个版本：使用静态代理拆分业务和业务接口，切面和切面接口</li><li>第五个版本：使用动态代理完成第四个版本的优化</li></ul><h2 id="Spring-支持的-AOP"><a href="#Spring-支持的-AOP" class="headerlink" title="Spring 支持的 AOP"></a>Spring 支持的 AOP</h2><p>Spring 支持 AOP 的编程，常用的有以下几种</p><ol><li><p>Before 通知</p><p><code>org.springframework.aop.MethodBeforeAdvice</code></p><p>在目标方法被调用前调用</p></li><li><p>After 通知</p><p><code>org.springframework.aop.AfterReturningAdvice</code></p><p>在目标方法被调用后调用</p></li><li><p>Throws 通知</p><p><code>org.springframework.aop.ThrowsAdvice</code></p><p>目标方法抛出异常时调用</p></li><li><p>Around 通知</p><p><code>org.aopalliance.intercept.MethodInterceptor</code></p><p>拦截对目标对象方法调用</p></li></ol><h2 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h2><ol><li>切面：重复的、公共的、通用的功能，例如：日志、事务、权限</li><li>连接点：就是目标方法，因为在目标方法中要实现目标方法的功能和切面功能</li><li>切入点（Pointcut）：指定切入位置，多个连接点构成切入点，可以是一个目标方法；可以是一个类中所有方法；可以是某个包下所有类中的方法</li><li>目标对象：操作谁，谁就是目标对象</li><li>通知（Advice）：指定切入时机，在目标方法执行前、执行后、出错时、环绕目标方法切入切面功能</li></ol><h2 id="AspectJ-框架"><a href="#AspectJ-框架" class="headerlink" title="AspectJ 框架"></a>AspectJ 框架</h2><p>AspectJ 是一个优秀面向切面的框架，扩展了 Java 语言，提供了强大的切面实现</p><h3 id="常用通知类型"><a href="#常用通知类型" class="headerlink" title="常用通知类型"></a>常用通知类型</h3><ol><li>前置通知：@Before</li><li>后置通知：@AfterReturning</li><li>环绕通知：@Around</li><li>最终通知：@After</li><li><em>定义切入点：@Pointcut</em></li></ol><p>通知执行顺序为：<code>环绕前置 —&gt; 前置 -&gt; 业务 -&gt; 环绕后置 -&gt; 最终 -&gt; 后置 -&gt; 目标返回值</code></p><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>规范公式：<code>execution(访问权限 方法返回值 方法声明(参数) 异常类型)</code></p><p>简化公式：<code>execution(方法返回值 方法声明(参数))</code></p><p>用到的符号：</p><ul><li><p><code>*</code>：通配符（任意个任意字符）</p></li><li><p><code>..</code>：若出现在方法参数中，则代表任意参数</p><p>若出现在路径中，则代表本路径及其所有子路径</p></li></ul><p>示例：</p><ol><li><p><code>execution(public * *(..))</code></p><p>任意公共方法</p></li><li><p><code>execution(* set*(..))</code></p><p>任何一个以 set 开始的方法</p></li><li><p><code>execution(* com.xyz.service.impl.*.*(..))</code></p><p>定义在包内任意类的任意方法</p></li><li><p><code>execution(* com.xyz.service.impl..*.*(..))</code></p><p>定义在包内所有子路径的任意类的任意方法</p></li><li><p><code>execution(* *..service.*.*(..))</code></p><p>service 之前可以有任意包</p></li><li><p><code>execution(* *.service.*.*(..))</code></p><p>service 之前只有一个包</p></li></ol><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><p>在目标方法执行前切入切面功能，切面方法中不可以获得目标方法的返回值，只能得到目标方法的签名（除方法体）</p><p>前置通知的切面方法规范：</p><ol><li><p>访问权限是 public</p></li><li><p>方法的返回值是 void</p></li><li><p>方法名称自定义</p></li><li><p>方法没有参数，有也只能是 JoinPoint 类型</p></li><li><p>必须使用 @Before 注解声明切入时机为前切和切入点</p></li><li><p>参数：</p><p>value：指定切入点表达式</p></li></ol><p>实现步骤：</p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建业务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.s1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SomeService</span> &#123;<br>    String <span class="hljs-title function_">doSome</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建业务实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.s1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SomeService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doSome</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;abcd&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.s1;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 此类为切面类，包含各种切面方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 所有切面功能都是由切面方法实现的</span><br><span class="hljs-comment">     * 可以将各种切面都在此类中进行开发</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * public String doSome(String name, int age)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(value=&quot;execution(public String github.wataaaame.s1.SomeServiceImpl.doSome(String, int))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myBefore</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;切面方法中的前置通知功能实现...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 applicationContext.xml 中进行切面绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 创建业务对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;someService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.s1.SomeServiceImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 创建切面对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAspect&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;github.wataaaame.s1.MyAspect&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 绑定 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>可以使用 注解的方式代替 XML 创建对象</p><p>前置方法中可以添加参数 <code>JoinPoint jp</code></p><ul><li><p>jp.getSingnature()：获取签名</p></li><li><p>jp.getArgs()：获取参数</p><p>可通过 <code>Arrays.toString(jp.getArgs())</code> 打印参数列表</p></li></ul><blockquote><p>切换 JDK、CGLib 动态代理：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 默认是 JDK 动态代理，取时必须使用接口类型 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 设置为 CGLib 子类代理，可以使用接口或实现类（不推荐） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h3><p>后置通知的方法规范：</p><ol><li><p>访问权限是 public</p></li><li><p>方法没有返回值</p></li><li><p>方法名称自定义</p></li><li><p>方法有参数（接收目标方法的返回值，目标方法无返回值可以无参，写上则两种情况皆可处理）</p></li><li><p>使用 <code>@AfterReturning</code> 注解</p></li><li><p>参数：</p><p>value：指定切入点表达式</p><p>returning：指定目标方法的返回值名称（必须与方法的参数名称一致）</p></li></ol><p>如果目标方法返回值是 8 种基本类型或 String 则后置通知方法无法改变输出结果，其余类型会改变（参考指针原理）</p><h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3><p>通过拦截目标方法的方式，在目标方法前后增强功能的通知</p><p>它是功能最强大的通知，一般事务使用此通知，可轻易地改变目标方法的返回值</p><p>环绕方法参数为目标方法，返回值为目标方法返回值</p><p>环绕通知方法规范：</p><ol><li><p>访问权限是 public</p></li><li><p>有返回值，此返回值为目标方法的返回值</p></li><li><p>方法名称自定义</p></li><li><p>方法有参数，此参数为目标方法</p><p>参数类型：<code>ProceedingJoinPoint</code></p></li><li><p>回避异常</p></li><li><p>使用 @Around 注解声明</p></li><li><p>参数：</p><p>value：指定切入点表达式</p></li></ol><p>调用目标方法：</p><ul><li>使用 <code>.proceed(pjp.getArgs())</code></li><li>getArgs() 获取目标方法参数</li></ul><h3 id="最终通知"><a href="#最终通知" class="headerlink" title="最终通知"></a>最终通知</h3><p>无论目标方法是否正常执行，最终通知的代码都会被执行</p><p>最终通知方法规范：</p><ol><li><p>访问权限是 public</p></li><li><p>方法没有返回值</p></li><li><p>方法名称自定义</p></li><li><p>方法没有参数，如果有只能是 JoinPoint</p></li><li><p>使用 <code>@After</code> 注解表明是最终通知</p></li><li><p>参数：</p><p>value：指定切入点表达式</p></li></ol><h3 id="定义切入点"><a href="#定义切入点" class="headerlink" title="定义切入点"></a>定义切入点</h3><p>如果多个切面切入到同一个切入点，可以使用别名简化开发</p><p>使用 <code>@Pointcut</code> 注解创建一个空方法，此方法的名称就是别名</p><h1 id="Spring-amp-MyBaits"><a href="#Spring-amp-MyBaits" class="headerlink" title="Spring &amp; MyBaits"></a>Spring &amp; MyBaits</h1><ol><li><p>创建数据库表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use ssm;<br><br>drop table if exists user, student;<br><br>create table user(<br>uid int primary key,<br>    uname varchar(255),<br>    upwd varchar(255)<br>);<br><br>create table account(<br>aid int primary key,<br>    aname varchar(255),<br>    actt varchar(255)<br>);<br><br>select uid, uname, upwd from user;<br>select aid, aname, actt from account;<br></code></pre></td></tr></table></figure></li><li><p>新建项目，使用 quickstart 模板</p></li><li><p>修改目录</p></li><li><p>修改 pom.xml 文件，添加相关依赖（模板），添加数据库可视化</p></li><li><p>添加 MyBatis 相应模板</p><p>点击 <code>File -&gt; Settings... -&gt; Editor -&gt; File and Code Templates</code>，点击 <code>+</code> 号添加模板文件</p><p>SqlMapConfig 模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 读取属性文件中数据库的配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置日志输出语句，显示相应操作的 sql --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;github.wataaaame.bean&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;github.wataaaame.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/ssm?useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC<span class="hljs-symbol">&amp;amp;</span></span></span><br><span class="hljs-string"><span class="hljs-tag">                allowPublicKeyRetrieval=true&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0.0&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapper 文件所在的包名&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Mapper 模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">    <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;接口完全限定名&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 MyBatis 核心配置文件（SqlMapConfig.xml）</p><p>其中大部分配置被 spring 框架接管</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 读取属性文件中数据库的配置 --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;properties resource=&quot;db.properties&quot;&gt;&lt;/properties&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置日志输出语句，显示相应操作的 sql --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;typeAliases&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;package name=&quot;github.wataaaame.bean&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/typeAliases&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;environments default=&quot;development&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;environment id=&quot;development&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;dataSource type=&quot;POOLED&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                &lt;property name=&quot;driver&quot; value=&quot;github.wataaaame.jdbc.Driver&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/ssm?useSSL=false&amp;amp;serverTimezone=UTC&amp;amp;--&gt;</span><br><span class="hljs-comment">&lt;!--                allowPublicKeyRetrieval=true&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                &lt;property name=&quot;password&quot; value=&quot;0.0&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;/dataSource&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/environment&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/environments&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;mappers&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;package name=&quot;mapper 文件所在的包名&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/mappers&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 jdbc.properties 文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">0.0</span><br></code></pre></td></tr></table></figure></li><li><p>添加 applicationContext_mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 读取属性文件 jdbc.properties --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:property-placeholder</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 创建数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置 SqlSessionFactoryBean 类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置数据源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置 MyBatis 的核心配置文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 注册实体类别名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;github.wataaaame.bean&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注册 mapper.xml 文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;github.wataaaame.mapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 applicationContext_service.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- SM 是基于注解式开发，需要添加包扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;github.wataaaame.service&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 事务处理 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加 User 实体类，Account 实体类</p></li><li><p>添加 mapper 包，添加 UserMapper 接口和 UserMapper.xml 并开发</p></li><li><p>添加 service 包，添加 UserService 接口和 UserServiceImpl 实现类</p></li><li><p>添加测试类进行功能测试</p></li></ol><h2 id="添加事务回滚"><a href="#添加事务回滚" class="headerlink" title="添加事务回滚"></a>添加事务回滚</h2><ol><li><p>在 applicationContext_service.xml 文件中添加配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 事务处理 --&gt;</span><br><span class="hljs-comment">&lt;!-- 1. 添加事务管理器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 事务需关联数据库处理，所以需要配置数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 2. 添加事务的注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tx:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在对应的 ServiceImpl 中添加<strong>增删改</strong>的事务传播注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 配置事务传播特性</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br></code></pre></td></tr></table></figure><ul><li><p>若想取消特定异常回滚，则添加以下字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 指定某异常名不回滚</span><br><br><span class="hljs-comment">// 使用异常名（多个使用大括号）</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED, noRollbackForClassName=&quot;ArithmeticException&quot;)</span><br><br><span class="hljs-comment">// 使用异常类型</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED, noRollbackFor = ArithmeticException.class)</span><br></code></pre></td></tr></table></figure></li><li><p>若想指定自定义异常回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 指定某异常名必须回滚</span><br><br><span class="hljs-comment">// 使用异常名（多个使用大括号）</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED, RollbackForClassName=&quot;ArithmeticException&quot;)</span><br><br><span class="hljs-comment">// 使用异常类型</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED, RollbackFor = ArithmeticException.class)</span><br></code></pre></td></tr></table></figure></li><li><p>timeout &#x3D; -1，代表永不超时</p></li><li><p>readOnly &#x3D; false，若为查询操作，必须设置为 true</p></li><li><p>isolation &#x3D; Isolation.DEFAULT，使用对应数据库默认的隔离级别</p></li></ul></li></ol><h3 id="事务处理方式"><a href="#事务处理方式" class="headerlink" title="事务处理方式"></a>事务处理方式</h3><ol><li><p>注解式事务</p><p>使用 <code>@Transactional</code> 注解完成事务控制，可添加到类或方法，添加到类对所有方法生效，存在弊端</p><p>以上示例即为注解式事务</p></li><li><p><strong>声明式事务</strong></p><p>配置文件中添加一次，整个项目遵循此配置</p></li></ol><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p>Spring 中事务的隔离级别在 <a href="https://wataaaame.github.io/2022/05/11/MySQL%20-%20Note03%20Storage%20Engine,%20Transaction,%20Index%20and%20View/#%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E6%80%A7">数据库的四大隔离级别</a> 中多出一条：使用数据库默认的隔离级别 <code>isolation = Isolation.DEFAULT</code></p><h3 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h3><p>用来生成相应技术的连接与执行语句的对象</p><ul><li>JDBC -&gt; Connection</li><li>MyBatis -&gt; SqlSession</li><li>Hibernate -&gt; Session</li></ul><p>如果使用 MyBatis 框架，必须使用 DataSourceTransactionManager 类完成处理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 1. 添加事务管理器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 事务需关联数据库处理，所以需要配置数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="事务传播特性"><a href="#事务传播特性" class="headerlink" title="事务传播特性"></a>事务传播特性</h3><p>多个事务之间的合并、互斥等关系都可以通过设置事务的传播特性来解决</p><p>常用：</p><ol><li><p>PROPAGATION_REQUIRED</p><p>必被包含事务（<strong>增删改</strong>必用）</p></li><li><p>PROPAGATION_REQUIRES_NEW</p><p>自己新开事务，不管之前是否有事务</p></li><li><p>PROPAGATION_SUPPORTS</p><p>如果加入的方法有事务，则支持事务</p></li><li><p>PROPAGATION_NEVER</p><p>不能运行在事务中，否则抛异常</p></li><li><p>PROPAGATION_NOT_SUPPORTED</p><p>不支持事务，运行在非事务的环境</p></li></ol><p>不常用：</p><ol><li><p>PROPAGATION_MANDATORY</p><p>必须包在事务中，没有事务则抛异常</p></li><li><p>PROPAGATION_NESTED</p><p>嵌套事务</p></li></ol><p>项目中的所有事务，必须添加到业务逻辑层上</p><h3 id="八种事务场景"><a href="#八种事务场景" class="headerlink" title="八种事务场景"></a>八种事务场景</h3><table><thead><tr><th align="center">UserServiceImpl</th><th align="center">AccountServiceImpl(Exception)</th><th align="center">Result</th></tr></thead><tbody><tr><td align="center">none</td><td align="center">none</td><td align="center">user, account</td></tr><tr><td align="center">none</td><td align="center">REQUIRED</td><td align="center"><strong>user</strong></td></tr><tr><td align="center">REQUIRED</td><td align="center">none</td><td align="center"></td></tr><tr><td align="center">REQUIRED</td><td align="center">NOT_SUPPORTED</td><td align="center">account</td></tr><tr><td align="center">REQUIRED</td><td align="center">SUPPORTS</td><td align="center"></td></tr><tr><td align="center">REQUIRED</td><td align="center">REQUIRES_NEW</td><td align="center"></td></tr><tr><td align="center">REQUIRED</td><td align="center">REQUIRED</td><td align="center"></td></tr><tr><td align="center">REQUIRED</td><td align="center">NEVER</td><td align="center"></td></tr></tbody></table><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><p>要求项目中的方法命名有规范</p><ol><li>增加操作：add、save、insert、set</li><li>更新操作：update、change、modify</li><li>删除操作：delete、drop、remove、clear</li><li>查询操作：select、find、search、get</li></ol><p>配置事务切面时可以使用通配符 * 来匹配所有方法</p><p>applicationContext_transaction.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 此配置文件与 applicationContext_service.xml 功能一样，只是事务配置不同 --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 导入 applicationContext_mapper.xml --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;applicationContext_mapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">import</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 添加包扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;github.wataaaame.service.impl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 添加事务管理器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置事务切面 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*select*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*insert*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;SUPPORTS&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 绑定切面和切入点 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* github.wataaaame.service.impl.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;myPointcut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以在 aop:advisor 标签中添加 order 字段设置 声明式&#x2F;注解式 优先级</p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM - Note02 Dynamic Proxy &amp; MyBatis</title>
    <link href="/2022/08/20/SSM%20-%20Note02%20MyBatis/"/>
    <url>/2022/08/20/SSM%20-%20Note02%20MyBatis/</url>
    
    <content type="html"><![CDATA[<h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>目标对象不可访问，通过代理对象增强功能访问</p><p>作用：</p><ol><li>控制目标对象的访问</li><li>增强功能</li></ol><p>分类：</p><ol><li>静态代理</li><li>动态代理（JDK、CGLib）</li></ol><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>代理模式的一种，具备以下特点：</p><ol><li><strong>目标对象和代理对象实现同一个业务接口</strong></li><li>目标对象必须实现接口</li><li>代理对象在程序运行前就已经存在</li><li>灵活进行目标对象的切换，却无法进行功能的灵活处理（使用动态代理解决）</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>业务功能：请明星进行节目表演</p><p>明星：目标对象（无法直接访问）</p><p>助理：代理对象（可以访问，且对接明星）</p><p>客户：客户端对象</p><p><img src="/images/image-ssm/note02-01-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0.PNG" alt="静态代理实现"></p><p>Service.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 业务接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-comment">// 唱歌的业务需求</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>SuperStartLiu.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.service.impl;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.service.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标对象，实现唱歌接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperStartLiu</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是刘德华，我要唱恭喜发财&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Agent.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.service.impl;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.service.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代理对象，完成除了主业务以外的其他业务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Agent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;预订时间&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;预订场地&quot;</span>);<br><br>        <span class="hljs-comment">// 切记：业务功能必须由目标对象亲自实现</span><br>        <span class="hljs-type">SuperStartLiu</span> <span class="hljs-variable">liu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperStartLiu</span>();<br>        liu.sing();<br><br>        System.out.println(<span class="hljs-string">&quot;结算费用&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TestSing.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.test;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.service.Service;<br><span class="hljs-keyword">import</span> io.github.wataaaame.service.impl.Agent;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSing</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAgent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 有接口和实现类，必须使用接口指向实现类（规范）</span><br>        <span class="hljs-type">Service</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Agent</span>();<br>        agent.sing();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    预订时间</span><br><span class="hljs-comment">    预订场地</span><br><span class="hljs-comment">    我是刘德华，我要唱恭喜发财</span><br><span class="hljs-comment">    结算费用</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h3><p>类中成员变量、方法形参、方法返回值设计为接口，调用时接口指向实现类</p><p>新增 SuperStarZhou.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.service.impl;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.service.Service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperStarZhou</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是周润发，我来表演一下&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改后的 Agent.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.service.impl;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.service.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代理对象，完成除了主业务以外的其他业务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Agent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-comment">// 类中的成员变量设计为接口</span><br>    <span class="hljs-keyword">public</span> Service target;<br><br>    <span class="hljs-comment">// 传入目标对象，方法的参数设计为接口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Agent</span><span class="hljs-params">(Service target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;预订时间&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;预订场地&quot;</span>);<br><br>        <span class="hljs-comment">// 切记：业务功能必须由目标对象亲自实现</span><br>        <span class="hljs-comment">// 面向接口编程：调用时，接口指向实现类</span><br>        target.sing();<br><br>        System.out.println(<span class="hljs-string">&quot;结算费用&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>修改后的 TestSing.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.test;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.service.Service;<br><span class="hljs-keyword">import</span> io.github.wataaaame.service.impl.Agent;<br><span class="hljs-keyword">import</span> io.github.wataaaame.service.impl.SuperStarZhou;<br><span class="hljs-keyword">import</span> io.github.wataaaame.service.impl.SuperStartLiu;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSing</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAgent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Service</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Agent</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperStarZhou</span>());<br>        agent.sing();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    预订时间</span><br><span class="hljs-comment">    预订场地</span><br><span class="hljs-comment">    我是周润发，我来表演一下</span><br><span class="hljs-comment">    结算费用</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>如此代理便可灵活选择目标对象，但是却无法灵活切换业务功能（若 Service 添加功能，接口的实现类也需要逐一添加新的业务），需要使用动态代理解决</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>代理对象在程序运行的过程中动态在内存构建，可以<strong>灵活的进行业务功能的切换</strong></p><h3 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h3><ol><li><p>目标对象必须实现业务接口</p></li><li><p><strong>代理对象不需要实现业务接口</strong></p></li><li><p>动态代理对象在程序运行前不存在</p><p><strong>在程序运行时动态的在内存中构建</strong></p></li><li><p>动态代理<strong>灵活地进行业务功能的切换</strong></p></li><li><p><strong>目标对象本类中的方法（非接口中的方法）不能被代理</strong></p><p>否则使用 CGLib 代理</p></li></ol><p>动态代理类型：<code>class com.sun.proxy.$Proxy2</code></p><h4 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h4><ul><li><p>Proxy 类</p><p><code>java.lang.reflect.Proxy</code></p><p><strong>生成动态代理对象</strong>：</p><p>Proxy.newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</p><p>其中：</p><ul><li><p>ClassLoader：类加载器，完成目标对象的加载</p><p>获取目标对象类加载器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">target.getClass().getClassLoader()<br></code></pre></td></tr></table></figure></li><li><p>Class&lt;?&gt;[]：目标对象实现的所有接口</p><p>获取目标对象实现的所有接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">taget.getClass().getInterfaces()<br></code></pre></td></tr></table></figure></li><li><p>InvocationHandler：实现代理和业务功能，我们在调用时使用匿名内部类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>InvocationHandler 接口</p><p>代理的功能和目标对象的业务功能调用（类似于 Agent 的功能，<strong>增强目标对象功能</strong>），实现的方法：</p><p>public Object invoke(Object proxy, Method method, Object[] args)</p><p>其中：</p><ul><li>Object proxy：创建代理对象</li><li>Method method：目标方法（如 sing&#x2F;show）</li><li>Object[] args：目标方法的参数</li></ul></li><li><p>Method 类</p><p><strong>反射用的类，用来进行目标对象方法的反射调用</strong></p><p>Method 对象接住正在调用的方法（方法传递），有以下方法</p><p>Objec method.invoke(Object o, Object…args)</p><ul><li>Object o：目标对象</li><li>Object…args：目标对象的参数，相当于调用</li></ul></li></ul><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>Service.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 业务接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span>;<br>    String <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>SuperStarLiu.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.service.impl;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.service.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标对象：刘德华</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperStarLiu</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是刘德华，我来唱恭喜发财..&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;liu age&quot;</span>+age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Liu&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SuperStarZhou.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.service.impl;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.service.Service;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 目标对象：周润发</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperStarZhou</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是周润发，赌神是你爸爸...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;zhou age:&quot;</span>+age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Zhou&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ProxyFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.proxy;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.service.Service;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 代理工厂</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br>    <span class="hljs-comment">// 类中成员变量设计为接口</span><br>    Service target;<br><br>    <span class="hljs-comment">// 传入目标对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyFactory</span><span class="hljs-params">(Service target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取动态代理对象</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getAgent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>                <span class="hljs-comment">// ClassLoader loader，类加载器，完成目标对象的加载</span><br>                target.getClass().getClassLoader(),<br>                <span class="hljs-comment">// Class&lt;?&gt;[] interfaces，目标对象实现的所有接口</span><br>                target.getClass().getInterfaces(),<br>                <span class="hljs-comment">// InvocationHandler h，实现代理功能接口，我们传递匿名内部类实现</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span><br>                            <span class="hljs-keyword">throws</span> Throwable &#123;<br>                        <span class="hljs-comment">// 代理功能</span><br>                        System.out.println(<span class="hljs-string">&quot;预订时间&quot;</span>);<br>                        System.out.println(<span class="hljs-string">&quot;预订场地&quot;</span>);<br><br>                        <span class="hljs-comment">// 目标功能</span><br><span class="hljs-comment">//                        target.sing();    // 还是写死了</span><br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> method.invoke(target, args);<br><br>                        <span class="hljs-comment">// 代理功能</span><br>                        System.out.println(<span class="hljs-string">&quot;结算费用&quot;</span>);<br><br>                        <span class="hljs-comment">// 目标方法返回值</span><br>                        <span class="hljs-keyword">return</span> obj;<br>                    &#125;<br>                &#125;<br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.test;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.proxy.ProxyFactory;<br><span class="hljs-keyword">import</span> io.github.wataaaame.service.Service;<br><span class="hljs-keyword">import</span> io.github.wataaaame.service.impl.SuperStarLiu;<br><span class="hljs-keyword">import</span> io.github.wataaaame.service.impl.SuperStarZhou;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperStarLiu</span>());<br>        <span class="hljs-type">Service</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> (Service)factory.getAgent();<br>        agent.sing();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperStarZhou</span>());<br>        <span class="hljs-type">Service</span> <span class="hljs-variable">agent</span> <span class="hljs-operator">=</span> (Service)factory.getAgent();<br>        System.out.println(agent.show(<span class="hljs-number">60</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CGLib-动态代理"><a href="#CGLib-动态代理" class="headerlink" title="CGLib 动态代理"></a>CGLib 动态代理</h3><p>又称子类代理，通过动态的在内存中构建子类对象，重写父类的方法进行代理功能的增强</p><p>如果目标对象没有实现接口，则只能通过 CGLib 子类代理进行功能增强</p><p>子类代理是对象字节码框架 ASM 来实现的</p><h4 id="原理示例"><a href="#原理示例" class="headerlink" title="原理示例"></a>原理示例</h4><p>SuperStarLiu.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperStarLiu</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是刘德华，我来唱恭喜发财&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>SubSuperStarLiu.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubSuperStarLiu</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SuperStarLiu</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 子类重写父类方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sing</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;预订时间&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;预订场所&quot;</span>);<br>        <span class="hljs-comment">// 调用父类</span><br>        <span class="hljs-built_in">super</span>.sing();<br>        System.out.println(<span class="hljs-string">&quot;结算费用&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.test;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.SubSuperStarLiu;<br><span class="hljs-keyword">import</span> io.github.wataaaame.SuperStarLiu;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SuperStarLiu</span> <span class="hljs-variable">liu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubSuperStarLiu</span>();<br>        liu.sing();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    预订时间</span><br><span class="hljs-comment">    预订场所</span><br><span class="hljs-comment">    我是刘德华，我来唱恭喜发财</span><br><span class="hljs-comment">    结算费用</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><ol><li><p>添加 spring-core-5.2.5.jar 依赖</p></li><li><p>在内存中动态构建子类</p></li><li><p><strong>被代理的类不能为 final</strong>，否则报错，不可被重写</p></li><li><p><strong>目标对象的方法如果为 final&#x2F;static</strong>，就不会被拦截，即不会执行目标对象额外的业务方法</p></li><li><p>代码实现结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 使用工具类</span><br>    <span class="hljs-type">Enhancer</span> <span class="hljs-variable">en</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>    <span class="hljs-comment">// 设置父类</span><br>    en.setSuperclass(target.getClass());<br>    <span class="hljs-comment">// 设置回调函数</span><br>    en.setCallback(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-comment">// 返回子类（代理）对象</span><br>    <span class="hljs-keyword">return</span> en.reate();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>框架是一个半成品软件，将所有公共的、重复的功能解决掉，帮助程序快速高效地进行开发，可复用、可扩展</p><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><p>在项目开发中遵循的一种形式模式，分为三层</p><ol><li>界面层：用来接收客户端的输入，调用业务逻辑层进行功能处理，返回结果给客户端</li><li>业务逻辑层：用来进行整个项目的业务逻辑处理，向上为界面层处理结果，向下向数据访问层要数据</li><li>数据访问层：专门用来进行数据库的增删改查操作，向上为业务逻辑层提供数据</li></ol><p>各层之间调用顺序固定，不允许跨层访问</p><p><img src="/images/image-ssm/note02-02-%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B.PNG" alt="三层架构模型"></p><p>三层架构优点：</p><ol><li>结构清晰、耦合度低，各层分工明确</li><li>可维护性高，可扩展性高</li><li>有利于标准化</li><li>开发人员可只关注架构中某一层的功能实现</li><li>有利于各层逻辑的复用</li></ol><h3 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h3><p>Spring：整合了其他框架的框架，核心是 IOC 和 AOP，由 20 多个模块构成，在很多领域都提供了很好的解决方案</p><p>SpringMVC：Spring 家族的一员，专门用来优化控制器（Servlet），提供了既简单的数据提交、数据携带、页面跳转等功能</p><p>MyBatis：持久化层（数据访问层）的框架，用来进行数据库访问的优化，专注于 sqo 语句，极大的简化了 JDBC 的访问</p><h2 id="MyBatis-框架"><a href="#MyBatis-框架" class="headerlink" title="MyBatis 框架"></a>MyBatis 框架</h2><p>MyBatis 本身是 apache 的一个开源项目 iBatis，2010 年这个项目由 apache software foundation 迁移到了 google code，并且更名为 MyBaic，2013 年 11 月迁移到了 Github</p><p>MyBatis 完成数据访问层的优化，专注于 sql 语句，简化了过去 JDBC 繁琐的访问机制</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="/images/image-ssm/note02-03-MyBatis%E6%A1%86%E6%9E%B6%E7%BB%93%E6%9E%84.PNG" alt="MyBatis框架结构"></p><p>sqlMapConfig.xml：核心配置文件</p><p>Mapper.xml：sql 语句</p><p>SqlSessionFactory：工厂模式集中创建 SqlSession 对象</p><p>SqlSession：Connection + PreparedStatement</p><p>Executor：底层执行器（看不到）</p><p>MapperdStatement：sql 语句，通过输入映射输入，执行完通过输出映射返回值</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>添加框架的步骤：</p><ol><li>添加依赖</li><li>添加配置文件</li></ol><p>具体步骤：</p><ol><li><p>准备数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database ssm default charset utf8;<br>use ssm;<br>create table student (<br>id int(11) auto_increment primary key,<br>    name varchar(255) default null,<br>    email varchar(255) default null,<br>    age int(11) default null<br>) engine=innodb default charset=utf8;<br><br>insert into student(name, email, age) values(&#x27;vv&#x27;, &#x27;vv@vv.com&#x27;, 22);<br>insert into student(name, email, age) values(&#x27;ee&#x27;, &#x27;ee@vv.com&#x27;, 21);<br>insert into student(name, email, age) values(&#x27;xx&#x27;, &#x27;xx@vv.com&#x27;, 24);<br>insert into student(name, email, age) values(&#x27;yy&#x27;, &#x27;yy@vv.com&#x27;, 48);<br><br>select * from student;<br></code></pre></td></tr></table></figure></li><li><p>创建 maven module</p></li><li><p>修改目录</p></li><li><p>修改 pom.xml</p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MyBatis 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- MySQL 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加资源文件指定（将非 java 文件也添加到 classes 中）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 资源文件指定 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>IDEA 中添加数据库的可视化</p><ol><li>右侧点击 Database，点击 + 号，选择 Data Sources 选中 MySQL</li><li>输入 User、Password、Database</li><li>若提示缺少 JDBC，点击左上角扳手，添加驱动</li><li>点击 Test Connection，成功即可</li></ol></li><li><p>添加 jdbc.properties 属性文件（数据库的配置）</p><p>将以下文件置于 <code>src/main/resources</code> 中</p><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">jdbc.driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/ssm?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="hljs-attr">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">jdbc.password</span>=<span class="hljs-string">0.0</span><br></code></pre></td></tr></table></figure></li><li><p>添加 SqlMapConfig.xml 文件（MyBatis 核心配置文件）</p><p>将以下文件置于 <code>src/main/resources</code> 中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 读取属性文件（jdbc.properties）</span><br><span class="hljs-comment">        resource：从 resources 目录下找指定名称的文件加载</span><br><span class="hljs-comment">        url：使用绝对路径注册 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置数据库的环境变量 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 事务管理器</span><br><span class="hljs-comment">                JDBC：事务的控制交给程序员处理</span><br><span class="hljs-comment">                MANAGED：由容器（Spring）来管理事务 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 配置数据源</span><br><span class="hljs-comment">                JNDI：Java 命名目录接口，在服务器端进行数据库连接池的管理</span><br><span class="hljs-comment">                POOLED：使用数据库连接池</span><br><span class="hljs-comment">                UNPOLLED：不使用数据库连接池 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 配置数据库连接的基本参数 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 以下为居家或上线后的环境变量配置 --&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;environment id=&quot;home&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;transactionManager type=&quot;&quot;&gt;&lt;/transactionManager&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;dataSource type=&quot;&quot;&gt;&lt;/dataSource&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/environment&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;environment id=&quot;online&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;transactionManager type=&quot;&quot;&gt;&lt;/transactionManager&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;dataSource type=&quot;&quot;&gt;&lt;/dataSource&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/environment&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注册 mapper.xml 文件</span><br><span class="hljs-comment">        resource：从 resources 目录下找指定文件名称的文件注册</span><br><span class="hljs-comment">        url：使用绝对路径注册</span><br><span class="hljs-comment">        class：动态代理方式下的注册 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;StudentMapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>Ctrl + 点击，可以进入到 <code>http://mybatis.org/dtd/mybatis-3-config.dtd</code> 中查看标签的 dtd 文档（头文档，还有一种 xsd 格式）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">configuration</span> (<span class="hljs-keyword">properties</span>?, <span class="hljs-keyword">settings</span>?, <span class="hljs-keyword">typeAliases</span>?, <span class="hljs-keyword">typeHandlers</span>?, <span class="hljs-keyword">objectFactory</span>?, <span class="hljs-keyword">objectWrapperFactory</span>?, <span class="hljs-keyword">reflectorFactory</span>?, <span class="hljs-keyword">plugins</span>?, <span class="hljs-keyword">environments</span>?, <span class="hljs-keyword">databaseIdProvider</span>?, <span class="hljs-keyword">mappers</span>?)&gt;</span><br></code></pre></td></tr></table></figure><ul><li>标签 ? 代表出现顺序不可改变</li></ul></li><li><p>配置选项可以在 MyBatis 依赖目录中找到对应字段</p></li></ul></li><li><p>创建实体类 Student，用来封装数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, String email, Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(Integer id, String name, String email, Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, email=&#x27;&quot;</span> + email + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加完成学生表的增删改查功能的 StudentMapper.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- namespace</span><br><span class="hljs-comment">    指定命名空间（相当于包名），用来区分不同 mapper.xml 文件中相同的 id 属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 查询全部学生的功能</span><br><span class="hljs-comment">        resultType：指定查询返回的结果集类型，如果是集合，则必须是泛型</span><br><span class="hljs-comment">        parameterType：如果有参数，则通过它来指定参数类型 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;io.github.wataaaame.bean.Student&quot;</span>&gt;</span><br>        select id, name, email, age from student<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 按主键 id 查询学生信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;io.github.wataaaame.bean.Student&quot;</span>&gt;</span><br>        select id, name, email, age from student where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 按学生名称模糊查询 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;io.github.wataaaame.bean.Student&quot;</span>&gt;</span><br>        select id, name, email, age from student where name like &#x27;%$&#123;name&#125;%&#x27;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 增加学生 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;io.github.wataaaame.bean.Student&quot;</span>&gt;</span><br>        insert into student(name, email, age) values(#&#123;name&#125;, #&#123;email&#125;, #&#123;age&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 按 id 删除学生 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from student where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 更新学生 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;io.github.wataaaame.bean.Student&quot;</span>&gt;</span><br>        update student set name=#&#123;name&#125;, email=#&#123;email&#125;, age=#&#123;age&#125; where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建测试类进行功能测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.test;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.bean.Student;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件流读取核心配置文件 SqlMapConfig.xml</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">// 创建 SqlSessionFactory 工厂</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(input);<br>        <span class="hljs-comment">// 取出 sqlSession 对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();<br>        <span class="hljs-comment">// 完成查询工作</span><br>        List&lt;Student&gt; list = sqlSession.selectList(<span class="hljs-string">&quot;student.getAll&quot;</span>);<br>        list.forEach(student -&gt; System.out.println(student));<br>        <span class="hljs-comment">// 关闭 sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();<br>        <span class="hljs-comment">// 通过 id 查询某一个学生</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> sqlSession.selectOne(<span class="hljs-string">&quot;student.getById&quot;</span>, <span class="hljs-number">1</span>);<br>        System.out.println(student);<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetByName</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();<br>        List&lt;Student&gt; students = sqlSession.selectList(<span class="hljs-string">&quot;student.getByName&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>);<br>        students.forEach(student -&gt; System.out.println(student));<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.insert(<span class="hljs-string">&quot;student.insert&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;豪客&quot;</span>, <span class="hljs-string">&quot;haoke@vv.com&quot;</span>, <span class="hljs-number">34</span>));<br>        System.out.println(count + <span class="hljs-string">&quot; row has done!&quot;</span>);<br>        <span class="hljs-comment">// 切记：transactionManager type=&quot;JDBC&quot; 模式下，</span><br>        <span class="hljs-comment">// 增删改后必须手动提交事务</span><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.delete(<span class="hljs-string">&quot;student.deleteById&quot;</span>, <span class="hljs-number">6</span>);<br>        sqlSession.commit();<br>        System.out.println(count + <span class="hljs-string">&quot; row has done!&quot;</span>);<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.update(<span class="hljs-string">&quot;student.updateById&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;宝岛&quot;</span>, <span class="hljs-string">&quot;baodao@vv.com&quot;</span>, <span class="hljs-number">6</span>));<br>        sqlSession.commit();<br>        System.out.println(count + <span class="hljs-string">&quot; row has done!&quot;</span>);<br>        sqlSession.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="对象分析"><a href="#对象分析" class="headerlink" title="对象分析"></a>对象分析</h3><ol><li><p>Resources 类</p><p>解析 SqlMapConfig.xml 文件，创建出相应的对象</p><p><code>InputStream inputStream = Resource.getResourceAsStream(&quot;SqlMapConfig.cml&quot;);</code></p></li><li><p>SqlSessionFactory 接口</p><p>通过解析配置文件构建当前工厂的参数，生成工厂对象</p><blockquote><p>使用 ctrl+h 快捷键查看本接口的字接口及实现类</p></blockquote><p>DefaultSqlSessionFactory 是实现类</p><p><code>SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);</code></p></li><li><p>SqlSession 接口</p><p>DefaultSqlSession 是实现类</p></li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="优化测试类"><a href="#优化测试类" class="headerlink" title="优化测试类"></a>优化测试类</h4><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.test;<br><br><span class="hljs-keyword">import</span> io.github.wataaaame.bean.Student;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-comment">// 声明为成员变量</span><br>    <span class="hljs-keyword">private</span> SqlSession sqlSession;<br><br>    <span class="hljs-comment">// 通过 Before 与 After 注解实现测试前测试后执行操作</span><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">openSqlSession</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 使用文件流读取核心配置文件 SqlMapConfig.xml</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-comment">// 创建 SqlSessionFactory 工厂</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(input);<br>        <span class="hljs-comment">// 取出 sqlSession 对象</span><br>        sqlSession = factory.openSession();<br>    &#125;<br><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeSqlSession</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 关闭 sqlSession</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 完成查询工作</span><br>        List&lt;Student&gt; list = sqlSession.selectList(<span class="hljs-string">&quot;student.getAll&quot;</span>);<br>        list.forEach(student -&gt; System.out.println(student));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 通过 id 查询某一个学生</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> sqlSession.selectOne(<span class="hljs-string">&quot;student.getById&quot;</span>, <span class="hljs-number">1</span>);<br>        System.out.println(student);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetByName</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Student&gt; students = sqlSession.selectList(<span class="hljs-string">&quot;student.getByName&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>);<br>        students.forEach(student -&gt; System.out.println(student));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.insert(<span class="hljs-string">&quot;student.insert&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;豪客&quot;</span>, <span class="hljs-string">&quot;haoke@vv.com&quot;</span>, <span class="hljs-number">34</span>));<br>        System.out.println(count + <span class="hljs-string">&quot; row has done!&quot;</span>);<br>        <span class="hljs-comment">// 切记：transactionManager type=&quot;JDBC&quot; 模式下，</span><br>        <span class="hljs-comment">// 增删改后必须手动提交事务</span><br>        sqlSession.commit();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.delete(<span class="hljs-string">&quot;student.deleteById&quot;</span>, <span class="hljs-number">6</span>);<br>        sqlSession.commit();<br>        System.out.println(count + <span class="hljs-string">&quot; row has done!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> sqlSession.update(<span class="hljs-string">&quot;student.updateById&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;宝岛&quot;</span>, <span class="hljs-string">&quot;baodao@vv.com&quot;</span>, <span class="hljs-number">6</span>));<br>        sqlSession.commit();<br>        System.out.println(count + <span class="hljs-string">&quot; row has done!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实体类注册别名"><a href="#实体类注册别名" class="headerlink" title="实体类注册别名"></a>实体类注册别名</h4><p>SqlMapConfig.cml 中，添加 typeAliass 标签（注意标签位置），在 Mapper.xml 文件中封装对象的 bean 目录即可省略</p><ol><li><p>单个注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliass</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;io.github.wataaaame.bean.Student&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">typeAlias</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliass</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>批量注册</p><p>别名是类名的驼峰命名法（规范）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliass</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;io.github.wataaaame.bean&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">package</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliass</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="设置日志输出"><a href="#设置日志输出" class="headerlink" title="设置日志输出"></a>设置日志输出</h4><p>settings 标签中设置日志输出选项</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 设置日志，输出底层执行的代码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="动态代理-1"><a href="#动态代理-1" class="headerlink" title="*动态代理"></a>*动态代理</h2><p>在三层架构中，业务逻辑层要通过接口访问数据访问层的功能，而 Mapper.xml 是一个 xml 文件，无法直接获取访问</p><p><img src="/images/image-ssm/note02-04-Dao%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.PNG" alt="Dao动态代理"></p><p>使用动态代理实现</p><h3 id="实现规范"><a href="#实现规范" class="headerlink" title="实现规范"></a>实现规范</h3><p>UsersMapper.xml 与 UsersMapper.java</p><ol><li>必须在同一个目录下</li><li>文件名一致</li><li>id 与方法名称完全一致</li><li>parameterType 与参数一致</li><li>resultType 与返回值类型一致</li><li>namespace 是接口的完全限定名称 <code>io.github.wataaaame.mapper.UsersMapper</code></li><li>SqlMapConfig.xml 注册 mapper 时，使用 class &#x3D; 接口的完全限定名称</li></ol><h3 id="访问步骤"><a href="#访问步骤" class="headerlink" title="访问步骤"></a>访问步骤</h3><ol><li><p>建表 User</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use ssm;<br>-- --------------------------<br>-- Table structure for &#x27;user&#x27;<br>-- --------------------------<br>DROP TABLE IF EXISTS user;<br>CREATE TABLE user (<br>id int(11) NOT NULL AUTO_INCREMENT,<br>    username varchar(32) NOT NULL,<br>    birthday date DEFAULT NULL,<br>    sex char(1) DEFAULT NULL,<br>    address varchar(255) DEFAULT NULL,<br>    PRIMARY KEY(id)<br>) ENGINE=InnoDB AUTO_INCREMENT=101 DEFAULT CHARSET=utf8;<br>-- ---------------<br>-- Records of user<br>-- ---------------<br>INSERT INTO user(username, birthday, sex, address) VALUE(&#x27;vv&#x27;, &#x27;2002-04-13&#x27;, &#x27;1&#x27;, &#x27;武汉&#x27;);<br>INSERT INTO user(username, birthday, sex, address) VALUE(&#x27;ee&#x27;, &#x27;2001-03-27&#x27;, &#x27;0&#x27;, &#x27;贵州&#x27;);<br>INSERT INTO user(username, birthday, sex, address) VALUE(&#x27;李明&#x27;, &#x27;2004-01-2&#x27;, &#x27;1&#x27;, &#x27;北京&#x27;);<br>INSERT INTO user(username, birthday, sex, address) VALUE(&#x27;王恒&#x27;, &#x27;1994-08-21&#x27;, &#x27;1&#x27;, &#x27;上海&#x27;);<br>INSERT INTO user(username, birthday, sex, address) VALUE(&#x27;芳芳&#x27;, &#x27;2003-12-7&#x27;, &#x27;0&#x27;, &#x27;福建&#x27;);<br><br>select id, username, birthday, sex, address from user;<br></code></pre></td></tr></table></figure></li><li><p>新建 maven，刷新可视化</p></li><li><p>修改目录、修改 pom.xml、添加依赖、添加 build - resources 标签</p></li><li><p>添加 jdbc.properties</p></li><li><p>添加 SqlMapConfig.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 获取资源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注册实体类别名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;github.wataaaame.bean&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置环境变量 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注册 Mapper 文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;mapper class=&quot;github.wataaaame.mapper.UserMapper&quot;&gt;&lt;/mapper&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!-- 批量注册 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;github.wataaaame.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加实体类</p></li><li><p>添加 mapper 文件夹，新建 UserMapper 接口与 xml 文件，完成增删改查 sql</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.mapper;<br><br><span class="hljs-keyword">import</span> github.wataaaame.bean.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据访问层的接口，规定的数据库中可进行的各种操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">// 查询全部用户信息</span><br>    List&lt;User&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// 根据 id 查信息</span><br>    User <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br>    <span class="hljs-comment">// 根据用户名模糊查询</span><br>    List&lt;User&gt; <span class="hljs-title function_">getByName</span><span class="hljs-params">(String username)</span>;<br><br>    <span class="hljs-comment">// 更新用户信息</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">// 增加用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;<br><br>    <span class="hljs-comment">// 根据 id 删除用户</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;github.wataaaame.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 查询全部用户信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select id, username, birthday, sex, address from user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据 id 查信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select id, username, birthday, sex, address from user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据用户名模糊查询 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select id, username, birthday, sex, address from user<br>        where username like &#x27;%$&#123;username&#125;%&#x27;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 更新用户信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        update user set username=#&#123;username&#125;, birthday=#&#123;birthday&#125;, sex=#&#123;sex&#125;, address=#&#123;address&#125;<br>        where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 增加用户 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        insert into user(username, birthday, sex, address) values(#&#123;username&#125;, #&#123;birthday&#125;, #&#123;sex&#125;, #&#123;address&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据 id 删除用户 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from user where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加测试类，测试功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> github.wataaaame.test;<br><br><span class="hljs-keyword">import</span> github.wataaaame.bean.User;<br><span class="hljs-keyword">import</span> github.wataaaame.mapper.UserMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> org.junit.After;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-keyword">private</span> SqlSession sqlSession;<br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">openSqlSession</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        sqlSession = factory.openSession();<br>        <span class="hljs-comment">// 取出动态代理对象，完成接口中方法的调用，实则调用 xml 文件中相应的标签功能</span><br>        userMapper = sqlSession.getMapper(UserMapper.class);<br>    &#125;<br><br>    <span class="hljs-meta">@After</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeSqlSession</span><span class="hljs-params">()</span> &#123;<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">// 查询全部用户信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAll</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">// 就是调用接口的方法，MyBaits 已经将功能代理出来了</span><br>        List&lt;User&gt; userList = userMapper.getAll();<br>        userList.forEach(user -&gt; System.out.println(user));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">// 根据 id 查信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getById(<span class="hljs-number">101</span>);<br>        System.out.println(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">// 根据用户名模糊查询</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetByName</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; userList = userMapper.getByName(<span class="hljs-string">&quot;王&quot;</span>);<br>        userList.forEach(user -&gt; System.out.println(user));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">// 更新用户信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userMapper.update(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">106</span>, <span class="hljs-string">&quot;王华&quot;</span>, sdf.parse(<span class="hljs-string">&quot;1999-08-31&quot;</span>), <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&quot;河南&quot;</span>));<br>        sqlSession.commit();<br>        System.out.println(count + <span class="hljs-string">&quot; has done&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">// 增加用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userMapper.insert(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;宝岛&quot;</span>, sdf.parse(<span class="hljs-string">&quot;1999-08-31&quot;</span>), <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&quot;台北二路&quot;</span>));<br>        sqlSession.commit();<br>        System.out.println(count + <span class="hljs-string">&quot; row has done!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">// 根据 id 删除用户</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userMapper.delete(<span class="hljs-number">108</span>);<br>        sqlSession.commit();<br>        System.out.println(count + <span class="hljs-string">&quot; row has done!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="与"><a href="#与" class="headerlink" title="#{} 与 ${}"></a>#{} 与 ${}</h3><p>#{}：对非字符串拼接参数的占位符，底层是 PreparedStatement（防止 sql 注入）</p><ul><li>如果是简单数据类型，内容可任意写</li><li>如果是对象类型，内容必须为成员变量名</li></ul><p>${}：字符串拼接替换，底层是 Statement（sql 注入风险）</p><ul><li>如果是简单数据类型，内容可任意写（3.5.1 以下版本只能写 value）</li><li>如果是对象类型，内容必须为成员变量名</li><li>可<strong>替换列名和表名</strong></li></ul><h4 id="模糊查询优化"><a href="#模糊查询优化" class="headerlink" title="模糊查询优化"></a>模糊查询优化</h4><p>使用 concat() 拼接字符串，参数便可使用 #{}</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 优化后的模糊查询 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getByName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select id, username, birthday, sex, address from user<br>    where username like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="返回主键代码"><a href="#返回主键代码" class="headerlink" title="返回主键代码"></a>返回主键代码</h3><p>返回上次插入的主键 id 的 sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select last_insert_id();<br></code></pre></td></tr></table></figure><p>在插入语句结束后，返回自增的主键值 id 到入参的 user 对象</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// insert 后返回主键 id</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertGetId</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- insert 后返回主键 id --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertGetId&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;AFTER&quot;</span>&gt;</span><br>        select last_insert_id()<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span><br>    insert into user(username, birthday, sex, address)<br>    values(#&#123;username&#125;, #&#123;birthday&#125;, #&#123;sex&#125;, #&#123;address&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>keyProperty：user 对象接收返回主键值的属性</p></li><li><p>resultType：返回的主键类型</p></li><li><p>order：在插入语句执行 前&#x2F;后 执行</p></li></ul><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// insert 后返回主键 id</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertGetId</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;半藏&quot;</span>, sdf.parse(<span class="hljs-string">&quot;1984-04-23&quot;</span>), <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&quot;Mar&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userMapper.insertGetId(user);<br>    System.out.println(count + <span class="hljs-string">&quot; row has done!&quot;</span>);<br>    sqlSession.commit();<br><br>    System.out.println(user);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    User&#123;id=110, username=&#x27;半藏&#x27;, birthday=Mon Apr 23 00:00:00 CST 1984, sex=1, address=&#x27;unknown&#x27;&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>全球唯一字符串，由 36 个字母数字中划线组成，应对多库多表自增 id 时的重复问题</p><p>Java 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// UUID</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUUDI</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(UUID.randomUUID());<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">6be3630d-bcb1-41bd-a3ea-94313e1b1de9</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>sql 中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select uudi()<br></code></pre></td></tr></table></figure><h2 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="*动态 SQL"></a>*动态 SQL</h2><p>可以定义代码片段，进行逻辑判断、循环处理（批量处理），使条件判断更为简单</p><h3 id="sql-标签"><a href="#sql-标签" class="headerlink" title="sql 标签"></a>sql 标签</h3><p>用来定义代码片段，可以将所有的列名或复杂的条件定义为代码片段，供使用时调用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 定义代码片段 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;allColumn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;allColumn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="include-标签"><a href="#include-标签" class="headerlink" title="include 标签"></a>include 标签</h3><p>用来引用 sql 定义的代码片段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 查询全部用户信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;allColumn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from user;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="if-标签"><a href="#if-标签" class="headerlink" title="if 标签"></a>if 标签</h3><p>进行条件判断</p><p>where：多条件拼接，在查询、删除、更新中使用</p><p>第一个 and 会自动删除</p><p><strong>Example：</strong>多条件查询：根据多条件查询用户的所有信息</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 按指定条件进行多条件查询</span><br>List&lt;User&gt; <span class="hljs-title function_">getByCondition</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 按指定条件进行多条件查询 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getByCondition&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;allColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    from user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username!=null and username!=&#x27;&#x27;&quot;</span>&gt;</span><br>            and username like concat(&#x27;%&#x27;, #&#123;username&#125;, &#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;birthday != null&quot;</span>&gt;</span><br>            and birthday = #&#123;birthday&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex!=null and sex!=&#x27;&#x27;&quot;</span>&gt;</span><br>            and sex = #&#123;sex&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;address!=null and address!=&#x27;&#x27;&quot;</span>&gt;</span><br>            and address = #&#123;address&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 按指定条件进行多条件查询</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetByCondition</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    u.setUsername(<span class="hljs-string">&quot;王&quot;</span>);<br>    <span class="hljs-comment">//        u.setBirthday(sdf.parse(&quot;1994-08-21&quot;));</span><br>    u.setSex(<span class="hljs-string">&#x27;1&#x27;</span>);<br>    u.setAddress(<span class="hljs-string">&quot;河南&quot;</span>);<br>    List&lt;User&gt; userList = userMapper.getByCondition(u);<br>    userList.forEach(user -&gt; System.out.println(user));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="set-标签"><a href="#set-标签" class="headerlink" title="set 标签"></a>set 标签</h3><p>有选择地更新</p><p>至少更新一列，否则提交报错</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 有选择地更新</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">updateBySet</span><span class="hljs-params">(User user)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 有选择地更新 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBySet&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    update user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username!=null and username!=&#x27;&#x27;&quot;</span>&gt;</span><br>            username = #&#123;username&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;birthday!=null&quot;</span>&gt;</span><br>            birthday = #&#123;birthday&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex!=null and sex!=&#x27;&#x27;&quot;</span>&gt;</span><br>            sex = #&#123;sex&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;address!=null and address!=&#x27;&#x27;&quot;</span>&gt;</span><br>            address = #&#123;address&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 有选择地更新</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateBySet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setId(<span class="hljs-number">110</span>);<br>    user.setAddress(<span class="hljs-string">&quot;齐齐哈尔&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userMapper.updateBySet(user);<br>    sqlSession.commit();<br>    System.out.println(count + <span class="hljs-string">&quot; row has done!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="forEach-标签"><a href="#forEach-标签" class="headerlink" title="forEach 标签"></a>forEach 标签</h3><p>用于循环遍历，完成循环 <strong>条件查询</strong>&#x2F;<strong>批量删除</strong>&#x2F;批量增加&#x2F;批量更新）</p><p>参数详解：</p><ul><li>collection：指定入参类型（小写表示），常见的有：list 集合、map 集合、array 数组</li><li>item：每次循环遍历出来的值或对象</li><li>separator：多个值或对象或语句之间的分隔符</li><li>open：整个循环外面的前括号</li><li>close：整个循环外面的后括号</li></ul><p><strong>Example 1</strong>：查询多个指定 id 的用户信息</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询多个指定 id 的用户信息</span><br>List&lt;User&gt; <span class="hljs-title function_">getByIds</span><span class="hljs-params">(Integer[] array)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 查询多个指定 id 的用户信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getByIds&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;allColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    from user<br>    where id in <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;array&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 查询多个指定 id 的用户信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetByIds</span><span class="hljs-params">()</span> &#123;<br>    List&lt;User&gt; userList = userMapper.getByIds(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[] &#123;<span class="hljs-number">101</span>, <span class="hljs-number">102</span>&#125;);<br>    userList.forEach(user -&gt; System.out.println(user));<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Example 2</strong>：实现批量删除</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现批量删除</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteBatch</span><span class="hljs-params">(Integer[] array)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 实现批量删除 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteBatch&quot;</span>&gt;</span><br>    delete from user<br>    where id in <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;array&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 实现批量删除</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteBatch</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userMapper.deleteBatch(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[] &#123;<span class="hljs-number">109</span>, <span class="hljs-number">110</span>&#125;);<br>    sqlSession.commit();<br>    System.out.println(count + <span class="hljs-string">&quot; rows has done!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Example 3</strong>：批量增加</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 批量增加</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">insertBatch</span><span class="hljs-params">(List&lt;User&gt; userList)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 批量增加 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatch&quot;</span>&gt;</span><br>    insert into user(username, birthday, sex, address)<br>    values <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>    (#&#123;user.username&#125;, #&#123;user.birthday&#125;, #&#123;user.sex&#125;, #&#123;user.address&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 批量增加</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertBatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>    List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;吕晓明&quot;</span>, sdf.parse(<span class="hljs-string">&quot;1985-05-17&quot;</span>), <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&quot;上海&quot;</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;简妈&quot;</span>, sdf.parse(<span class="hljs-string">&quot;1994-02-19&quot;</span>), <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&quot;广东&quot;</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;玛雅拉&quot;</span>, sdf.parse(<span class="hljs-string">&quot;1996-03-01&quot;</span>), <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&quot;广东&quot;</span>));<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userMapper.insertBatch(userList);<br>    sqlSession.commit();<br>    System.out.println(<span class="hljs-string">&quot;=======&quot;</span> + count + <span class="hljs-string">&quot; rows has done! =======&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Example 4</strong>：批量更新</p><p>*<strong>若要使用批量更新，必须在 <code>jdbc.properties</code> 中的 url 下添加 <code>&amp;allowMultiQueries=true</code> 选项</strong></p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 批量更新</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">updateBatch</span><span class="hljs-params">(List&lt;User&gt; userList)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 批量更新 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBatch&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;;&quot;</span>&gt;</span><br>        update user<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;user.username!=null and user.username!=&#x27;&#x27;&quot;</span>&gt;</span><br>                username = #&#123;user.username&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;user.birthday != null&quot;</span>&gt;</span><br>                birthday = #&#123;user.birthday&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;user.sex!=null and user.sex!=&#x27;&#x27;&quot;</span>&gt;</span><br>                sex = #&#123;user.sex&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;user.address!=null and user.address!=&#x27;&#x27;&quot;</span>&gt;</span><br>                address = #&#123;user.address&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id = #&#123;user.id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 批量更新</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateBatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>    List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">111</span>, <span class="hljs-string">&quot;派克&quot;</span>, sdf.parse(<span class="hljs-string">&quot;1999-09-02&quot;</span>), <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&quot;比尔吉沃特&quot;</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">112</span>, <span class="hljs-string">&quot;卡密尔&quot;</span>, sdf.parse(<span class="hljs-string">&quot;1840-03-05&quot;</span>), <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&quot;皮城&quot;</span>));<br>    userList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">113</span>, <span class="hljs-string">&quot;艾瑞利亚&quot;</span>, sdf.parse(<span class="hljs-string">&quot;1956-05-24&quot;</span>), <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&quot;艾欧尼亚&quot;</span>));<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> userMapper.updateBatch(userList);<br>    sqlSession.commit();<br>    System.out.println(<span class="hljs-string">&quot;====&quot;</span> + count + <span class="hljs-string">&quot; rows has done ====&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指定参数名称"><a href="#指定参数名称" class="headerlink" title="指定参数名称"></a><em>指定参数名称</em></h3><p>通过 <code>@Param</code> 注解指定参数名称</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 替换列名查询</span><br><span class="hljs-comment">// 使用注解传参</span><br>List&lt;User&gt; <span class="hljs-title function_">getByNameOrAddress</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@Param(&quot;columnName&quot;)</span></span><br><span class="hljs-params">        String columnName,</span><br><span class="hljs-params">        <span class="hljs-meta">@Param(&quot;columnValue&quot;)</span></span><br><span class="hljs-params">        String columnValue</span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 替换列名查询 --&gt;</span><br><span class="hljs-comment">&lt;!-- 若传入参数超过一个则不写，使用注解传递 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getByNameOrAddress&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select id, username, birthday, sex, address<br>    from user<br>    where $&#123;columnName&#125; like concat(&#x27;%&#x27;, #&#123;columnValue&#125;, &#x27;%&#x27;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 替换列名查询</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetByNameOrAddress</span><span class="hljs-params">()</span> &#123;<br>    List&lt;User&gt; userList = userMapper.getByNameOrAddress(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;王&quot;</span>);<br>    userList.forEach(user -&gt; System.out.println(user));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指定参数位置"><a href="#指定参数位置" class="headerlink" title="指定参数位置"></a><em>指定参数位置</em></h3><p>如果入参是多个，可以通过指定参数位置进行传参</p><p>实体类只能封装住成员变量的条件，如果某个成员变量需要区间范围内的判断（如日期），则实体类包不住</p><p>通过 <code>#&#123;arg0&#125;</code> 指定下标为 0 的元素，虽然可用，但语义不明确</p><p><strong>Example</strong>：查询指定日期范围内的用户信息</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 查询指定日期范围内的用户信息</span><br>List&lt;User&gt; <span class="hljs-title function_">getByBirthdayRange</span><span class="hljs-params">(Date begin, Date end)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 查询指定日期范围内的用户信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getByBirthdayRange&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;allColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    from user<br>    where birthday between #&#123;arg0&#125; and #&#123;arg1&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 查询指定日期范围内的用户信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetByBirthdayRange</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>    List&lt;User&gt; userList = userMapper.getByBirthdayRange(<br>        sdf.parse(<span class="hljs-string">&quot;2000-01-01&quot;</span>), sdf.parse(<span class="hljs-string">&quot;2003-01-01&quot;</span>));<br>    userList.forEach(user -&gt; System.out.println(user));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="入参是-Map"><a href="#入参是-Map" class="headerlink" title="*入参是 Map"></a>*入参是 Map</h3><p>如果入参超过一个以上，使用 Map 封装查询条件更有语义</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过 Map 入参</span><br>List&lt;User&gt; <span class="hljs-title function_">getByMap</span><span class="hljs-params">(Map map)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 通过 Map 入参 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;allColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    from user<br>    where birthday between #&#123;birthdayBegin&#125; and #&#123;birthdayEnd&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 通过 Map 入参</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetByMap</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>    Map&lt;String, Date&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;birthdayBegin&quot;</span>, sdf.parse(<span class="hljs-string">&quot;2000-01-01&quot;</span>));<br>    map.put(<span class="hljs-string">&quot;birthdayEnd&quot;</span>, sdf.parse(<span class="hljs-string">&quot;2003-01-01&quot;</span>));<br>    List&lt;User&gt; userList = userMapper.getByMap(map);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反回值是-Map"><a href="#反回值是-Map" class="headerlink" title="反回值是 Map"></a>反回值是 Map</h3><p>如果返回的数据实体类无法包含，可以使用 Map 返回多张表的若干数据</p><p>返回后这些数据之间没有任何关系，就是 Object 数据类型</p><p><strong>Example 1</strong>：返回一行 Map</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回 Map</span><br>Map <span class="hljs-title function_">getReturnMap</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 返回 Map --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getReturnMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select username, address<br>    from user<br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 返回 Map</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetReturnMap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> userMapper.getReturnMap(<span class="hljs-number">102</span>);<br>    <span class="hljs-comment">// Key 值为列名或别名</span><br>    System.out.println(map.get(<span class="hljs-string">&quot;address&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Example 2</strong>：返回多行 Map</p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 返回多行 Map</span><br>List&lt;Map&gt; <span class="hljs-title function_">getMulMap</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 返回多行 Map --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getMulMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    select username, address<br>    from user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 返回多行 Map</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetMulMap</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Map&gt; mapList = userMapper.getMulMap();<br>    mapList.forEach(map -&gt; System.out.println(map));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实体类与列名不一致"><a href="#实体类与列名不一致" class="headerlink" title="实体类与列名不一致"></a>实体类与列名不一致</h3><p>实体类属性与数据库表对应列名不一致时的解决方法</p><ol><li><p>使用别名</p><p>将表列名的别名设置为实体类对应的属性</p></li><li><p>使用 resultMap 手工完成映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookmap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 主键映射 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">properties</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;bookid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 非主键映射 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">properties</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">colum</span>=<span class="hljs-string">&quot;bookname&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;bookMap&quot;</span>&gt;</span><br>select bookid, bookname<br>    from book<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="表的关联关系"><a href="#表的关联关系" class="headerlink" title="表的关联关系"></a>表的关联关系</h2><p>关联关系有四个方向：</p><ol><li><p>一对多关联</p><p>客户对订单</p><p>对于实体类属性含有另一个实体类，也需要使用 resultMap 进行手工映射</p><ul><li>使用左外连接，即使没有订单也能查到用户信息</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;customermap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;customer&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 主键绑定 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 非主键绑定 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 实体类绑定为集合（属性名称和泛型类型）（使用 ofType） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ordersList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;orders&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 主键绑定 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;oid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 非主键绑定 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderNumber&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;orderNumber&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderPrice&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;orderPrice&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;customermap&quot;</span>&gt;</span><br>select c.id cid, name, age, o.id oid, orderNumber, orderPrice, customer_id<br>    from customer c left join orders o on c.id = o.customer_id<br>    where c.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>多对一关联</p><p>订单对客户</p><p>使用 resultMap 映射，且 inner join 足矣</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ordersmap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;orders&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;oid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;oid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderNumber&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;orderNumber&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderPrice&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;orderPrice&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 绑定为一个实体类（使用 javaType） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customer&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;customer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>&gt;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;ordersmap&quot;</span>&gt;</span><br>    select o.id oid, orderNumber, orderPrice, customer_id, c.id cid, name, age<br>    from order o inner join customer c on o.customer_id = c.id<br>    where o.id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一对一关联</p><p>直接使用 assosiation 映射即可</p></li><li><p>多对多关联</p><p>使用中间表描述多对多表中的主键关系</p></li></ol><p>总结：无论是什么关联关系，如果某方持有另一方的集合，则使用 collection 标签完成映射；如果某方持有另一方对象，则使用 association 标签完成映射</p><ul><li><p>collection 与 association 可相互嵌套</p></li><li><p>标签中可以使用 select 进行导包 id 查询，通过 column 名传递入参</p><p>这种解决方案不需要做表关联查询</p><p>一对多优化：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;customermap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;customer&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- column 是当前客户表 id，传给嵌套查询作为入参进行查询，返回该客户名下的所有订单集合 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;ordersList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;github.wataaaame.demo.mapper.OrderMapper.getOrderByCustomerId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;customermap&quot;</span>&gt;</span><br>select * from customer where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a><em>事务</em></h2><p>多个操作同时完成或同时失败成为事务管理</p><p>事务有四个特性：一致性、持久性、原子性、隔离性</p><p>在 SqlMapConfig.xml中设置事务：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 程序员自己控制事务的提交和回滚 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 Test.java 中可设置为自动提交：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置为自动提交</span><br>sqlSession = factory.openSession(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><ul><li>默认手工提交</li></ul><h2 id="缓存（面试）"><a href="#缓存（面试）" class="headerlink" title="缓存（面试）"></a>缓存（面试）</h2><p>缓存是为了提高查询效率</p><p>MyBatis 框架提供两级缓存，一级缓存和二级缓存，<strong>默认开启一级缓存</strong></p><p>使用缓存后查询流程：</p><ul><li>查询时先到缓存中查，若没有则查询数据库，然后放缓存一份，再返回给客户端</li><li>下次查询时直接从缓存中返回，不再访问数据库</li><li>如果数据库发生 commit() 操作则清空缓存</li></ul><p>一级缓存：使用 SqlSession 作用域，同一个 SqlSession 共享一级缓存</p><p>二级缓存：使用 Mapper 作用域，不同 SqlSession 访问同一个 Mapper 文件则共享二级缓存作用域</p><ol><li><p>在 SQLMapConfig.xml 中加入设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 开启二级缓存 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">setting</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 UserMapper.xml 中开启二级缓存（使用 cache 标签）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;github.wataaaame.demo.mapper.UserMapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cache</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>实体类必须实现 java.io.serializable 接口，保证实体可序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="ORM-映射"><a href="#ORM-映射" class="headerlink" title="ORM 映射"></a>ORM 映射</h2><p>ORM（Object Relational Mapping）：对象关系映射</p><p>MyBatis 框架是 ORM 持久化优秀的框架</p><p>Java 语言中以对象的方式操作数据，存到数据库中是以表的方式进行存储，对象中的成员变量与表中的列之间的数据互换称为映射，整个操作称为 ORM</p><p>持久化操作：将对象保存到关系数据库中，将关系型数据库中的数据读取出来以对象形式封装</p><h2 id="源码追踪"><a href="#源码追踪" class="headerlink" title="源码追踪"></a>源码追踪</h2><p>注册 Mapper 优先级：package &gt; resource &gt; url &gt; class</p><p>alt + 7：列出本接口或类中的全部成员（成员方法和成员变量）</p><p>ctrl + h：列出本接口的实现类，或本类的所有子类，改变按钮可以得到父接口和父类</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h2><p>类型别名是为 Java 类型命名一个短的名字，只和 XML 配置有关，只用来减少类完全限定名的多余部分</p><table><thead><tr><th>别名</th><th>映射</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>decimal</td><td>BigDecimal</td></tr><tr><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>object</td><td>Object</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashmap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr><tr><td>collection</td><td>Collection</td></tr><tr><td>iterator</td><td>Iterator</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dynamic Proxy</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM - Note01 Maven</title>
    <link href="/2022/08/19/SSM%20-%20Note01%20Maven/"/>
    <url>/2022/08/19/SSM%20-%20Note01%20Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>Apache 软件基金会组织维护的一款自动化构建工具，专注服务于 Java 平台的项目构建和依赖管理，具有以下功能：</p><ol><li>管理 jar 文件</li><li>自动下载 jar 和 doc、src 源代码</li><li>管理 jar 的直接依赖（若 a 需要 b，则自动下载 b）</li><li>管理需要的 jar 版本</li><li>把 java 编译为 class</li><li>测试程序代码</li><li>打包为 jar&#x2F;war 文件</li><li>部署项目</li></ol><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>构建是面向过程的，完成项目代码的编译、测试、运行、打包、部署等</p><p>Maven 支持的构建包括：</p><ol><li><p>清理：把之前项目编译的东西删除，为新的编译代码做准备</p></li><li><p>编译：把程序源代码批量编译为可执行代码</p></li><li><p>测试：批量测试程序代码，可以同时测试多个功能</p></li><li><p>报告：生成测试结果文件</p></li><li><p>打包：把项目中所有的 class、配置等所有资源放到一个压缩文件中，这个压缩文件就是项目的结果文件</p><blockquote><p>通常 Java 程序，压缩文件扩展名为 jar</p><p>web 应用，压缩文件扩展名为 war</p></blockquote></li><li><p>安装：将打包生成的 jar&#x2F;war 安装到本机仓库</p></li><li><p>部署：把程序安装好后执行</p></li></ol><h2 id="第一次使用"><a href="#第一次使用" class="headerlink" title="第一次使用"></a>第一次使用</h2><h3 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h3><ol><li><p>从 Maven 官网下载 Maven 安装包：<a href="https://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/">apache-maven-3.3.9-bin.zip</a></p></li><li><p>解压安装包到非中文目录</p><p>bin：Maven 执行程序，主要使用 mvn.cmd</p><p>conf：Maven 配置文件（settings.xml）</p></li><li><p>配置环境变量</p><p>在环境变量中，指定 M2_HOME 值为 Maven 安装目录</p><p>将 <code>%M2_HOME%\bin</code> 添加到 path 环境变量中</p></li><li><p>验证安装，执行 <code>mvn -v</code></p></li></ol><h4 id="国内镜像源"><a href="#国内镜像源" class="headerlink" title="国内镜像源"></a>国内镜像源</h4><p>Maven 执行需下载很多 jar 包，可以配置国内镜像源</p><p>打开：<code>[Maven安装目录]/conf/settings.xml</code></p><p>在 mirror 节点中添加以下内容（包括 mirror 标签）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>huaweicloud<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://repo.huaweicloud.com/repository/maven/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="本机仓库目录"><a href="#本机仓库目录" class="headerlink" title="本机仓库目录"></a>本机仓库目录</h4><p>设置本机存储 jar 包目录</p><p>打开：<code>[Maven安装目录]/conf/settings.xml</code></p><p>修改 <code>settings标签 - localRepository</code> 来指定目录（勿使用中文）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>/path/to/local/repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><ol><li><p>在 project&#x2F;src&#x2F;main&#x2F;java 中编写 Java 程序</p></li><li><p>在 project 下配置 pom.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apche.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.wataaaame.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>命令行项目路径下运行 <code>mvn compile</code> 指令，编译所有 main 下的 java 代码</p><p>Maven 工具执行操作需要下载很多插件，执行该指令后会下载需要的 jar 包到以下目录：<code>C:\Users\[name]\.m2\repository</code></p><p>出现 <code>[INFO] BUILD SUCCESS</code> 代表完成，会在项目根目录下生成一个 <code>target</code> 结果目录</p><blockquote><p>[ERROR] 不再支持源选项 5。请使用 7 或更高版本。</p><ul><li><p><strong>方法一</strong></p><p>在项目 pom.xml 的 project 标签中插入以下配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>方法二</p><p>配置 <code>[Maven安装目录]/conf/settings.xml</code> 中的 profile 节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-13<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></blockquote></li></ol><h2 id="Maven-核心概念"><a href="#Maven-核心概念" class="headerlink" title="Maven 核心概念"></a>Maven 核心概念</h2><ol><li>POM：一个文件，名称是 <code>pom.xml</code>，pom 翻译过来叫做项目对象模型<ul><li>Maven 把一个项目当作一个模型使用</li><li>控制 Maven 构建项目过程，管理 jar 依赖</li></ul></li><li>约定的目录结构：Maven 项目的目录和文件位置都是固定的</li><li>坐标：唯一的字符串，用来表示资源</li><li>依赖管理：管理项目可使用的 jar 文件</li><li><em>仓库管理</em>：资源存放的位置</li><li><em>生命周期</em>：Maven 工具构建项目的过程</li><li><em>插件和目标</em>：执行 Maven 构建时用的工具是插件</li><li>继承</li><li>聚合</li></ol><h3 id="约定目录结构"><a href="#约定目录结构" class="headerlink" title="*约定目录结构"></a>*约定目录结构</h3><p>每一个 Maven 项目在磁盘中都是一个文件夹</p><p>目录结构：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">Project<br>|<span class="hljs-string">___ src# 源代码</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">___ main# 主程序和配置文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">    </span>|<span class="hljs-string">___ java# 程序包和包中的 Java 文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">    </span>|<span class="hljs-string">___ resources# 程序中使用的配置文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">___ test# 测试程序代码和文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">         </span>|<span class="hljs-string">___ java# 测试包 Java 文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">         </span>|<span class="hljs-string">___ resources# 测试配置文件</span><br><span class="hljs-string"></span>|<span class="hljs-string">___ pom.xml# Maven 核心文件</span><br></code></pre></td></tr></table></figure><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>仓库存放 Maven 和项目使用的 jar 包</p><p>仓库的分类：</p><ul><li>本地仓库：个人计算机上的文件夹，存放各种 jar</li><li>远程仓库：互联网上的仓库，使用互联网访问<ul><li>中央仓库：最权威的，所有开发人员共享使用的集中仓库</li><li>镜像仓库：中央仓库的备份，各大洲重要城市建立</li><li>私服仓库：一般在公司内部局域网中使用</li></ul></li></ul><p>Maven 的使用中不需要人为参与，调用顺序为：</p><p><code>本地仓库 -&gt; 私服仓库 -&gt; 镜像仓库 -&gt; 中央仓库</code></p><h3 id="pom"><a href="#pom" class="headerlink" title="*pom"></a>*pom</h3><p>即 Project Object Model 项目对象模型。Maven 把一个项目结构和内容抽象成一个模型，在 xml 文件中进行声明，以方便进行构建和描述</p><h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><table><thead><tr><th>tag</th><th>descript</th></tr></thead><tbody><tr><td>modelVersion</td><td>Maven 模型的版本，对于 Maven 2 和 3 来说，只能是 4.0.0</td></tr><tr><td><strong>groupId</strong></td><td>组织 id，一般是公司域名倒写，类似于 package 命名</td></tr><tr><td><strong>artifactId</strong></td><td>项目名称（模块名称），对应 groupId 中项目中的子项目</td></tr><tr><td><strong>version</strong></td><td>版本号，若项目还在开发中，为不稳定版本，通常版本号后带 “-SNAPSHOT-” 标识</td></tr><tr><td>packaging</td><td>项目打包类型，可使用 jar、war、rar、ear、pom，默认为 jar</td></tr></tbody></table><ul><li><p>groupId、artifactId、varsion 三个元素生成了一个 Maven 项目的基本坐标，在众多 Maven 项目中可以唯一定位到某一个项目</p><p>坐标也决定将来项目在仓库中的路径及名称</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.wataaaame.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><a href="www.mvnrepository.com">搜索中央仓库</a>：搜索使用的中央仓库，使用 groupId 或 artifactId 作为搜索条件，查找</p></li></ul><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><table><thead><tr><th>tag</th><th>descript</th></tr></thead><tbody><tr><td>dependencies 及子 dependency</td><td>管理其他 jar 包，这些 jar 就被称为依赖，通过坐标定位</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h4><table><thead><tr><th>tag</th><th>descript</th></tr></thead><tbody><tr><td>properties</td><td>定义配置属性</td></tr></tbody></table><ol><li><p>属性设置</p><p>properties 设置 Maven 的常用属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Maven 项目构建使用的是 UTF-8，避免中文乱码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 编译项目使用的 JDK 版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 运行项目使用的 JDK 版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>全局变量</p><p>properties 自定义属性：一般是用于定义依赖的版本号</p><ol><li>在 properties 通过自定义标签声明变量（标签名就是变量名）</li><li>在 pom.xml 中其他位置，使用 ${标签名} 使用变量的值</li></ol></li></ol><h4 id="构建（build）"><a href="#构建（build）" class="headerlink" title="构建（build）"></a>构建（build）</h4><table><thead><tr><th>tag</th><th>descript</th></tr></thead><tbody><tr><td>build</td><td>与构建相关的配置，配置插件</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 控制配置 Maven 构建项目的参数设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plusin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plusin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="资源插件"><a href="#资源插件" class="headerlink" title="资源插件"></a>资源插件</h5><p>没有使用 resources 时，编译默认会将 <code>src/main/resources</code> 下的文件编译到 <code>target/classes</code> 中，且对于 <code>src/main/java</code> 目录下的非 Java 文件不处理</p><p>若执行 Java 需要在 <code>target/classes</code> 目录中使用 <code>src/main/java</code> 中的非 Java 文件，需要添加以下 build 配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 所在的目录 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 包括目录下的 .properties, .xml --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><table><thead><tr><th>tag</th><th>descript</th></tr></thead><tbody><tr><td>parent</td><td>若多模块需声明相同配置，拥有类似 Java 继承机制，用 parent 声明要继承的父工程的 pom 配置</td></tr></tbody></table><h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><table><thead><tr><th>tag</th><th>descript</th></tr></thead><tbody><tr><td>modules</td><td>为了统一构建整个项目的所有模块，可以提供一个额外的模块，打包方式为 pom，在其中使用 modules 聚合的其他模块，这样即可通过本模块自动识别模块间的依赖关系来构建所有模块</td></tr></tbody></table><h3 id="坐标（gav）"><a href="#坐标（gav）" class="headerlink" title="*坐标（gav）"></a>*坐标（gav）</h3><p>Maven 把任何一个插件都作为仓库中的一个项目进行管理，用一组（三个）向量组成的坐标来表示，坐标在仓库中可以唯一定位一个 Maven 项目</p><p>groupId：组织名，通常是公司或组织域名倒序+项目名</p><p>artifactId：模块名，通常是工程名</p><p>version：版本号</p><ul><li>坐标决定项目在仓库中的路径</li><li>artifactId 和 version 决定 jar 包名</li></ul><h3 id="依赖（dependency）"><a href="#依赖（dependency）" class="headerlink" title="*依赖（dependency）"></a>*依赖（dependency）</h3><p>一个 Maven 项目正常运行需要其他项目的支持，Maven 会根据坐标自动到本地仓库中进行查找。对于程序员自己的 Maven 项目需要进行安装，才能保存到仓库中</p><blockquote><p>不用 Maven 时所有 jar 都不属于你，需要到各个地方下载拷贝</p><p>用了 Maven 所有 jar 包都是你的，想要谁，叫谁名字就行，maven 帮你下载</p></blockquote><p>pom.xml 加入依赖方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- log4j 日志依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 单元测试依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><p>使用 scope 表示依赖使用的范围（生效阶段）</p><table><thead><tr><th></th><th>compile（默认）</th><th>test（测试）</th><th>provided（提供者）</th></tr></thead><tbody><tr><td>主程序有效</td><td>是</td><td>否</td><td>是</td></tr><tr><td>测试程序有效</td><td>是</td><td>是</td><td>是</td></tr><tr><td>参与打包</td><td>是</td><td>否</td><td>否</td></tr><tr><td>参与部署</td><td>是</td><td>否</td><td>否</td></tr></tbody></table><h3 id="生命周期（lifecycle）"><a href="#生命周期（lifecycle）" class="headerlink" title="生命周期（lifecycle）"></a>生命周期（lifecycle）</h3><p>Maven 构建项目的过程：清理、编译、测试、报告、打包、安装、部署</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>独立使用，通过命令完成生命周期的执行</p><p>Maven 的命令对应着生命周期的各个阶段，执行命令需进入 pom.xml 所在目录，命令如下：</p><ol><li><p><code>mvn clean</code>：清理（会<strong>删除原来编译和测试的目录</strong>（target 目录），已经 install 到仓库的包不会删除）</p></li><li><p><code>mvn compile</code>：编译主程序及配置文件（当前目录下生成 target，里面存放<strong>主程序</strong>生成的字节码文件）</p></li><li><p><code>mvn test-compile</code>：编译测试程序及配置文件（当前目录下生成 target，里面存放<strong>测试程序</strong>生成的字节码文件）</p></li><li><p><code>mvn test</code>：测试（生成一个目录 <strong>surefire-reports</strong> 保存测试结果）</p><p>用的是 junit，一个专门测试的框架（工具）</p><p>junit 测试内容：类中的方法，每一个方法都是独立测试的（方法是测试的基本单元，Maven 借助单元测试批量测试类中的大量方法是否符合预期）</p><p>使用步骤：</p><ol><li><p>引用坐标，在 pom.xml 中配置依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 单元测试依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 Maven 项目中的 <code>src/test/java</code> 目录下创建测试程序</p><p>包名保持一致</p><ul><li><p>测试类：</p><p>推荐名称：<code>Test[ClassName]</code></p></li><li><p>测试方法：</p><ol><li>public 方法</li><li>没有返回值</li><li>推荐名称：<code>test[MethodName]</code></li><li>注解：@Test</li></ol></li></ul></li></ol></li><li><p><code>mvn package</code>：打包主程序（编译、编译测试、测试，并按照 pom.xml 配置把主程序打包<strong>生成 jar&#x2F;war 包</strong>）</p></li><li><p><code>mvn install</code>：安装主程序（工程打包，<strong>按照坐标保存到本地仓库</strong>）</p></li><li><p><code>mvn deploy</code>：部署主程序（工程打包，按照坐标保存到本地仓库、<strong>私服仓库，自动部署到 web 容器中</strong>）</p></li></ol><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>Maven 命令执行时，真正完成功能的是插件（插件就是一些 jar 文件）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 控制配置 Maven 构建项目的参数设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置具体插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plusin</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 插件组织名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 插件项目名 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 插件版本 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 插件的配置信息 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 程序编译于 jdk13 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 程序运行在 jdk13 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plusin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="在-IDEA-中使用"><a href="#在-IDEA-中使用" class="headerlink" title="在 IDEA 中使用"></a>在 IDEA 中使用</h2><p>IDEA 中内置了一个 Maven，一般不使用，因为修改配置不方便</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用自己的 Maven，需要覆盖 IDEA 中的默认设置、修改指定 Maven 路径等</p><ol><li><p>修改 Settings</p><p>修改当前 Project 配置</p><ol><li><p>点击 <code>File -&gt; Settings -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Maven</code></p><ul><li>Maven Home directory：Maven 安装目录</li><li>User settings file：Maven 安装目录下的 conf&#x2F;settings.xml 配置文件</li><li>Local repository：本机仓库目录路径</li></ul></li><li><p>点击 <code>Maven -&gt; Runner</code></p><ul><li><p>VM Options：填写 <code>-DarchetypeCatalog=internal</code></p><p>避免联网下载模板文件，增加 Maven 项目创建速度</p></li><li><p>JRE：选择自己的 JDK 版本</p></li></ul></li></ol></li><li><p>修改 Other Settings</p><p>修改以后新建 Project 配置</p><p>点击 <code>File -&gt; Other Settings -&gt; Settings for New Projects</code>，其余与 Settings 设置相同</p></li></ol><p>以后创建项目都是基于 Maven 的形式</p><h3 id="传统-Maven"><a href="#传统-Maven" class="headerlink" title="传统 Maven"></a>传统 Maven</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>创建普通 Java 项目</p><ol><li><p>新建一个空工程</p></li><li><p>新建 Module，类型选择 Maven</p><ul><li><p>Create from archetype：通过模板创建项目</p><p>勾选后选中：<code>org.apache.maven.archetypes:maven-archetype-quickstart</code> 以创建普通 Java 项目</p></li></ul></li><li><p>下一步</p><ul><li>Parent：父项目（暂无）</li></ul><p>输入项目名与项目路径</p></li><li><p>下一步</p><p>配置 groupId、artifactId、version 等相关配置信息</p></li><li><p>点击完成</p><p>弹出 <code>Maven project need to be imported</code>，点击 <code>Enable Auto-Import</code> 启用自动导入功能</p><blockquote><p>该选项在 pom 中改动后 IDEA 会自动刷新</p></blockquote></li></ol><p>由于快速创建模板默认无 resources 文件夹，可手动创建文件夹后，右键选择：<code>Mark Directory as -&gt; Resources Root</code>，即可设置为 Maven 规范中的资源文件夹（其他文件夹类型类似）</p><p>至此项目创建完成，pom 文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 项目坐标（gav） --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.wataaaame<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-test01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 生成网页时的名称和地址 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>maven-test01<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Maven 项目构建使用的是 UTF-8，避免中文乱码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 编译项目使用的 JDK 版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 运行项目使用的 JDK 版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 依赖 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 单元测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 自动生成，方便配置，若不需要可删除 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-site-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>主程序与测试程序中的 App&#x2F;AppTest 为自动生成的演示文件</p><ol><li><p>src&#x2F;main&#x2F;java package 中编写</p><p>HelloMaven.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloMaven</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HelloMaven</span> <span class="hljs-variable">hm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloMaven</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> hm.add(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>        System.out.println(<span class="hljs-string">&quot;a + b = &quot;</span> + res);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>点击方法旁绿色开始键执行该程序</p><p>点击类旁绿色开始键执行所有程序</p></li><li><p>src&#x2F;test&#x2F;java package 中编写</p><p>TestHelloMaven.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame;<br><br><span class="hljs-keyword">import</span> org.junit.Assert;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestHelloMaven</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;testAdd() executed!&quot;</span>);<br>        <span class="hljs-type">HelloMaven</span> <span class="hljs-variable">hm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloMaven</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> hm.add(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>        Assert.assertEquals(<span class="hljs-number">30</span>, res);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;testAdd2() executed!&quot;</span>);<br>        <span class="hljs-type">HelloMaven</span> <span class="hljs-variable">hm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloMaven</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> hm.add(<span class="hljs-number">30</span>, <span class="hljs-number">20</span>);<br>        Assert.assertEquals(<span class="hljs-number">50</span>, res);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>点击方法旁绿色开始键执行该测试</p><p>点击类旁绿色开始键执行所有测试</p></li><li><p>点击右侧 “Maven” 菜单栏，选中项目下的 Lifecycle，双击执行对应的生命周期方法</p><p>Plugins：对应的插件信息</p><p>Dependencies：pom.xml 中的依赖信息</p></li></ol><h3 id="webapp-Maven"><a href="#webapp-Maven" class="headerlink" title="webapp Maven"></a>webapp Maven</h3><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><p>创建 Web 项目：</p><ol><li><p>同普通项目，创建时模板选择：<code>org.apache.maven.archetypes:maven-archetype-webapp</code></p></li><li><p>更改目录结构</p><p>带星号表示需要手动创建</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">Project<br>|<span class="hljs-string">___ src</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">___ main</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">    </span>|<span class="hljs-string">___ *java# Sources Root</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">    </span>|<span class="hljs-string">___ *resources# Resources Root</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">    </span>|<span class="hljs-string">___ webapp</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">         </span>|<span class="hljs-string">___ WEB-INF</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">         </span>|<span class="hljs-string">    </span>|<span class="hljs-string">___ web.xml</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">         </span>|<span class="hljs-string">___ index.jsp</span><br><span class="hljs-string"></span>|<span class="hljs-string">    </span>|<span class="hljs-string">___ *test</span><br><span class="hljs-string"></span>|<span class="hljs-string">         </span>|<span class="hljs-string">___ *java# Test Source Root</span><br><span class="hljs-string"></span>|<span class="hljs-string">         </span>|<span class="hljs-string">___ *resources# Test Resource Root</span><br><span class="hljs-string"></span>|<span class="hljs-string">___ pom.xml</span><br></code></pre></td></tr></table></figure></li></ol><p>pom.xml 文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.wataaaame<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven02-webapp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- web 项目是 war --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>maven02-webapp Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>maven02-webapp<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h4><p>web 项目运行无需添加 jar 包，直接在 pom.xml 中配置依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Tomcat 9 --&gt;</span><br><span class="hljs-comment">&lt;!-- Servlet 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- JSP 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>IDEA 可在 dependency 中 alt+insert 查找依赖并添加</p></blockquote><p>然后正常写 Servlet 代码即可</p><p>package 后的 war 文件可直接放在服务器的 webapps 下，服务器运行时会自动解压，并支持用户访问该 webapp</p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb - Note06 jQuery</title>
    <link href="/2022/08/17/JavaWeb%20-%20Note06%20jQuery/"/>
    <url>/2022/08/17/JavaWeb%20-%20Note06%20jQuery/</url>
    
    <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p>jQuery 是一款跨主流浏览器的 JavaScript 库，封装了 JavaScript 相关方法调用，简化 JavaScript 对 HTML DOM 操作</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载地址：<a href="https://jquery.com/download/">https://jquery.com/download/</a></p><p>文件名带 min 为压缩版（compressed），适合发布使用，相比原版，删去了空格与换行符等，以压缩体积</p><p>而原版（uncompressed）保留空格与换行符，代码可读性高，适合开发使用</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>将下载的文件复制到项目的 js 目录下</p></li><li><p>在 script 标签中指定 jQuery 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 指定 jQuery 路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.6.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用 jQuery 语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript">            1. $ 是 jQuery 中的函数名，document 是函数参数</span></span><br><span class="hljs-comment"><span class="language-javascript">                作用是将 document 对象编程 jQuery 函数库可使用的对象</span></span><br><span class="hljs-comment"><span class="language-javascript">            2. ready 是 jQuery 中的函数，是准备的意思</span></span><br><span class="hljs-comment"><span class="language-javascript">                当页面的 dom 对象加载成功后，会执行 ready 函数内容</span></span><br><span class="hljs-comment"><span class="language-javascript">                ready 相当于 js 中的 onLoad 事件</span></span><br><span class="hljs-comment"><span class="language-javascript">            3. function 函数表示 onLoad 后要执行的功能</span></span><br><span class="hljs-comment"><span class="language-javascript">        */</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 标准写法</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 与 $(), jQuery(), window.jQuery() 等价</span></span><br><span class="language-javascript">    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello jQuery&quot;</span>);</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 快速写法</span></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;quickly method&quot;</span>);</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="DOM-amp-jQuery"><a href="#DOM-amp-jQuery" class="headerlink" title="DOM &amp; jQuery"></a>DOM &amp; jQuery</h2><p>dom 对象：使用 javascript 语法创建的对象叫做 dom 对象（js 对象）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;text01&quot;</span>);<br></code></pre></td></tr></table></figure><p>jQuery 对象：使用 jQuery 语法表示的对象叫做 jQuery 对象（都是数组，存放的是 dom 对象）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> jobj = $(<span class="hljs-string">&quot;#text01&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>建议 jQuery 对象名以 $ 开头</li></ul><h3 id="互相转换"><a href="#互相转换" class="headerlink" title="互相转换"></a>互相转换</h3><p>dom -&gt; jQuery：<code>$([dom 对象])</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.6.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">btnClick</span>(<span class="hljs-params"></span>) &#123;        </span><br><span class="language-javascript">        <span class="hljs-comment">// 获取 dom 对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> obj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// dom 打印 value</span></span><br><span class="language-javascript">        <span class="hljs-comment">// alert(obj.value);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// dom 转换为 jquery 打印</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> jobj = $(obj);</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(jobj.<span class="hljs-title function_">val</span>());</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;btnClick()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;I&#x27;m btn&quot;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>jQuery -&gt; dom：从数组中获取第一个对象，使用 <code>[0]</code> 或 <code>get(0)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.6.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">calBtn</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 使用 jquery 获取 dom 对象</span></span><br><span class="language-javascript">        <span class="hljs-comment">// var jobj = $(&quot;#text&quot;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// jobj to obj</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> obj = $(<span class="hljs-string">&quot;#text&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">        <span class="hljs-comment">// 也可以使用 .get(0)</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> num = obj.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(num * num);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Caculate squere<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;input...&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;calBtn()&quot;</span>&gt;</span>Cal<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>就是定位条件，通知 jQuery 函数定位满足条件的 DOM 对象</p><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><ol><li><p>id 选择器：<code>$(&quot;#id&quot;)</code></p><p>id 在当前页面中是唯一值</p></li><li><p>class 选择器：<code>$(&quot;.class&quot;)</code></p><p>class 表示 css 中的样式</p></li><li><p>标签选择器：<code>$(&quot;tag&quot;)</code></p><p>使用标签名定位</p></li><li><p>所有选择器：<code>$(&quot;*&quot;)</code></p><p>选中所有标签</p></li><li><p>混合选择器：<code>$(&quot;#id, .class, tag&quot;)</code></p><p>混合使用选择器</p></li></ol><h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><p>使用 input 标签的 type 属性值定位 dom 对象的方式</p><p>该方法无论是否存在表单 form，均可做出选择</p><ul><li>根据元素类型定义，便于操作表单</li></ul><p>语法：<code>$(:&quot;type&quot;)</code></p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.6.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;:text&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#efefef&quot;</span>);</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>定位了 DOM 对象后，根据条件筛选对象</p><ul><li>过滤条件不能独立出现在 jQuery 函数中，只能出现在选择器后方</li></ul><blockquote><p>jQuery 对象中存储的 DOM 对象顺序与页面标签声明位置关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>dom1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>dom2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>dom3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>$(“div”) &#x3D;&#x3D; [dom1, dom2, dom3]</p></blockquote><h3 id="基本过滤器"><a href="#基本过滤器" class="headerlink" title="基本过滤器"></a>基本过滤器</h3><ol><li>选择第一个：<code>$(&quot;select:first&quot;)</code></li><li>选择最后一个：<code>$(&quot;select:last&quot;)</code></li><li>选择指定：<code>$(&quot;select:eq(index)&quot;)</code></li><li>选择小于索引：<code>$(&quot;select:lt(index)&quot;)</code></li><li>选择大于索引：<code>$(&quot;select:gt(index)&quot;)</code></li></ol><h3 id="表单属性过滤器"><a href="#表单属性过滤器" class="headerlink" title="表单属性过滤器"></a>表单属性过滤器</h3><p>根据表单中 dom 对象的状态情况，定位 dom 对象</p><ol><li><p>选择可用的文本框：<code>$(&quot;:text:enabled&quot;)</code></p></li><li><p>选择不可用的文本框：<code>$(&quot;:text:disabled&quot;)</code></p></li><li><p>复选框选中的元素：<code>$(&quot;:checkbox:checked&quot;)</code></p></li><li><p>选择指定下拉列表的被选中元素：<code>$(&quot;select&gt;option:selected </code></p><p><code>&gt;</code> 代表左父右子</p></li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="第一组"><a href="#第一组" class="headerlink" title="第一组"></a>第一组</h3><ol><li><p>val</p><p>操作数组中 DOM 对象的 value 属性</p><p><code>$(select).val()</code>：无参调用，读取数组中第一个 DOM 对象的 value 属性值</p><p><code>$(select).val(value)</code>：有参调用，对数组中所有 DOM 对象的 value 属性统一赋值</p></li><li><p>text</p><p>操作数组中所有 DOM 对象的文字显示内容属性</p><p><code>$(select).text()</code>：无参调用，读取数组中所有 DOM 对象的文字显示内容，并拼接字符串返回</p><p><code>$(select).text(value)</code>：有参调用，对数组中所有 DOM 对象的文字显示内容统一赋值</p></li><li><p>attr</p><p>对 val、text 之外的其他属性操作</p><p><code>$(select).attr(&quot;name&quot;)</code>：获取 DOM 数组第一个对象的属性值</p><p><code>$(select).attr(&quot;name&quot;, &quot;value&quot;)</code>：对数组中所有 DOM 对象的属性设为新值</p></li></ol><h3 id="第二组"><a href="#第二组" class="headerlink" title="第二组"></a>第二组</h3><ol><li><p>remove</p><p><code>$(select).remove()</code>：将数组中所有的 DOM 对象及其子对象一并删除</p></li><li><p>empty</p><p><code>$(select).empty()</code>：将数组中所有 DOM 对象的子对象删除</p></li><li><p>append</p><p><code>$(select).append(&quot;&lt;tag&gt;&lt;/tag&gt;&quot;)</code>：为数组中所有 DOM 对象添加子对象</p></li><li><p>html</p><p>设置或返回被选元素的内容（innerHTML）</p><p><code>$(select).html()</code>：无参调用，获取 DOM 数组<strong>第一个</strong>匹配的元素内容</p><p><code>$(select).html(value)</code>：有参调用，设置 DOM 数组中所有元素内容</p></li><li><p>each</p><p>对数组、json、dom 数组等的遍历，对每个元素调用一次函数</p><p><code>$.each(要遍历的对象, function(index, element) &#123;处理程序&#125;)</code></p><ul><li>index：数组下标 &#x2F; key</li><li>element：数组对象 &#x2F; value &#x2F; dom 对象</li></ul><p>由于 jQuery 对象就是一个数组，所以有以下形式：</p><p><code>[jQuery对象].each(function(index, element) &#123;处理程序&#125;)</code></p></li></ol><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>jQuery 中给 DOM 对象绑定事件</p><h3 id="定义元素监听事件"><a href="#定义元素监听事件" class="headerlink" title="定义元素监听事件"></a>定义元素监听事件</h3><p><code>$(&quot;select&quot;).监听名(处理函数)</code></p><p>监听名是 js 事件去掉 on 后的内容，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#button&quot;</span>).<span class="hljs-title function_">click</span>(fun);<br></code></pre></td></tr></table></figure><ul><li>其中，fun 可以声明为隐式，或在 js 中声明</li></ul><h3 id="on-绑定事件"><a href="#on-绑定事件" class="headerlink" title="on() 绑定事件"></a>on() 绑定事件</h3><p><code>$(select).on(event, function)</code></p><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>jQuery 简化了 AJAX 请求的处理，使用三个函数可以实现 AJAX</p><ol><li><p>$.ajax()</p><p>核心函数，获取 ajax</p></li><li><p>$.post(URL, data, function(resp), dataType)</p><p>使用 post 方式发送 ajax 请求</p></li><li><p>$.get(URL, data, function(resp), dataType)</p><p>使用 get 方式发送 ajax 请求</p></li></ol><blockquote><p>$.post() 与 $.get() 内部都是调用 $.ajax()</p></blockquote><h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax()"></a>ajax()</h3><p>使用函数的参数（json）表示 url、请求方式、参数值等信息</p><p>json 结构参数说明：</p><table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td><strong>url</strong></td><td>发送请求的 URL</td></tr><tr><td>type</td><td>请求类型（默认 GET）</td></tr><tr><td><strong>data</strong></td><td>规定发送到服务器的数据，可以是字符串、数组、json（多数情形）</td></tr><tr><td><strong>dataType</strong></td><td>期望从服务器响应的数据类型。<strong>xml</strong>（XML 文档）、<strong>html</strong>（纯文本）、<strong>text</strong>（纯文本字符串）、<strong>json</strong>（JSON 运行响应，以对象返回）</td></tr><tr><td>async</td><td>boolean，表示请求是否异步处理，默认 true</td></tr><tr><td>contentType</td><td>发送数据到服务器时所使用的内容类型（如 applicaion&#x2F;json），可省略</td></tr><tr><td><strong>success(resp)</strong></td><td>请求成功运行的函数，resp 为响应回的数据</td></tr><tr><td>error()</td><td>请求失败运行的函数</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb - Note05 AJAX</title>
    <link href="/2022/08/13/JavaWeb%20-%20Note05%20AJAX/"/>
    <url>/2022/08/13/JavaWeb%20-%20Note05%20AJAX/</url>
    
    <content type="html"><![CDATA[<p>传统请求有：地址栏输入 URL、点击超链接、提交 form 表单、使用 JS 代码四种</p><p>页面全部刷新导致用户体验较差，浏览器处理完才能显示后面的页面，有空档期</p><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>AJAX（Asynchronous Java and XML）可以在浏览器中发送异步请求，请求之间不需要等待，不会出现整个页面清空后再展示新页面的效果，类似于多线程开发</p><ul><li>并非一种技术，而是多种技术的综合产物</li><li>代码属于 WEB 前端代码，与后端无关</li><li>使用 XML&#x2F;JSON 传输数据</li><li>可以只更新网页部分内容，而不需要重新加载整个页面（局部刷新）</li><li>同一个网页中启动多个请求</li></ul><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>该对象是 AJAX 的核心对象，发送请求以及接受服务器数据的返回，现代浏览器支持，且内置该对象</p><p><img src="/images/image-javaweb/note05-01-AJAX%E5%8E%9F%E7%90%86.PNG" alt="AJAX原理"></p><p>创建对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">xhr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br></code></pre></td></tr></table></figure><p>对象方法</p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">abort()</td><td align="left">取消当前请求</td></tr><tr><td align="left">getAllResponseHeaders()</td><td align="left">返回头部信息</td></tr><tr><td align="left">getResponseHeader()</td><td align="left">返回特定的头部信息</td></tr><tr><td align="left"><strong>open(method, url, async, user, psw)</strong></td><td align="left">开启通道。请求参数 <strong>method</strong>：请求类型 GET 或 POST；<strong>url</strong>：文件位置；<strong>async</strong>：true（异步）或 false（同步）；<strong>user</strong>：可选的用户名称；<strong>psw</strong>：可选的密码（e.g.FTP 服务器）</td></tr><tr><td align="left"><strong>send()</strong></td><td align="left">将请求发送到服务器，用于 GET 请求</td></tr><tr><td align="left">send(<em>string</em>)</td><td align="left">将请求发送到服务器，用于 POST 请求</td></tr><tr><td align="left">setRequestHeader()</td><td align="left">向要发送的报头添加标签&#x2F;值对</td></tr></tbody></table><p>对象属性</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onreadystatechange</td><td align="left">定义当 readyState 属性发生变化时被调用的函数</td></tr><tr><td align="left"><strong>readyState</strong></td><td align="left">保存 XMLHttpRequest 的状态。<strong>0</strong>：请求未初始化；<strong>1</strong>：服务器连接已建立；<strong>2</strong>：请求已收到；<strong>3</strong>：正在处理请求；<strong>4</strong>：请求已完成且响应已就绪</td></tr><tr><td align="left">responseText</td><td align="left">以字符串返回响应数据</td></tr><tr><td align="left">responseXML</td><td align="left">以 XML 数据返回响应数据</td></tr><tr><td align="left">status</td><td align="left">返回请求的状态号。<strong>200</strong>：”OK”；<strong>403</strong>：”Forbidden”；<strong>404</strong>：”Not Found”</td></tr><tr><td align="left">statusText</td><td align="left">返回状态文本（比如 “OK” 或 “Not Found”）</td></tr></tbody></table><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>发送 AJAX get 请求</p><p>前端代码：</p><p>ajax01.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- First AJAX --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>AJAX GET<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 在函数中绑定鼠标单击事件</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myBtn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// console.log(&quot;Hello AJAX!!&quot;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 发送 AJAX GET 请求</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 1. 创建 AJAX 核心对象 XMLHttpRequest</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">// 2. 注册回调函数</span></span><br><span class="language-javascript">            xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// console.log(xhr.readyState);</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 响应状态为4，响应完毕后执行</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> == <span class="hljs-number">404</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-comment">// 若返回的状态号为404</span></span><br><span class="language-javascript">                        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Sorry, page not fount&quot;</span>);</span><br><span class="language-javascript">                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-comment">// 将响应信息放到 div 图层中渲染</span></span><br><span class="language-javascript">                        <span class="hljs-comment">// 此处的 this 为 xhr 对象</span></span><br><span class="language-javascript">                        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myDiv&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 3. 开启通道</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;/ajax01/ajaxrequest01&quot;</span>, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 4. 发送请求</span></span><br><span class="language-javascript">            xhr.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 给一个按钮，用户点击这个按钮时发送 get 请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hello ajax&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBtn&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 给一个 div 图层，ajax 接受到响应的数据之后，在 div 中进行渲染 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端代码：</p><p>AjaxRequest01Servlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javaweb.ajax.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-meta">@WebServlet(&quot;/ajaxrequest01&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AjaxRequest01Servlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br><br>        <span class="hljs-comment">// 响应代码相同，只不过不响应到页面，而是响应到 XmlHttpRequest 对象中</span><br>        out.println(<span class="hljs-string">&quot;You wiiiin!!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="提交数据"><a href="#提交数据" class="headerlink" title="提交数据"></a>提交数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- set value <span class="hljs-keyword">in</span> get request --&gt;<br><span class="hljs-comment">// 动态获取用户输入的 value</span><br><span class="hljs-keyword">var</span> username = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>).<span class="hljs-property">value</span>;<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;/ajax01/ajaxrequest02?username=&quot;</span>+username, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h3 id="GET-请求缓存问题"><a href="#GET-请求缓存问题" class="headerlink" title="GET 请求缓存问题"></a>GET 请求缓存问题</h3><p>HTTP 协议中规定 get 会被缓存起来（post 不会），直接从浏览器缓存中加载已获取过的资源，速度较快，用户体验好</p><p>但对于低版本的 IE 浏览器来说，AJAX 的 get 请求可能会走缓存，无法实时获取最新的服务器资源</p><p>解决方法：在请求路径后添加一个时间戳或随机数，如此请求的资源路径就各不相同，从而重新向浏览器发起请求</p><h2 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h2><p>发送 AJAX post 请求</p><p>仅前端代码有区别：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-string">&quot;/ajax01/AjaxRequest03Servlet&quot;</span>, <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// *模拟 form 表单，将 value 放到请求体中</span><br><span class="hljs-comment">// 固定写法，集成工具输入 &quot;&lt;form enctype&gt;&quot; 以自动提示</span><br>xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br><br><span class="hljs-comment">// 放在 send 形参中的数据会通过请求体提交</span><br><span class="hljs-comment">// 获取输入的 username 与 password</span><br><span class="hljs-keyword">var</span> username = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>).<span class="hljs-property">value</span>;<br><span class="hljs-keyword">var</span> password = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;password&quot;</span>).<span class="hljs-property">value</span>;<br><span class="hljs-comment">// 注意格式</span><br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;username=&quot;</span>+username+<span class="hljs-string">&quot;&amp;password=&quot;</span>+password);<br></code></pre></td></tr></table></figure><h3 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h3><p>使用 AJAX POST 请求检测用户注册时，用户名是否可用</p><ul><li><p>前端：用户输入用户名后，点击查询按钮，然后发送 AJAX POST 请求，提交 username</p></li><li><p>后端：接收到用户名，连接数据库，根据用户名去表中检索</p><p>若用户名存在：响应红色错误信息</p><p>若用户名不存在：响应绿色合法信息</p></li></ul><p>前端代码：</p><p>ex01.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Logon<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;checkUsernameBtn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">                xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">                            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;usernameCheckingResult&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>;</span><br><span class="language-javascript">                        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                            <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">statusText</span>);</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-string">&quot;/ex01/exRequest01Servlet&quot;</span>, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">                xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;content-type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="language-javascript">                xhr.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;username=&quot;</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>).<span class="hljs-property">value</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkUsernameBtn&quot;</span>&gt;</span>checking availability<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;usernameCheckingResult&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端代码：</p><p>exRequest01Servlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javaweb.ajax.web.action;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-meta">@WebServlet(&quot;/exRequest01Servlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exRequest01Servlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 默认用户名不存在</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">exist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 获取需要检查的 username</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br><br>        <span class="hljs-comment">// 连接数据库</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/learning&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;0.0&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select username from juser where username=?&quot;</span>;<br>            ps = conn.prepareStatement(sql);<br>            ps.setString(<span class="hljs-number">1</span>, username);<br>            rs = ps.executeQuery();<br>            exist = rs.next() ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    rs.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ps.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 响应结果到浏览器</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>        <span class="hljs-keyword">if</span> (exist) &#123;<br>            <span class="hljs-comment">// 若有同名，则返回错误信息</span><br>            out.println(<span class="hljs-string">&quot;&lt;text style=&#x27;color:red&#x27;&gt;Sorry, it&#x27;s exist&lt;/text&gt;&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            out.println(<span class="hljs-string">&quot;&lt;text style=&#x27;color:lightgreen&#x27;&gt;Great! It&#x27;s available&lt;/text&gt;&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据交换"><a href="#数据交换" class="headerlink" title="数据交换"></a>数据交换</h2><p>JSON 与 XML 都是常用的数据交换格式</p><p>JSON 体积小，解析简单，较常用</p><p>XML 体积大，解析麻烦，较少用</p><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>回顾 JavaScript JSON 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建 JSON 对象</span><br><span class="hljs-keyword">var</span> jsonobj = &#123;<br><span class="hljs-string">&quot;name1&quot;</span>: value1,<br>    <span class="hljs-string">&quot;name2&quot;</span>: value2<br>&#125;<br><br><span class="hljs-comment">// 访问 JSON 对象</span><br><span class="hljs-comment">// 第一种方式</span><br>user.<span class="hljs-property">name1</span>;<br><span class="hljs-comment">// 第二种方式</span><br>user[<span class="hljs-string">&quot;name1&quot;</span>];<br></code></pre></td></tr></table></figure><ul><li>数字不用加引号，但不可以0开始</li></ul><h4 id="前端-JSON-字符串转-JSON"><a href="#前端-JSON-字符串转-JSON" class="headerlink" title="前端 JSON 字符串转 JSON"></a>前端 JSON 字符串转 JSON</h4><p>从服务器返回的不是一个 JSON 对象，而是一个 JSON 格式的字符串，需要将其转换为 JSON 对象方可使用</p><p>有两种转换方式：</p><ol><li><p><a href="https://wataaaame.github.io/2022/07/25/JavaScript%20-%20Note03%20JSON/#window-eval">window.eval 函数</a></p><p>将字符串当作一段 JS 代码解释并运行</p></li><li><p>parse 方法</p><p>调用 JS 语言中的内置对象，JSON 的 parse 方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> jsonObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonStr);<br></code></pre></td></tr></table></figure></li></ol><h4 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h4><p>阿里巴巴的 Fastjson，组件中的 JSON 类可以将对象转换成 json 格式的字符串</p><p>下载地址：<a href="https://repo.maven.apache.org/maven2/com/alibaba/fastjson/1.2.2/fastjson-1.2.2.jar">fastjson-1.2.2.jar</a></p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个 User 对象</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-string">&quot;vv&quot;</span>, <span class="hljs-number">20</span>);<br><br><span class="hljs-comment">// 使用 Fastjson</span><br><span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(user);<br></code></pre></td></tr></table></figure><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>点击按钮展示学生信息</p><p>前端代码：</p><p>ex02.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Student List<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;showBtn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">                xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                     <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>) &#123;</span><br><span class="language-javascript">                         <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">                             <span class="hljs-comment">// 此为数组</span></span><br><span class="language-javascript">                             <span class="hljs-keyword">var</span> stuJson = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">                             <span class="hljs-keyword">var</span> html = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                             <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;stuJson.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                                 html += <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="language-javascript">                                 html += <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+stuJson[i].<span class="hljs-property">classno</span>+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="language-javascript">                                 html += <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+stuJson[i].<span class="hljs-property">sname</span>+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="language-javascript">                                 html += <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="language-javascript">                             &#125;</span><br><span class="language-javascript">                             <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;list&quot;</span>).<span class="hljs-property">innerHTML</span> = html;</span><br><span class="language-javascript">                         &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                             <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">statusText</span>);</span><br><span class="language-javascript">                         &#125;</span><br><span class="language-javascript">                     &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;/ex01/exRequest02Servlet&quot;</span>, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">                xhr.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Student list<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;showBtn&quot;</span>&gt;</span>Show<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px black solid&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>no<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端代码：</p><p>exRequest02Serlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javaweb.ajax.web.action;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> io.github.wataaaame.javaweb.ajax.bean.Student;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@WebServlet(&quot;/exRequest02Servlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exRequest02Servlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 连接数据库查询学生信息</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 保存 student bean 的集合</span><br>        List&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/learning&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;0.0&quot;</span>);<br>            stmt = conn.createStatement();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select classno, sname from t_student&quot;</span>;<br>            rs = stmt.executeQuery(sql);<br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">classno</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;classno&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">sname</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;sname&quot;</span>);<br>                <span class="hljs-comment">// 将 Student bean 存储到集合</span><br>                students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(classno, sname));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    rs.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (stmt != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    stmt.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 将拼接好的字符串响应到浏览器</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>        <span class="hljs-comment">// 通过 fastjson 将集合转换为字符串响应</span><br>        out.print(JSON.toJSONString(students));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>与 JSON 类似，修改处见下</p><p>前端代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取 xml</span><br><span class="hljs-keyword">var</span> xmlDoc = <span class="hljs-variable language_">this</span>.<span class="hljs-property">responseXML</span>;<br><span class="hljs-comment">// 拼串</span><br><span class="hljs-keyword">var</span> html = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-comment">// 获取所有 &lt;student&gt; 元素，返回了多个对象，是一个数组</span><br><span class="hljs-comment">// 通过 getElementsByTagName 获取元素</span><br><span class="hljs-keyword">var</span> students = xmlDoc.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;student&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;students.<span class="hljs-property">length</span>; i++) &#123;<br>    html += <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>;<br>    <span class="hljs-comment">// 获取 &lt;student&gt; 元素下所有的子元素</span><br>    <span class="hljs-keyword">var</span> children = students[i].<span class="hljs-property">childNodes</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j=<span class="hljs-number">0</span>; j&lt;children.<span class="hljs-property">length</span>; j++) &#123;<br>        <span class="hljs-comment">// 获取子元素名</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;classno&quot;</span>.<span class="hljs-title function_">equals</span>(children[j].<span class="hljs-property">nodeName</span>)) &#123;<br>            <span class="hljs-comment">// 获取子元素值</span><br>            html += <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+children[j].<span class="hljs-property">textContent</span>+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;sname&quot;</span>.<span class="hljs-title function_">equals</span>(children[j].<span class="hljs-property">nodename</span>)) &#123;<br>            html += <span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+children[j].<span class="hljs-property">textContent</span>+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>    html += <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 设置到 tbody</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsById</span>(<span class="hljs-string">&quot;list&quot;</span>).<span class="hljs-property">innerHTML</span> = html;<br></code></pre></td></tr></table></figure><p>后端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContentType(<span class="hljs-string">&quot;text/xml; charset=UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><p>拼串格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">students</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">classno</span>&gt;</span>101<span class="hljs-tag">&lt;/<span class="hljs-name">classno</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sname</span>&gt;</span>vv<span class="hljs-tag">&lt;/<span class="hljs-name">sname</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">classno</span>&gt;</span>102<span class="hljs-tag">&lt;/<span class="hljs-name">classno</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sname</span>&gt;</span>ee<span class="hljs-tag">&lt;/<span class="hljs-name">sname</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><p>Tomcat 10 程序员无需干涉</p><p>Tomcat 9 及以前：</p><ul><li><p>响应中文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>接受参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h2 id="异步与同步"><a href="#异步与同步" class="headerlink" title="异步与同步"></a>异步与同步</h2><p>请求并发为异步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;[method]&quot;</span>, <span class="hljs-string">&quot;[URL]&quot;</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>请求等待为同步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;[method]&quot;</span>, <span class="hljs-string">&quot;[RUL]&quot;</span>, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><ul><li><p>发送的同步请求，需执行完后才能发送其他请求</p><p>e.g. 注册时，类似字段检查需发送同步请求</p></li></ul><h2 id="封装-jQuery"><a href="#封装-jQuery" class="headerlink" title="封装 jQuery"></a>封装 jQuery</h2><p>AJAX 请求相关的代码都是类似的，可以封装成一个工具类，使用时调用即可</p><p>封装示例如下：</p><p>jQuery-1.0.0.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">jQuery</span>(<span class="hljs-params">selector</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> selector == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>        <span class="hljs-comment">// 传递字符串</span><br>        <span class="hljs-keyword">if</span> (selector.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>) == <span class="hljs-string">&quot;#&quot;</span>) &#123;<br>            <span class="hljs-comment">// 声明全局变量</span><br>            domObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(selector.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>));<br>            <span class="hljs-comment">// 返回一个 jQuery 对象，得以调用 html 方法</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">jQuery</span>();<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> selector == <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        <span class="hljs-comment">// 传递函数</span><br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = selector;<br>    &#125;<br><br>    <span class="hljs-comment">// 替代 innerHTML</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">html</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">htmlStr</span>) &#123;<br>        domObj.<span class="hljs-property">innerHTML</span> = htmlStr;<br>    &#125;<br><br>    <span class="hljs-comment">// 替代 onclick</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">click</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fun</span>) &#123;<br>        domObj.<span class="hljs-property">onclick</span> = fun;<br>    &#125;<br><br>    <span class="hljs-comment">// 替代 .value</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">val</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) &#123;<br>        <span class="hljs-keyword">if</span> (v == <span class="hljs-literal">undefined</span>) &#123;<br>            <span class="hljs-keyword">return</span> domObj.<span class="hljs-property">value</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            domObj.<span class="hljs-property">value</span> = v;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义一个静态方法发送 AJAX 请求</span><br>    jQuery.<span class="hljs-property">ajax</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">jsonConfig</span>) &#123;<br>        <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>        xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-comment">// document.getElementById(&quot;postDiv&quot;).innerText = xhr.responseText;</span><br>                    jsonConfig.<span class="hljs-title function_">success</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>));<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">statusText</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (jsonConfig.<span class="hljs-property">type</span>.<span class="hljs-title function_">toUpperCase</span>() == <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>            xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, jsonConfig.<span class="hljs-property">url</span>+<span class="hljs-string">&quot;?&quot;</span>+jsonConfig.<span class="hljs-property">data</span>, jsonConfig.<span class="hljs-property">async</span>);<br>            xhr.<span class="hljs-title function_">send</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (jsonConfig.<span class="hljs-property">type</span>.<span class="hljs-title function_">toUpperCase</span>() == <span class="hljs-string">&quot;POST&quot;</span>) &#123;<br>            xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, jsonConfig.<span class="hljs-property">url</span>, jsonConfig.<span class="hljs-property">async</span>);<br>            xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>            xhr.<span class="hljs-title function_">send</span>(jsonConfig.<span class="hljs-property">data</span>);<br>        &#125;<br>    &#125;<br>&#125;<br>$ = jQuery;<br><span class="hljs-comment">// 让静态 ajax 生效</span><br><span class="hljs-keyword">new</span> <span class="hljs-title function_">jQuery</span>()<br></code></pre></td></tr></table></figure><p>前端代码：</p><p>jQueryTest01.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/ajax01/js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $(<span class="hljs-string">&quot;#div&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;Hello jQuery&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 调用 ajax</span></span><br><span class="language-javascript">                $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                    type : <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">                    url : <span class="hljs-string">&quot;/ajax01/jqueryrequest01&quot;</span>,</span><br><span class="language-javascript">                    data : <span class="hljs-string">&quot;username=&quot;</span>+$(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(),</span><br><span class="language-javascript">                    <span class="hljs-keyword">async</span> : <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                    success : <span class="hljs-keyword">function</span> (<span class="hljs-params">respJson</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">alert</span>(respJson.<span class="hljs-property">username</span>);</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端代码：</p><p>jQueryRequest01.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javaweb.ajax.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/jqueryrequest01&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jQueryRequest01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        response.getWriter().print(<span class="hljs-string">&quot;&#123;\&quot;username\&quot;:\&quot;&quot;</span>+request.getParameter(<span class="hljs-string">&quot;username&quot;</span>)+<span class="hljs-string">&quot;\&quot;&#125;&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Project-1"><a href="#Project-1" class="headerlink" title="Project"></a>Project</h2><p>选择对应省份后，动态关联出对应的市；选择对应市后，动态关联出对应的区</p><p>数据库表设计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">idcodenamepcode<br><span class="hljs-comment">-------------------------</span><br><span class="hljs-number">1</span><span class="hljs-number">001</span>湖北省<br><span class="hljs-number">2</span><span class="hljs-number">002</span>浙江省<br><span class="hljs-number">3</span><span class="hljs-number">003</span>武汉市<span class="hljs-number">001</span><br><span class="hljs-number">4</span><span class="hljs-number">004</span>黄冈市<span class="hljs-number">001</span><br><span class="hljs-number">5</span><span class="hljs-number">005</span>杭州市<span class="hljs-number">002</span><br><span class="hljs-number">6</span><span class="hljs-number">006</span>金华市<span class="hljs-number">002</span><br><span class="hljs-number">7</span><span class="hljs-number">007</span>江苏省<br><span class="hljs-number">8</span><span class="hljs-number">008</span>南京市<span class="hljs-number">007</span><br></code></pre></td></tr></table></figure><p>前端：</p><p>ex03.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>省市联动<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/ex01/js/jQuery-1.0.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#province&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;option value=&#x27;&#x27;&gt;--请选择省份--&lt;/option&gt;&quot;</span>);</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#city&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;option value=&#x27;&#x27;&gt;--请选择市区--&lt;/option&gt;&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/ex01/listArea&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;t=&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>(),</span><br><span class="language-javascript">                <span class="hljs-attr">async</span>: <span class="hljs-string">&quot;true&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> selectHtml = <span class="hljs-string">&quot;&lt;option value=&#x27;&#x27;&gt;--请选择省份--&lt;/option&gt;&quot;</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; json.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                        selectHtml += <span class="hljs-string">&quot;&lt;option value=&#x27;&quot;</span>+json[i].<span class="hljs-property">code</span>+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+json[i].<span class="hljs-property">name</span>+<span class="hljs-string">&quot;&lt;/option&gt;&quot;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    $(<span class="hljs-string">&quot;#province&quot;</span>).<span class="hljs-title function_">html</span>(selectHtml);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#province&quot;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;get&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/ex01/listArea&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;pcode=&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>+<span class="hljs-string">&quot;&amp;t=&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>(),</span><br><span class="language-javascript">                    <span class="hljs-attr">async</span>: <span class="hljs-string">&quot;true&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">json</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">var</span> selectHtml = <span class="hljs-string">&quot;&lt;option value=&#x27;&#x27;&gt;--请选择市区--&lt;/option&gt;&quot;</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; json.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                            selectHtml += <span class="hljs-string">&quot;&lt;option value=&#x27;&quot;</span>+json[i].<span class="hljs-property">code</span>+<span class="hljs-string">&quot;&#x27;&gt;&quot;</span>+json[i].<span class="hljs-property">name</span>+<span class="hljs-string">&quot;&lt;/option&gt;&quot;</span></span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                        $(<span class="hljs-string">&quot;#city&quot;</span>).<span class="hljs-title function_">html</span>(selectHtml);</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;province&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端：</p><p>ListAreaServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javaweb.ajax.web.action;<br><br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> io.github.wataaaame.javaweb.ajax.bean.Area;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态获取所有省或市</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebServlet(&quot;/listArea&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListAreaServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 获取查询的市</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pcode</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;pcode&quot;</span>);<br>        <span class="hljs-comment">// 连接数据库，动态获取所有区域，最终响应一个 JSON 格式字符串</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        List&lt;Area&gt; areaList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/learning&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;0.0&quot;</span>);<br>            <span class="hljs-keyword">if</span> (pcode == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select code, name from t_area where pcode is null&quot;</span>;<br>                ps = conn.prepareStatement(sql);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select code, name from t_area where pcode=?&quot;</span>;<br>                ps = conn.prepareStatement(sql);<br>                ps.setString(<span class="hljs-number">1</span>, pcode);<br>            &#125;<br>            rs = ps.executeQuery();<br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;code&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                areaList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Area</span>(code, name));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    rs.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ps.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        response.getWriter().print(JSON.toJSONString(areaList));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>跨域是指从一个域名网页请求另一个域名资源，比如京东页面去请求淘宝资源</p><p>通过超链接或 from 表单、window.location.href、script 与 image 标签中 src 的方式不存在该问题</p><p>但发送 AJAX 请求访问另一域名资源，由于<strong>同源策略</strong>（浏览器的一种安全策略，协议、域名、端口号皆一致称为同源）的存在，导致无法跨域访问</p><p>根本问题：跨域时共享同一个 XMLHttpRequest 是不安全的</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p>设置响应头</p><p>在响应的 Servlet 中设置响应头，允许指定的同源策略访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 允许某个</span><br>response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br><span class="hljs-comment">// 允许所有</span><br>response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>jsonp</p><p>json with padding（带填充的 json），并非一个真正的 AJAX 请求，只是可以完成局部刷新的效果，是一种类似 AJAX 请求的机制</p><p>通过 script 标签的 src 发送请求<strong>（只支持 get）</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 加载 script 元素</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 创建 script 元素对象</span></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> htmlScriptElt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// 设置 script 的 type 属性</span></span><br><span class="language-javascript">                htmlScriptElt.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;text/javascript&quot;</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 设置 script 的 src 属性</span></span><br><span class="language-javascript">                htmlScriptElt.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;http://localhost:8081/b/jsonp?fun=sayHello&quot;</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 将 script 对象添加到 body 标签中（加载 script）</span></span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(htmlScriptElt);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">// 后端响应回数据给函数（json 格式）</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;mydiv&quot;</span>).<span class="hljs-property">innerHTML</span> = data.<span class="hljs-property">username</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>jsonp解决跨域问题，达到 ajax 局部刷新效果<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mydiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>jsonp Servlet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取函数名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">fun</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;fun&quot;</span>);<br><span class="hljs-comment">// 响应一段 js 代码</span><br>response.getWriter.print(fun+<span class="hljs-string">&quot;(&#123;\&quot;username\&quot;:\&quot;vv\&quot;&#125;)&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>JQuery</p><p>jQuery 库已经对 jsonp 进行了封装，使用前需引入 jQuery 库的 js 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/a/js/jquery-3.6.0.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&quot;#btn&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 发送所谓的 ajax 请求，本质上是一个 jsonp</span></span><br><span class="language-javascript">                $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-comment">// jsonp 只支持 get</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 实际 url 是：/b/jsonp?callback=...</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// callback 即 fun，值为之前的 success，自动生成</span></span><br><span class="language-javascript">                    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:8081/b/jsonp&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;jsonp&quot;</span>,<span class="hljs-comment">// 指定数据类型</span></span><br><span class="language-javascript">                    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">                        $(<span class="hljs-string">&quot;#mydiv&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;Welcome, &quot;</span>+data.<span class="hljs-property">username</span>);</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>jQuery 封装的 jsonp<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mydiv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Servlet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取函数名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">callback</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;callback&quot;</span>);<br><span class="hljs-comment">// 响应一段 js 代码，调用函数</span><br>response.getWriter().print(callback+<span class="hljs-string">&quot;(&#123;\&quot;username\&quot;:\&quot;vv\&quot;&#125;)&quot;</span>);<br></code></pre></td></tr></table></figure><p>其中，ajax 中的配置可以更换为以下形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:8081/b/jsonp&quot;</span>,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;jsonp&quot;</span>,<br>    <span class="hljs-attr">jsonp</span>: <span class="hljs-string">&quot;fun&quot;</span>,<span class="hljs-comment">// 指定具体参数名传参，不采用默认参数 callback</span><br>    <span class="hljs-attr">jsonpCallback</span>: <span class="hljs-string">&quot;sayHello&quot;</span><span class="hljs-comment">// 指定具体的回调函数，不采用默认回调函数（默认回调函数会自动调用 success 的回调函数）</span><br>&#125;)<br><br><span class="hljs-comment">// 自定义函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params">data</span>) &#123;<br>    $(<span class="hljs-string">&quot;#mydiv&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;Welcome, &quot;</span>+data.<span class="hljs-property">username</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>后端参数对应修改即可</p></li><li><p>代理机制（httpclient）</p><p>令 ajax 请求本域中的 Servlet，然后让该 Servlet 跨域访问</p><p>使用 Java 程序发送 get&#x2F;post 请求：</p><ol><li><p><em>使用 JDK 内置的 API</em>：<code>java.net.URL</code>，发送 HTTP 请求</p></li><li><p>使用第三方的开源组件，如：apache 的 httpclient</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">void</span> main(String[] args) <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 使用 java 代码发送 HTTP get 请求</span><br>    <span class="hljs-comment">// 目标地址</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://localhost:8081/b/hello&quot;</span>;<br>    <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br>    <br>    <span class="hljs-comment">// 设置类型</span><br>    httpGet.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;调用 URL：&quot;</span>+httpGet.getURI());<br>    <br>    <span class="hljs-comment">// httpClient 实例化</span><br>    <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br>    <span class="hljs-comment">// 执行请求并获取返回</span><br>    <span class="hljs-type">HttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<br>    <span class="hljs-type">HttpEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> response.getEntity();<br>    System.out.println(<span class="hljs-string">&quot;返回状态码：&quot;</span> + reponse.getStatusLine());<br>    <br>    <span class="hljs-comment">// 显示结果</span><br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(entity.getContent(), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">responseSB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>    <span class="hljs-keyword">while</span> ((line = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>        responseSB.append(line);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;服务器响应的数据：&quot;</span> + responseSB);<br>    reader.close();<br>    <br>    httpClient.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>nginx 反向代理</p><p>同样使用了代理机制完成 AJAX 的跨域，只需修改 nginx 的配置即可</p></li></ol><h2 id="Project-2"><a href="#Project-2" class="headerlink" title="Project"></a>Project</h2><p>实现搜索联想，自动补全</p><ul><li>搜索联想：用户输入单词后，自动联想出用户要搜索的信息，给一个提示</li><li>自动补全：当联想出一些内容后，用户点击某个联想的单词，将该单词自动补全到搜索框中</li></ul><p>核心原理：</p><ol><li>当键盘事件发生时，发送 ajax 请求，请求中提交用户输入的搜索内容</li><li>后端接收到 ajax 请求，接收到请求内容，执行 select 语句进行模糊查询，返回查询结果</li><li>将查询结果封装成 json 格式的字符串响应到前端</li><li>前端接收到 json 格式字符串后，解析这个 json，动态展示页面</li></ol><p>数据库：</p><p>hotSearch.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> t_hsearch;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t_hsearch (<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>    content <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>);<br><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_hsearch(content) <span class="hljs-keyword">values</span>(&quot;武汉疫情&quot;);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_hsearch(content) <span class="hljs-keyword">values</span>(&quot;武汉天气&quot;);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_hsearch(content) <span class="hljs-keyword">values</span>(&quot;武汉购房&quot;);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_hsearch(content) <span class="hljs-keyword">values</span>(&quot;武汉大学生落户&quot;);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_hsearch(content) <span class="hljs-keyword">values</span>(&quot;武汉补贴&quot;);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_hsearch(content) <span class="hljs-keyword">values</span>(&quot;武汉住房公积金&quot;);<br><span class="hljs-keyword">commit</span>;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_hsearch;<br></code></pre></td></tr></table></figure><p>前端代码：</p><p>autocomplete.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>AJAX 实现自动补全<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.searchInput</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.showList</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">309px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fafafa</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.showList</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.showList</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: gray;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.searchBtn</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#c1f0fc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;searchInput&quot;</span>).<span class="hljs-property">onkeyup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> == <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;showList&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 发送 ajax 请求</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">                    xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>) &#123;</span><br><span class="language-javascript">                            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;</span><br><span class="language-javascript">                                <span class="hljs-keyword">var</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">                                <span class="hljs-keyword">var</span> html = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; json.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                                    <span class="hljs-keyword">var</span> content = json[i].<span class="hljs-property">content</span>;</span><br><span class="language-javascript">                                    html += <span class="hljs-string">&quot;&lt;p onclick=&#x27;setInput(\&quot;&quot;</span>+content+<span class="hljs-string">&quot;\&quot;)&#x27;&gt;&quot;</span>+content+<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="language-javascript">                                &#125;</span><br><span class="language-javascript">                                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;showList&quot;</span>).<span class="hljs-property">innerHTML</span> = html;</span><br><span class="language-javascript">                                <span class="hljs-comment">// 显示 div</span></span><br><span class="language-javascript">                                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;showList&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="language-javascript">                            &#125;</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;/ex02/hsearch?input=&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> + <span class="hljs-string">&quot;&amp;t=&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>(), <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">                    xhr.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 自动补全函数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">setInput</span>(<span class="hljs-params">content</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;searchInput&quot;</span>).<span class="hljs-property">value</span> = content;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;showList&quot;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;searchInput&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchInput&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;searchBtn&quot;</span>&gt;</span>Search<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;showList&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;showList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端代码：</p><p>HotSearchServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javaweb.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-meta">@WebServlet(&quot;/hsearch&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotSearchServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>            <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 获取传递的关键字</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;input&quot;</span>);<br>        <span class="hljs-comment">// 连接数据库</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/learning&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;0.0&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select content from t_hsearch where content like ?&quot;</span>;<br>            ps = conn.prepareStatement(sql);<br>            <span class="hljs-comment">// 模糊查询不建议前后都加 %，会让索引失效，从而效率降低</span><br>            ps.setString(<span class="hljs-number">1</span>, input+<span class="hljs-string">&quot;%&quot;</span>);<br>            rs = ps.executeQuery();<br>            sb.append(<span class="hljs-string">&quot;[&quot;</span>);<br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                sb.append(<span class="hljs-string">&quot;&#123;\&quot;content\&quot;:\&quot;&quot;</span>+rs.getString(<span class="hljs-string">&quot;content&quot;</span>)+<span class="hljs-string">&quot;\&quot;&#125;,&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    rs.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ps.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        response.getWriter().print(sb.subSequence(<span class="hljs-number">0</span>, sb.length()-<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;]&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>依赖 jar 包：</p><p><code>servlet-api.jar</code></p><p><code>mysql-connector-java-5.1.23.jar</code></p><h1 id="附录：HTTP状态信息"><a href="#附录：HTTP状态信息" class="headerlink" title="附录：HTTP状态信息"></a>附录：HTTP状态信息</h1><h2 id="1xx-信息"><a href="#1xx-信息" class="headerlink" title="1xx: 信息"></a>1xx: 信息</h2><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">100 Continue</td><td align="left">服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求</td></tr><tr><td align="left">101 Switching Protocols</td><td align="left">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议</td></tr></tbody></table><h2 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx: 成功"></a>2xx: 成功</h2><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">200 OK</td><td align="left">请求成功（其后是对GET和POST请求的应答文档）</td></tr><tr><td align="left">201 Created</td><td align="left">请求被创建完成，同时新的资源被创建</td></tr><tr><td align="left">202 Accepted</td><td align="left">供处理的请求已被接受，但是处理未完成</td></tr><tr><td align="left">203 Non-authoritative Information</td><td align="left">文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝</td></tr><tr><td align="left">204 No Content</td><td align="left">没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的</td></tr><tr><td align="left">205 Reset Content</td><td align="left">没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容</td></tr><tr><td align="left">206 Partial Content</td><td align="left">客户发送了一个带有Range头的GET请求，服务器完成了它</td></tr></tbody></table><h2 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx: 重定向"></a>3xx: 重定向</h2><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">300 Multiple Choices</td><td align="left">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址</td></tr><tr><td align="left">301 Moved Permanently</td><td align="left">所请求的页面已经转移至新的url</td></tr><tr><td align="left">302 Found</td><td align="left">所请求的页面已经临时转移至新的url</td></tr><tr><td align="left">303 See Other</td><td align="left">所请求的页面可在别的url下被找到</td></tr><tr><td align="left">304 Not Modified</td><td align="left">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用</td></tr><tr><td align="left">305 Use Proxy</td><td align="left">客户请求的文档应该通过Location头所指明的代理服务器提取</td></tr><tr><td align="left">306 <em>Unused</em></td><td align="left">此代码被用于前一版本。目前已不再使用，但是代码依然被保留</td></tr><tr><td align="left">307 Temporary Redirect</td><td align="left">被请求的页面已经临时移至新的url</td></tr></tbody></table><h2 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx: 客户端错误"></a>4xx: 客户端错误</h2><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">400 Bad Request</td><td align="left">服务器未能理解请求</td></tr><tr><td align="left">401 Unauthorized</td><td align="left">被请求的页面需要用户名和密码</td></tr><tr><td align="left">402 Payment Required</td><td align="left">此代码尚无法使用</td></tr><tr><td align="left">403 Forbidden</td><td align="left">对被请求页面的访问被禁止</td></tr><tr><td align="left">404 Not Found</td><td align="left">服务器无法找到被请求的页面</td></tr><tr><td align="left">405 Method Not Allowed</td><td align="left">请求中指定的方法不被允许</td></tr><tr><td align="left">406 Not Acceptable</td><td align="left">服务器生成的响应无法被客户端所接受</td></tr><tr><td align="left">407 Proxy Authentication Required</td><td align="left">用户必须首先使用代理服务器进行验证，这样请求才会被处理</td></tr><tr><td align="left">408 Request Timeout</td><td align="left">请求超出了服务器的等待时间</td></tr><tr><td align="left">409 Conflict</td><td align="left">由于冲突，请求无法被完成</td></tr><tr><td align="left">410 Gone</td><td align="left">被请求的页面不可用</td></tr><tr><td align="left">411 Length Required</td><td align="left">“Content-Length” 未被定义。如果无此内容，服务器不会接受请求</td></tr><tr><td align="left">412 Precondition Failed</td><td align="left">请求中的前提条件被服务器评估为失败</td></tr><tr><td align="left">413 Request Entity Too Large</td><td align="left">由于所请求的实体的太大，服务器不会接受请求</td></tr><tr><td align="left">414 Request-url Too Long</td><td align="left">由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况</td></tr><tr><td align="left">415 Unsupported Media Type</td><td align="left">由于媒介类型不被支持，服务器不会接受请求</td></tr><tr><td align="left">416</td><td align="left">服务器不能满足客户在请求中指定的Range头</td></tr><tr><td align="left">417 Expectation Failed</td><td align="left"></td></tr></tbody></table><h2 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx: 服务器错误"></a>5xx: 服务器错误</h2><table><thead><tr><th align="left">消息:</th><th align="left">描述:</th></tr></thead><tbody><tr><td align="left">500 Internal Server Error</td><td align="left">请求未完成。服务器遇到不可预知的情况</td></tr><tr><td align="left">501 Not Implemented</td><td align="left">请求未完成。服务器不支持所请求的功能</td></tr><tr><td align="left">502 Bad Gateway</td><td align="left">请求未完成。服务器从上游服务器收到一个无效的响应</td></tr><tr><td align="left">503 Service Unavailable</td><td align="left">请求未完成。服务器临时过载或当机</td></tr><tr><td align="left">504 Gateway Timeout</td><td align="left">网关超时</td></tr><tr><td align="left">505 HTTP Version Not Supported</td><td align="left">服务器不支持请求中指明的HTTP协议版本</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AJAX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb - Note04 JSP, Session &amp; Cookie</title>
    <link href="/2022/08/05/JavaWeb%20-%20Note04%20JSP,%20Session%20&amp;%20Cookie/"/>
    <url>/2022/08/05/JavaWeb%20-%20Note04%20JSP,%20Session%20&amp;%20Cookie/</url>
    
    <content type="html"><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>JSP（JavaServer Pages），基于 Java 语言实现的服务器端的页面，实际上就是一个 Java 程序、一个 Servlet，生命周期与 Servlet 完全相同，都是单例的（假单例）</p><blockquote><p><code>index.jsp</code> 类继承 <code>HttpJspBase</code>，而 <code>HttpJspBase</code> 类继承的是 <code>HttpServlet</code></p></blockquote><ul><li>Servlet 是 JavaEE 的13个子规范之一，那么 JSP 也是 JavaEE 的13个子规范之一</li><li>JSP 是一套规范，所有的 web 容器&#x2F;服务器都遵守这套规范，按照规范进行“翻译”（它们都内置一个 “JSP 翻译引擎”）</li></ul><blockquote><p>程序员主要编写 Servlet 中的”前端代码“，让程序自动将之翻译为 Servlet Java 程序，然后机器再自动将 Java 程序编译成字节码文件，使用 JVM 调用 class 中的方法</p></blockquote><h2 id="第一个-JSP"><a href="#第一个-JSP" class="headerlink" title="第一个 JSP"></a>第一个 JSP</h2><ol><li><p>在 WEB-INF 目录之外创建一个 <code>index.jsp</code> 文件，不写任何内容</p></li><li><p>将项目部署后，启动服务器，打开浏览器访问，页面空白</p><p>浏览器访问以上的 <code>index.jsp</code>，底层执行的是 <code>index_jsp.class</code> 这个 Java 程序</p><blockquote><p>这个 jsp 会被 WEB 服务器翻译生成 <code>index_jsp.java</code> 文件，然后又会被编译生成 <code>index_jsp.class</code> 文件</p></blockquote></li></ol><ul><li>JSP 文件第一次访问比较慢，访问过程流程如下：<ol><li>把 JSP 文件翻译成 Java 源文件</li><li>Java 源文件编译生成 class 字节码文件</li><li>通过 class 创建 servlet 对象</li><li>调用 init 方法</li><li>调用 service 方法</li></ol></li><li>第二次直接调用单例 servlet 对象的 service 方法即可</li></ul><p>对 JSP 调试，还是要直接打开 JSP 文件对应的 Java 文件，检查 Java 代码</p><blockquote><p>最高境界：眼前是 JSP 代码，闹钟是 Java 代码</p></blockquote><h2 id="JSP-基础语法"><a href="#JSP-基础语法" class="headerlink" title="JSP 基础语法"></a>JSP 基础语法</h2><ol><li><p>在 JSP 文件中<strong>直接编写文字</strong></p><p>文字会被翻译到：<code>Servlet类 -&gt; service方法 -&gt; out.write(&quot;here&quot;)</code>，被 Java 程序当作普通字符串打印输出到浏览器</p><p>在 JSP 中编写 前端代码，这些代码对于 JSP 只是普通字符串，但是 JSP 将之输出到浏览器，浏览器就会解释执行，展示出效果</p></li><li><p>JSP 的<strong>配置指令</strong></p><p>解决响应时的中文乱码问题</p><p>在 JSP 顶部编写如下代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!-- 响应内容类型是 text/html，采用的字符集是 UTF-<span class="hljs-number">8</span> --&gt;<br>&lt;%<span class="hljs-meta">@page</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li><li><p>编写 Java 程序</p><p>使用<strong>脚本块</strong>：<code>&lt;% [java code]; %&gt;</code>向浏览器输出一个 Java 变量</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;vv&quot;</span>;<br>out.write(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>%&gt;<br></code></pre></td></tr></table></figure><ul><li><p>以上代码中的 out 是 JSP 九大内置对象之一，可以在 service 中直接使用</p></li><li><p>普通字符串没必要使用该方法，可直接在 JSP 中编写</p></li><li><p>如果输出的内容中含有 Java 代码（<strong>动态输出</strong>），这时需要使用以下语法格式：</p><p><code>&lt;%= %&gt;</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%= <span class="hljs-number">100</span> + <span class="hljs-number">200</span> %&gt;<br>&lt;%-- <span class="hljs-number">300</span> --&gt;<br></code></pre></td></tr></table></figure><p>翻译成了 <code>out.print();</code></p></li><li><p>适用于输出的内容含有 Java 变量、是一个动态的内容</p></li><li><p>在这个符号中编写的被视为 Java 程序，被翻译到 Servlet 类的 service 方法内部</p></li><li><p>方法内部只能写方法相应格式的语句，诸如静态代码块、方法、成员变量等皆不可定义在脚本块中</p></li><li><p>编写的代码按自上而下的顺序执行</p></li></ul><p>*service <strong>方法外</strong>：<code>&lt;%! %&gt;</code>*</p><ul><li><p>此符号编写的 Java 程序会自动翻译到 service 方法外</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%!<br>    <span class="hljs-comment">// 成员变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;vv&quot;</span>;<br><span class="hljs-comment">// 静态代码块</span><br><span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块执行&quot;</span>);<br>    &#125;<br><span class="hljs-comment">// 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;m1 method execute!&quot;</span>);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><blockquote><p>一般少用，</p><p>JSP 就是 Servlet，是单例的，在 service 方法外写静态变量和实例变量，多线程并发的环境下，一旦有修改操作，必然存在线程安全问题</p></blockquote></li></ul></li><li><p>JSP 专用<strong>注释</strong></p><p>专用注释不会被翻译到源代码中</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%--<br>System.out.println(<span class="hljs-string">&quot;添加横杠即可&quot;</span>);<br>--%&gt;<br></code></pre></td></tr></table></figure><blockquote><p>HTML 注释 <code>&lt;!-- --&gt;</code> 会被翻译</p></blockquote></li></ol><h2 id="JSP-与-Servlet-区别"><a href="#JSP-与-Servlet-区别" class="headerlink" title="JSP 与 Servlet 区别"></a>JSP 与 Servlet 区别</h2><p>职责不同</p><ul><li>Servlet：逻辑处理、业务处理、连接数据库、获取&#x2F;收集数据</li><li>JSP：展示数据</li></ul><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>指导 JSP 翻译引擎如何工作</p><p>语法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@指令名 属性名=属性值 属性名=属性值...%&gt;<br></code></pre></td></tr></table></figure><p>指令包括：</p><ol><li><p><em>include：包含指令，在 JSP 中完成静态包含</em></p></li><li><p>taglib：引入标签库指令，JSTL 标签库中学习</p></li><li><p>page：页面指令，用来<strong>定义 JSP 页面的全局属性</strong>，该配置会作用于整个页面</p><p>常用属性：</p><ol><li><p>session</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> session=<span class="hljs-string">&quot;[true|false]&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><p>true 表示一定启用 JSP 内置对象 session，没有 session 对象会创建（默认为 true）</p><p>false 表示不启用内置对象 session，当前 JSP 页面中无法使用内置对象 session</p></li><li><p>contentType</p><p>contentType 属性用来设置响应的内容类型</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> contentType=<span class="hljs-string">&quot;text/html&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><blockquote><p>其中可以添加响应的字符集：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>pageEncoding</p><p>设置响应时采用的字符集</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> pageEndoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><blockquote><p>可直接写在 contentType 中：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>import</p><p>导入包文件</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.*&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li><li><p>errorPage</p><p>指定当前页面出错时跳转的位置</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> errorPage=<span class="hljs-string">&quot;/error.jsp&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></li><li><p>isErrorPage</p><p>错误页面可以启用 JSP 九大内置对象中的 exception</p><p>exception 内置对象就是刚刚发生的异常对象，默认值是 false</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> isErrorPage=<span class="hljs-string">&quot;true&quot;</span> %&gt;<br></code></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%exception.printStackTrace();%&gt;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h2><p>四个域对象：</p><ol><li><p>jakarta.servlet.jsp.PageContext pageContext</p><p>页面作用域</p></li><li><p>jakarta.servlet.http.HttpServletRequest request</p><p>请求作用域</p></li><li><p>jakarta.servlet.http.HttpSession session</p><p>会话作用域</p></li><li><p>jakarta.servlet.ServletContext application</p><p>应用作用域</p></li></ol><ul><li>pageContext &lt; request &lt; session &lt; application</li><li>以上四个作用域都有：setAttribute、getAttribute、removeAttribute 方法</li><li>使用原则：尽可能使用小的域</li></ul><p>两个响应对象：</p><ol><li><p>jakarta.servlet.jsp.jspWriter out</p><p>负责输出</p></li><li><p>jakarta.servlet.http.HttpServletResponse response</p><p>负责响应</p></li></ol><p>其他三个对象：</p><ol><li><p>java.lang.Throwable exception</p></li><li><p>jakarta.servlet.ServletConfig config</p></li><li><p>java.lang.Object page</p><p>其实是 this，代表当前的 Servlet 对象</p></li></ol><h2 id="EL-表达式"><a href="#EL-表达式" class="headerlink" title="EL 表达式"></a>EL 表达式</h2><p>Expression Language（表达式语言），可以代替 JSP 中的 Java 代码，让 JSP 文件中的程序看起来更加整洁、美观</p><blockquote><p>JSP 中夹杂着各种 Java 代码，导致 JSP 文件混乱、不好维护，所以有了 EL 表达式</p></blockquote><p>EL 表达式可以算是 JSP 语法的一部分，归属于 JSP，使用情景主要是：</p><ol><li><p>从某个作用域中<strong>取数据</strong></p><p>pageContext、request、session、application</p></li><li><p>将其转换成字符串</p><p>Java 对象也可调用 toString 方法转换为字符串</p></li><li><p>输出到浏览器</p><p>等同于 &lt;%&#x3D; %&gt;</p></li></ol><p>基本语法格式：<code>$&#123;表达式&#125;</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br><span class="hljs-comment">// 向 request 作用域当中存储数据</span><br>request.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;vv&quot;</span>);<br><span class="hljs-comment">// 向 request 作用域中存储对象</span><br>request.setAttribute(<span class="hljs-string">&quot;userObj&quot;</span>, user)<br>%&gt;<br><br>&lt;%-- 使用 Java --%&gt;<br>&lt;%=request.getAttribute(<span class="hljs-string">&quot;username&quot;</span>)%&gt;<br><br>&lt;%-- 使用 EL 表达式 --%&gt;<br>$&#123;username&#125;<br><br>&lt;%-- 自动调用对象的 toString 方法 --%&gt;<br>$&#123;userObj&#125;<br><br>&lt;%-- 获取对象的私有属性 --%&gt;<br>&lt;%-- userObj.getUsername()，省略 get 和小括号 --%&gt;<br>$&#123;userObj.username&#125;<br></code></pre></td></tr></table></figure><ul><li><p>EL 表达式中获取对象，与对象的属性变量无关，主要是获取 <strong>get 方法后面的字段</strong>，哪怕实际上无该属性名</p><p>嵌套对象同样可省略 get 与小括号</p></li><li><p>EL 表达式优先从小的域中取数据</p><p>可以指定范围来读取数据</p><p><code>pageScope</code>、<code>requestScope</code>、<code>sessionScope</code>、<code>applicationScope</code></p><p>示例：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;pageScope.date&#125;<br></code></pre></td></tr></table></figure><blockquote><p>实际开发中，向某个域中存储对象时，name 都是不同的，所以此语法一般无用</p></blockquote></li><li><p>EL 表达式有空值处理（即 null 显示为空白）</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%-- EL 表达式 --%&gt;<br>$&#123;username&#125;<br><br>&lt;%-- 等同于 --%&gt;<br>&lt;%=request.getAttribute(<span class="hljs-string">&quot;username&quot;</span>) == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;&quot;</span> : request.getAttribute(<span class="hljs-string">&quot;username&quot;</span>)%&gt;<br></code></pre></td></tr></table></figure></li><li><p>EL 表达式底层还是翻译成 Java 代码执行</p></li><li><p>若存储到域中有特殊符号，可以使用<strong>中括号取出数据</strong>（需添加双引号）</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;u1.username&#125;<br>&lt;%-- 等同于 --%&gt;<br>$&#123;u1.[<span class="hljs-string">&quot;username&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><ul><li><p>若不加双引号，则找对应变量</p><p>若加上双引号，则找对应属性</p></li><li><p>适用于极端情况下的读取：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>request.setAttribute(<span class="hljs-string">&quot;abc.def&quot;</span>, <span class="hljs-string">&quot;Hello EL&quot;</span>);<br>%&gt;<br><br>&lt;%-- 普通读取方式语法错误 --%&gt;<br>$&#123;requestScope.abc.def&#125;<br><br>&lt;%-- 使用中括号读取无误 --%&gt;<br>$&#123;requestScope[<span class="hljs-string">&quot;abc.def&quot;</span>]&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>取数据：</p><ol><li>Map 集合：<code>$&#123;map.key&#125;</code></li><li>数组：<code>$&#123;Array[0]&#125;</code></li><li>List 集合：<code>$&#123;List[0]&#125;</code></li></ol></li><li><p><em>忽略 EL 表达式</em></p><p>使用 page 指令忽略所有：<code>isELIgnored=&quot;true&quot;</code></p><p>使用反斜杠忽略一条：<code>\$&#123;&#125;</code></p></li></ul><blockquote><p>面试题：</p><p>${abc} 与 ${“abc”} 的区别</p><ul><li><p>前者表示从某个域中取出数据，并且数据的 name 是 ”abc“</p><p>后者只是将 abc 当成普通字符串输出到浏览器</p></li></ul></blockquote><h3 id="常用隐式对象"><a href="#常用隐式对象" class="headerlink" title="常用隐式对象"></a>常用隐式对象</h3><ol><li><p>pageContext</p><p>EL 表达式中没有 request 这个隐式对象</p><p>requestScope 只代表“请求范围”，不等同于 request 对象</p><p>通过 EL 中的隐式对象 <strong>pageContext</strong> 可以获取 request</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%=request%&gt;<br><br>&lt;%-- 等同于 --%&gt;<br>&lt;%=pageContext.getRequest%&gt;<br><br>&lt;%-- 等同于 --%&gt;<br>$&#123;pageContext.request&#125;<br></code></pre></td></tr></table></figure><blockquote><p>EL 表达式与 JSP 中的 pageContext（九大对象）是同一个对象</p></blockquote><ul><li><p>使用案例：</p><p>获取 contextPath</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%-- pageContext.getRequest() 默认获取的是 ServletRequest，需要强转为 HttpServletRequest 调用 getContextPath --%&gt;<br>&lt;%=((HttpServletRequest)pageContext.getRequest()).getContextPath()%&gt;<br><br>&lt;%-- 等同于 --%&gt;<br>$&#123;pageContext.request.contextPath&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>param</p><p>获取浏览器传递参数的第一个值</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%=request.getParameter(<span class="hljs-string">&quot;username&quot;</span>)%&gt;<br><br>&lt;%-- 等同于 --%&gt;<br>$&#123;param.username&#125;<br></code></pre></td></tr></table></figure></li><li><p>paramValues</p><p>返回所有值的一维数组</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%request.getParameterValues(<span class="hljs-string">&quot;hobit&quot;</span>)%&gt;<br><br>&lt;%-- 等同于 --%&gt;<br>$&#123;paramValues.hobit&#125;<br></code></pre></td></tr></table></figure></li><li><p>initParam</p><p>获取配置信息</p><p>ServletContext 是 Servlet 上下文对象，对应 JSP 中九大内置对象的 application</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%=application.getInitParameter(<span class="hljs-string">&quot;pageSize&quot;</span>);<br><br>&lt;%-- 等同于 --%&gt;<br>$&#123;initParam.pageSize&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><em>运算符</em></h3><ol><li><p>算数运算符</p><p><code>+ - * / %</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;<span class="hljs-number">10</span> + <span class="hljs-number">20</span>&#125;<br>&lt;%-- <span class="hljs-number">30</span> --%&gt;<br></code></pre></td></tr></table></figure><ul><li><p>加号运算符只能做求和运算，不会进行字符串拼接操作</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;<span class="hljs-number">10</span> + <span class="hljs-string">&quot;20&quot;</span>&#125;<br>&lt;%-- <span class="hljs-number">30</span> --%&gt;<br></code></pre></td></tr></table></figure><p>无法转换成数字则报错</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;<span class="hljs-number">10</span> + <span class="hljs-string">&quot;abc&quot;</span>&#125;<br>$&#123;<span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-string">&quot;def&quot;</span>&#125;<br>&lt;%-- NumberFormatException --%&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>关系运算符</p><p><code>== != &gt; &gt;= &lt; &lt;= eq</code></p><p>&#x3D;&#x3D; 与 !&#x3D; 都调用了 equals 方法</p><p>&#x3D;&#x3D; 与 eq 作用相同</p></li><li><p>逻辑运算符</p><p><code>! &amp;&amp; || not and or</code></p></li><li><p>条件运算符</p><p><code>? :</code></p><p>可以配合 empty 使用</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">$&#123;empty username ? <span class="hljs-string">&quot;yes&quot;</span> : <span class="hljs-string">&quot;no&quot;</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>取值运算符</p><p><code>[] .</code></p></li><li><p>empty 运算符</p><p>运算结果为 boolean 类型</p></li></ol><h2 id="JSTL-标签库"><a href="#JSTL-标签库" class="headerlink" title="JSTL 标签库"></a>JSTL 标签库</h2><p>Java Standard Tag Lib（Java 标准标签库），通常结合 EL 表达式一起使用，目的是让 JSP 中的 Java 代码消失</p><p>标签中的变量默认存储到 pageContext 域</p><p>使用步骤：</p><ol><li><p>引入 JSTL 标签库对应的 jar 包</p><blockquote><p>tomcat 10 之前的 jar 包是：</p><ul><li><a href="https://dlcdn.apache.org/tomcat/taglibs/taglibs-standard-1.2.5/taglibs-standard-impl-1.2.5.jar">taglibs-standard-impl-1.2.5.jar</a></li><li><a href="https://dlcdn.apache.org/tomcat/taglibs/taglibs-standard-1.2.5/taglibs-standard-spec-1.2.5.jar">taglibs-standard-spec-1.2.5.jar</a></li></ul><p>tomcat 10 之后（含）的 jar 包是：</p><ul><li>jakarta.servlet.jsp.jstl-2.0.0.jar</li><li>jakarta.servlet.jsp.jstl-api-2.0.0.jar</li></ul></blockquote></li><li><p>在 JSP 中指定要使用的标签库</p><p>JSTL 提供了很多种标签，使用 taglib 引入想要使用的标签</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><ul><li><p>prefix 为标识，名称随意，标签使用时的名称，核心标签库一般命名为 c</p><p>uri 为标签地址，来自于引用的 jstl.jar 中 c.tld 中的 uri 地址，此处标签为核心标签库</p><ul><li><p>url 路径实际上指向了一个 .tld 文件，这是一个 xml 配置文件，其中描述了<strong>”标签“和 “Java 类”</strong>之间的关系</p><p>以上核心标签库对应了 c.tld 文件，位于 <code>jakarta.servlet.jsp.jstl-2.0.0.jar -&gt; META-INF/c.tld</code></p></li><li><p>tld 解析</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;tag&gt;<br>&lt;description&gt;标签描述&lt;/description&gt;<br>    &lt;name&gt;<span class="hljs-keyword">catch</span>&lt;/name&gt;标签名<br>    &lt;tag-class&gt;org.apache.taaglibs.standard.tag.common.core.CatchTag&lt;/tag-class&gt;标签对应的 Java 类<br>    &lt;body-content&gt;JSP&lt;/body-content&gt;标签体中支持的语法<br>    &lt;attribute&gt;属性<br>    &lt;description&gt;属性描述&lt;/description&gt;<br>        &lt;name&gt;<span class="hljs-keyword">var</span>&lt;/name&gt;属性名<br>        &lt;required&gt;<span class="hljs-literal">false</span>&lt;/required&gt;属性是否为必须值<br>        &lt;rtexprvalue&gt;<span class="hljs-literal">false</span>&lt;/rtexprvalue&gt;属性值是否支持 EL 表达式<br>    &lt;/attribute&gt;<br>&lt;/tag&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>使用标签</p><p>语法：<code>&lt;[prefix]:[tag] [name=&quot;value&quot;]&gt;body&lt;/c:[tag]&gt;</code></p><p>表面使用的是标签，底层还是 Java 程序</p><p>e.g. 遍历 Student List 中的学生 id 和 学生 name，request 域中有一个 stuList</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:forEach items=<span class="hljs-string">&quot;$&#123;stuList&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;s&quot;</span>&gt;<br>id: $&#123;s.id&#125;, name: $&#123;s.name&#125;&lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><ul><li>items 为遍历的集合，支持 EL 表达式</li><li>var 为当前的迭代项</li></ul></li></ol><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><ol><li><p>if</p><p>test 为 boolean 类型，支持 EL 表达式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;empty param.username&#125;&quot;</span>&gt;Sorry&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty param.username&#125;&quot;</span>&gt;Welcome&lt;/c:<span class="hljs-keyword">if</span>&gt;<br><br>&lt;%--<br>    <span class="hljs-keyword">if</span> 标签中还有：<br>        <span class="hljs-keyword">var</span>：声明一个 <span class="hljs-type">boolean</span>变量，保存 test 属性值<br>        scope：将 <span class="hljs-keyword">var</span> 的变量存储到指定域中<br>            page（pageContext 域）<br>            request（request 域）<br>            session（session 域）<br>            application（application 域）<br>--%&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;empty param.username&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;v&quot;</span> scope=<span class="hljs-string">&quot;request&quot;</span>&gt;Welcome&lt;/c:<span class="hljs-keyword">if</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>forEach</p><ul><li><p>fori 循环</p><p>var：指定循环中的变量</p><p>begin：开始</p><p>end：结束</p><p>step：步长</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;i&quot;</span> begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;4&quot;</span> step=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>    &lt;%-- i 默认存储到 pageContext 域中才得以被 EL 表达式读取 --%&gt;<br>    $&#123;i&#125;&lt;br&gt;&lt;%-- <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> --%&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure></li><li><p>foreach 循环</p><p>items：循环容器</p><p>var：循环项</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:forEach items=<span class="hljs-string">&quot;$&#123;students&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;s&quot;</span>&gt;<br>    id: $&#123;s.id&#125;, name: $&#123;s.name&#125;&lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure></li></ul><p><strong>varStatus 属性</strong>：表示 var 状态对象，代表了 var 状态</p><ol><li><p>名称随意</p></li><li><p>状态对象有 count 属性</p><p>从1开始，以1递增，主要用于<strong>项目序号</strong></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">c:forEach</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;students&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">var</span>=<span class="hljs-string">&quot;s&quot;</span> <span class="hljs-attr">varStatus</span>=<span class="hljs-string">&quot;stuStatus&quot;</span>&gt;</span></span><br><span class="language-xml">    no: $</span><span class="hljs-template-variable">&#123;stuStatus.count&#125;</span><span class="language-xml">, id: $</span><span class="hljs-template-variable">&#123;s.id&#125;</span><span class="language-xml">, name: $</span><span class="hljs-template-variable">&#123;s.name&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">c:forEach</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>choose, weh, otherwise</p><p>类似于 if, else if 或 switch 语句</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:choose&gt;<br>&lt;c:when test=<span class="hljs-string">&quot;$&#123;param.age &lt; 18&#125;&quot;</span>&gt;child&lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;param.age &lt; 35&#125;&quot;</span>&gt;adult&lt;/c:when&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123;param.age &lt; 55&#125;&quot;</span>&gt;middle&lt;/c:when&gt;<br>    &lt;c:otherwise&gt;elder&lt;/c:otherwise&gt;<br>&lt;/c:choose&gt;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter 过滤器"></a>Filter 过滤器</h2><p>每一个 Servlet 处理各自相关的业务，在执行前可能都需要判断用户的登录状态，而判断的代码是固定的；包括解决中文乱码的公共代码，也是重复编写，显然没有达到复用。此时可以使用 Filter 解决该问题</p><p>Filter 是过滤器，属于 Servlet 规范中的一员，可以在目标 Servlet 之前或之后添加代码，以实现过滤规则</p><p>一般情况下都是在过滤器中编写公共代码</p><p><img src="/images/image-javaweb/note04-01-Filter%E5%8E%9F%E7%90%86.PNG" alt="Filter原理"></p><ul><li>过滤器的调用遵循栈数据结构</li></ul><blockquote><p>Filter 与 Servlet 对比：</p><p>相同：</p><ul><li><p>Filter 与 Servlet 生命周期同</p></li><li><p>Servlet 与 Filter 皆为单例</p></li></ul><p>不同：</p><ul><li><p>Filter 优先级高于 Servlet</p></li><li><p>Servlet 对象默认在服务器启动时不会新建对象</p><p>Filter 对象默认在服务器启动时会新建对象</p></li><li><p>Filter 偏向于 web.xml 中配置</p><p>Servlet 偏向于注解配置</p></li></ul></blockquote><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li><p>编写一个 Java 类实现一个接口：<code>jakarta.servlet.Filter</code>，并且实现这个类中所有方法</p><ol><li>init()：在 Filter 对象第一次被创建之后调用，只调用一次</li><li>doFilter()：此方法中编写过滤规则，只要用户发送一次请求，则执行一次<ul><li>传递来的是 HttpServletRequest 与 HttpServletResponse，在 Filter 中使用需做强制类型转换</li></ul></li><li>destroy()：在 Filter 对象被释放&#x2F;销毁之前调用，只调用一次</li></ol></li><li><p>对 Filter 进行配置（类似于 Servlet）</p><ul><li><p>在 web.xml 文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>myFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>io.github.wataaaame.javaweb.serlet.MyFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>myFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><code>&lt;filter.mapping&gt;</code> 标签位置越靠上，优先级越高</p></blockquote></li><li><p>使用注解</p><ol><li><p>精确匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/a.do&quot;)</span><br></code></pre></td></tr></table></figure></li><li><p>后缀匹配（模糊匹配中的扩展匹配）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;*.do&quot;)</span><br></code></pre></td></tr></table></figure></li><li><p>前缀匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/dept/*&quot;)</span><br></code></pre></td></tr></table></figure></li><li><p>匹配全部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>Filter 类名在字典中越靠前，优先级越高</p></blockquote></li></ul></li><li><p>方法中添加以下代码以<strong>跳转到下一个过滤器</strong>，若不是过滤器则<strong>跳转到下一个 Servlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">filterChain.doFilter(request, response);<br></code></pre></td></tr></table></figure></li></ol><h3 id="责任链设计模式"><a href="#责任链设计模式" class="headerlink" title="责任链设计模式"></a>责任链设计模式</h3><p>过滤器最大的优点：在程序编译阶段不会确定调用顺序，是通过 web.xml 配置文件调整，于程序的运行阶段动态组合</p><h2 id="Listener-监听器"><a href="#Listener-监听器" class="headerlink" title="Listener 监听器"></a>Listener 监听器</h2><p>Listener 是 Servlet 规范中的一员，是一个特殊时机启动的代码</p><ul><li>所有的监听器接口都是以 Listener 结尾</li><li>所有的监听器都是由服务负责调用</li></ul><h3 id="Servlet-规范提供的监听器"><a href="#Servlet-规范提供的监听器" class="headerlink" title="Servlet 规范提供的监听器"></a>Servlet 规范提供的监听器</h3><p><code>Jakarta.servlet</code> 包下：</p><ol><li><p>ServletContextListener</p><p>application 域的创建与销毁时触发</p><ol><li><p>编写一个类实现 ServletContextListener 接口，并实现其中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对象被创建时调用</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span>;<br><br><span class="hljs-comment">// 对象被销毁时调用</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span>;<br></code></pre></td></tr></table></figure></li><li><p>在 web.xml 文件中对 ServletContextListener 进行如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>io.github.wataaaame.javaweb.listener.MyServletContextListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebListener</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>ServletContextAttributeListener</p></li><li><p>ServletRequestListener</p></li><li><p>ServletRequestAttributeListener</p></li></ol><p><code>jakarta.servlet.http</code> 包下：</p><ol><li><p>HttpSessionListener</p></li><li><p>HttpSessionAttributeListener</p><p>监听 <strong>Session 域中数据的变化</strong></p><ul><li>需要进行 xml 文件配置或注解标注</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHttpSessionAttributeListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionAttributeListener</span> &#123;<br>    <span class="hljs-comment">// 向 session 中存储数据时</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeAdded</span><span class="hljs-params">(HttpSessionBindingEvent se)</span> &#123;&#125;<br>    <br>    <span class="hljs-comment">// 将 session 中数据删除时</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeRemoved</span><span class="hljs-params">(HttpSessionBindingEvent se)</span> &#123;&#125;<br>    <br>    <span class="hljs-comment">// session 中某个数据替换时</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeReplaced</span><span class="hljs-params">(HttpSessionBindingEvent se)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>HttpSessionBindingListener</p><p>实现该接口的<strong>特定对象</strong>绑定到 Session 时触发</p><ul><li>一般为个体类对象的监听（如 JavaBean）</li><li>不需要 xml 文件配置或注解标注</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 绑定数据时</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueBound</span><span class="hljs-params">(HttpSessionBindingEvent event)</span> &#123;&#125;<br><br><span class="hljs-comment">// 解绑数据时</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueUnbound</span><span class="hljs-params">(HttpSessionBindingEvent event)</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>通过 event.getSession().getServletContext() 获取 application 对象</li></ul></li><li><p><em>HttpSessionIdListenner</em></p><p>检测 Session id 状态</p></li><li><p><em>HttpSessionActivationListener</em></p><p>监听 Session 对象的钝化和活化</p><ul><li>钝化：Session 对象从内存存储到硬盘文件</li><li>活化：从硬盘文件把 Session 恢复到内存</li></ul></li></ol><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>统计网站实时在线人数</p><ul><li>服务器通过浏览器的 Session 对象判断用户登录状态，一个 Session 代表一个用户，通过 HttpSessionListener 监听器获取 Session 对象的个数</li></ul><p>统计登录的用户的在线数量</p><ul><li><p>通过 HttpSessionBindingListener，统计名为 “name” 的 Session 对象个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueBound</span><span class="hljs-params">(HttpSessionBindingEvent event)</span> &#123;<br>    <span class="hljs-comment">// 用户登录</span><br>    <span class="hljs-comment">// 获取 ServletContext</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> event.getSession().getServletContext();<br>    <span class="hljs-comment">// 获取在线人数变量</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer)application.getAttribute(<span class="hljs-string">&quot;onlineCount&quot;</span>);<br>    <span class="hljs-comment">// 第一个人登录时，onlineCount 为空，需手动指定为1</span><br>    <span class="hljs-keyword">if</span> (onlineCount == <span class="hljs-literal">null</span>) &#123;<br>        application.setAttribute(<span class="hljs-string">&quot;onlineCount&quot;</span>, <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则在线人数加一，并存储到域中</span><br>        application.setAttribute(<span class="hljs-string">&quot;onlineCount&quot;</span>, ++onlineCount);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueUnbound</span><span class="hljs-params">(HttpSessionBindingEvent event)</span> &#123;<br>    <span class="hljs-comment">// 用户退出</span><br>    <span class="hljs-comment">// 获取 application 域</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> event.getSession().getServletContext();<br>    <span class="hljs-comment">// 获取在线用户人数</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer)application.getAttribute(<span class="hljs-string">&quot;onlineCount&quot;</span>);<br>    <span class="hljs-comment">// 在线人数减1后存储到 application 域</span><br>    application.setAttribute(<span class="hljs-string">&quot;onlineCount&quot;</span>, --onlineCount);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p><code>jakarta.servlet.http.HttpSession</code></p><p>B&#x2F;S 架构系统的会话机制，从浏览器打开到关闭的整个过程叫做<strong>一次会话</strong>，最主要的作用是<strong>保存会话状态</strong></p><p>session 机制属于 B&#x2F;S 结构的一部分，属于一种规范，其他语言同样实现了该机制</p><blockquote><p>在浏览器中点击一个页面，到页面加载完毕，可以粗略的认为是<strong>一次请求</strong>（request），一次会话对应 n 次请求</p></blockquote><blockquote><p>域对象：</p><ul><li>request（HttpServletRequest）：请求域</li><li>session（HttpSession）：会话域</li><li>application（ServletContext）：应用域</li></ul><p><strong>request &lt; session &lt; application</strong></p><p>都有以下三个公共方法：</p><ol><li>setAttribute</li><li>getAttribute</li><li>removeAttribute</li></ol><p>尽量使用小的域</p></blockquote><p>HTTP 协议是一种无状态协议，向服务器请求时，B 和 S 是连接的；请求之后连接中断，且服务器无从得知</p><p>如此可以降低服务器压力，因而需要判断用户登录信息则使用 session 机制</p><h2 id="Session-语法"><a href="#Session-语法" class="headerlink" title="Session 语法"></a>Session 语法</h2><h3 id="对象获取"><a href="#对象获取" class="headerlink" title="对象获取"></a>对象获取</h3><p>通过 <code>request.getSession()</code> 获取当前 session 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 若未获取到，则新建</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br><span class="hljs-comment">// 若未获取到，返回 null</span><br><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession(<span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>session 对象同样拥有 setAttribute&#x2F;getAttribute 方法</p><h3 id="配置超时时间"><a href="#配置超时时间" class="headerlink" title="配置超时时间"></a>配置超时时间</h3><p>可以通过 web.xml 配置文件配置超时时间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>session 的默认超时时长是 30 分钟</li></ul><blockquote><p>JSP 启动时默认有创建 Session 对象，可以通过以下配置禁用：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@page</span> session=<span class="hljs-string">&quot;false&quot;</span> %&gt;<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>Session 在 JSP 中可以直接使用（九大内置对象之一）</p></blockquote><h3 id="对象销毁"><a href="#对象销毁" class="headerlink" title="对象销毁"></a>对象销毁</h3><p>通过 <code>session.invalidate()</code> 销毁 Session 对象</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>WEB 服务器中有一个 session 列表，类似于 Map 集合</p><p>Map 集合的 key 存储的是 SESSIONID；Map 集合的 value 存储的是对应的 session 对象</p><p>用户发送第一次请求时：服务器创建新的 session 对象，同时该对象生成一个 id。WEB 服务器会将 session 的 id 发送给浏览器，浏览器将之放入缓存中</p><p>用户发送第二次请求时：浏览器自动将缓存中的 SESSIONID 发送给服务器，服务器将获取到的 SESSIONID 检索并找出对应的 session 对象</p><ul><li><p>缓存中的 SESSIONID&#x3D;XXXX 是以 Cookie 的形式保存在浏览器内存中，浏览器一旦关闭，Cookie 即销毁</p></li><li><p>浏览器设置中可以禁用 Cookie，服务器正常发送 Cookie 给浏览器，但是浏览器拒收，如此每次都会新建一个 Session，直到服务器 Session 超时</p></li><li><p>Cookie 禁用后 Session 机制依然能够实现，使用 URL 重写机制访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://localhost:8080/servlet;sessionid=xxxx<br></code></pre></td></tr></table></figure><p>由于此番举措导致任何请求路径都需要加上 sessionid，提高了开发者的成本，所以禁用了 Cookie 直接不予优化</p></li></ul><p>而 Session 的销毁有两种方式：</p><ol><li><p>超时销毁</p><p>服务器无法监测到浏览器关闭，若浏览器超时，则服务器关闭 该浏览器 session</p></li><li><p>手动销毁</p><p>用户点击安全退出，服务器立即销毁该 session</p></li></ol><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>HTTP 协议是一种无状态、无连接的协议，需要会话机制保存状态</p><p>Cookie 是将会话状态保存在<strong>浏览器客户端</strong>上</p><p>Session 是将会话状态保存在<strong>服务器端</strong>上</p><blockquote><p>Cookie 与 Session 机制都是为了保存会话状态</p></blockquote><p>Session 的实现原理中，每一个 Session 对象都会关联一个 sessionid，例如：</p><p><code>JSESSIONID=4C8483BE4C8782582D06B8420D209528</code></p><p>以上这个键值对数据其实就是 Cookie 对象</p><p>对于 Session 关联的 Cookie 来说，这个 Cookie 是被保存在浏览器的<strong>运行内存</strong>中</p><p>只要浏览器不关闭，用户再次发送请求时，会自动将内存中的 Cookie 发送给服务器</p><p>服务器就是根据这个 Cookie 找到 Session 对象</p><blockquote><p>Cookie 与 Session 属于 HTTP 协议的一部分，并非 Java 中的机制</p></blockquote><h2 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h2><p>Cookie 最终存储在浏览器客户端上</p><ul><li>运行内存（随浏览器关闭而消失）</li><li>硬盘文件（永久保存）</li></ul><h2 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h2><p>在未登录的情况下，向购物车存放商品，重启浏览器后商品还在？</p><ul><li><p>将购物车中的商品编号放到 Cookie 中，Cookie 保存在硬盘文件中，即使关闭浏览器，硬盘中的 Cookie 依旧保存</p><p>下一次再打开商城时，从硬盘中的 Cookie 文件中读取商品编号，并展示到浏览器</p><blockquote><p>硬盘中的 Cookie 若被清除则失效（缓存中的 Cookie 随浏览器关闭而失效）</p></blockquote></li></ul><p>十天内免登录</p><ul><li>用户输入了正确的用户名和密码，并且选中了十天免登录，登录成功后，浏览器会在硬盘中保存一个 Cookie，其中存储了用户名和密码等信息，十天有效</li><li>十天内用户再次访问时，浏览器自动提交关联的 Cookie 给服务器，服务器接收到 Cookie 之后，获取用户名和密码并验证，通过后，自动登录</li></ul><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>HTTP 协议规定：任何一个 Cookie 都是由 name 和 value 组成的，name 和 value 都是 String 类型</p><p>当浏览器发送请求时，会自动携带该 URL 请求路径下的 Cookie 数据给服务器</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>Java 的 Servlet 中提供了一个 Cookie 类专门表示 Cookie 数据</p><p><code>jakarta.servlet.http.Cookie</code></p><ol><li><p>Cookie(String name, String value)</p><p>Cookie 的构造方法，需要传递一个键值对</p><blockquote><p>Cookie 没有无参构造</p></blockquote></li><li><p>setMaxAge(int expiry)</p><p>设置 Cookie <strong>失效时间</strong>，秒为单位</p><ul><li><p>没有设置有效时间，则默认保存在浏览器运行内存中，随浏览器关闭而消失</p></li><li><p>有效时间大于0，表示将 Cookie 存储到硬盘文件</p><p>有效时间等于0，表示该 Cookie 被删除，主要应用在删除浏览器上的同名 Cookie</p><p>有效时间小于0，表示该 Cookie 不会被存储到硬盘文件中，与不调用该方法没有区别</p></li></ul></li><li><p>setPath(String uri)</p><p>设置 Cookie 请求路径</p><ul><li><p>关联路径</p><p>假设生成 Cookie 发送的请求路径是 <code>http://localhost:8080/servlet/cookie/generate</code></p><p>若 Cookie 没有设置 path，默认的 path 是 <code>http://localhost:8080/servlet/cookie</code>，以及该路径的子路径</p><p>以后的请求路径若是默认 path 或其子路径，Cookie 都会被自动携带到浏览器</p></li></ul></li></ol><p>收发 Cookie：</p><ol><li><p>void response.addCookie(Cookie cookie)</p><p>Java 程序将 Cookie 数据发送给浏览器</p></li><li><p>Cookie[] request.getCookie()</p><p>Java 程序获取浏览器携带的 Cookie</p><ul><li><p>返回值是一个数组，因为浏览器可能包含多个 Cookie</p></li><li><p>若浏览器没有提交 Cookie，则返回 null</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = request.getCookie();<br><span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>        <span class="hljs-comment">// 获取 Cookie 的 name</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cookie.getName();<br>        <span class="hljs-comment">// 获取 Cookie 的 value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> cookie.getValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ol><li>获取浏览器的 Cookie</li><li>遍历寻找想要销毁的 Cookie</li><li>cookie.setMaxAge 设置失效</li><li>cookie.setPath 保持与原 Cookie 路径一致</li><li>response.addCookie 告知浏览器该 Cookie 已失效</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取浏览器传递的 Cookie</span><br>Cookie[] cookies = request.getCookies();<br><span class="hljs-comment">// 遍历寻找用户名与密码 Cookie</span><br><span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;username&quot;</span>.equals(cookie.getName()) || <span class="hljs-string">&quot;password&quot;</span>.equals(cookie.getName())) &#123;<br>            <span class="hljs-comment">// 令 Cookie 失效</span><br>            cookie.setMaxAge(<span class="hljs-number">0</span>);<br>            <span class="hljs-comment">// 设置相同路径</span><br>            cookie.setPath(request.getContextPath());<br>            <span class="hljs-comment">// 告知浏览器</span><br>            response.addCookie(cookie);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSP</tag>
      
      <tag>Session</tag>
      
      <tag>Cookie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Project - oa</title>
    <link href="/2022/08/03/Project%20-%20oa/"/>
    <url>/2022/08/03/Project%20-%20oa/</url>
    
    <content type="html"><![CDATA[<h1 id="纯-Servlet-实现单表查询（B-x2F-S-架构）"><a href="#纯-Servlet-实现单表查询（B-x2F-S-架构）" class="headerlink" title="纯 Servlet 实现单表查询（B&#x2F;S 架构）"></a>纯 Servlet 实现单表查询（B&#x2F;S 架构）</h1><p>使用纯 Servlet 技术实现数据库单表查询</p><p>Github: <a href="https://github.com/Wataaaame/demo/tree/main/01-oa">https://github.com/Wataaaame/demo/tree/main/01-oa</a></p><h2 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a>v1.0</h2><ol><li><p>准备一张数据库表（sql 脚本）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table if exists jdept;<br>create table jdept (<br>deptno int primary key,<br>deptname varchar(255),<br>loc varchar(255)<br>);<br><br>insert into jdept values(10, &#x27;XiaoShou&#x27;, &#x27;Beijing&#x27;);<br>insert into jdept values(20, &#x27;YanFa&#x27;, &#x27;Shanghai&#x27;);<br>insert into jdept values(30, &#x27;JiShu&#x27;, &#x27;Guangzhou&#x27;);<br>insert into jdept values(40, &#x27;MeiTi&#x27;, &#x27;Shenzhen&#x27;);<br>commit;<br><br>select * from jdept;<br></code></pre></td></tr></table></figure><ul><li>使用英文方便 dos 窗口展示</li></ul><blockquote><p>vv：<code>create table [table_name] ();</code> 要用小括号</p></blockquote></li><li><p>准备一套 HTML 页面（项目原型）</p><ul><li><p>欢迎页面：index.html</p></li><li><p>列表页面：list.html（以列表页面为核心展开操作）</p></li><li><p>新增页面：add.html</p></li><li><p>修改页面：edit.html</p></li><li><p>详情页面：detail.html</p></li></ul></li><li><p>分析系统功能</p><p>操作连接了数据库，就代表一个独立的功能</p><ul><li>查看部门列表</li><li>新增部门</li><li>删除部门</li><li>查看部门详情</li><li>跳转到修改页面</li><li>修改部门信息</li></ul></li><li><p>在 IDEA 中搭建开发环境</p><ol><li><p>创建一个 webapp（添加 servlet.jar 到 classpath）</p></li><li><p>向 webapp 中添加 MySQL 驱动</p></li><li><p>JDBC 工具类</p><p><code>io.github.wataaaame.oa.utils.DBUtil</code></p></li></ol></li><li><p>实现</p><ul><li><p>查看部门列表</p><ol><li><p>修改前端页面超链接</p></li><li><p>编写 web.xml 文件</p></li><li><p>编写 DeptListServlet 类继承 HttpServlet 类，然后重写 doGet 方法</p><p><code>io.github.wataaaame.oa.web.action.DeptListServlet</code></p></li><li><p>在 DeptListServlet 类的 doGet 方法中连接数据库，查询所有部门，动态地展示部门列表页面</p><ul><li>分析 list.html 页面中静态部分、动态部分</li><li>list.html 页面中所有双引号要换成单引号，因为 out.print(“”) 有一对双引号，会引起冲突</li></ul></li></ol></li><li><p>查看详情</p><ol><li><p>修改超链接</p><p>项目名可以使用 <code>request.getContextPath</code> 动态获取</p><p>需要传递 <code>deptno</code> 供数据库查询</p></li><li><p>更新 web.xml 文件</p></li><li><p>编写 DeptDetailServlet 类，重写 doGet 方法，动态展示详情页</p></li></ol></li><li><p>删除部门</p><ol><li>在前端页面上写 JS 代码，提示用户是否删除</li><li>将前端程序写到后端 Java 代码中</li><li>配置 web.xml</li><li>写 DeptDeleteServlet 类，重写 doGet 方法</li><li>删除成功和失败的处理</li></ol></li><li><p>新增部门</p><p>最后保存成功之后，转发到 <code>/dept/list</code> 时，会出现 405</p><ol><li>保存使用的是 post 请求，底层要执行 doPost 方法</li><li>转发时一次请求，之前是 post，之后还需 post</li><li><code>/dept/list</code> 中只有一个 doGet 方法</li></ol><p>解决方案：</p><ol><li><code>/dept/list</code> 中添加 doPost 方法，然后在 doPost 方法中调用 doGet 方法</li><li><em>重定向</em></li></ol></li><li><p>跳转到修改页面</p></li><li><p>修改部门</p></li></ul></li></ol><h2 id="v1-1"><a href="#v1-1" class="headerlink" title="v1.1"></a>v1.1</h2><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>服务器内跳转改用重定向</p><ul><li>删除之后</li><li>修改之后</li><li>保存之后</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (count == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 执行成功跳转回 list</span><br>    <span class="hljs-comment">//            req.getRequestDispatcher(&quot;/dept/list&quot;).forward(req, resp);</span><br>    <span class="hljs-comment">// 重定向</span><br>    resp.sendRedirect(contextPath + <span class="hljs-string">&quot;/dept/list&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 执行失败跳转到 error</span><br>    <span class="hljs-comment">//            req.getRequestDispatcher(&quot;/error.html&quot;).forward(req, resp);</span><br>    <span class="hljs-comment">// 重定向</span><br>    resp.sendRedirect(contextPath + <span class="hljs-string">&quot;/error.html&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="v1-2"><a href="#v1-2" class="headerlink" title="v1.2"></a>v1.2</h2><h3 id="Servlet-注解"><a href="#Servlet-注解" class="headerlink" title="Servlet 注解"></a>Servlet 注解</h3><p>注解解决了配置文件的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&#123;&quot;/dept/list&quot;, &quot;/dept/add&quot;, &quot;/dept/edit&quot;, &quot;/dept/modify&quot;, &quot;/dept/detail&quot;, &quot;/dept/delete&quot;&#125;)</span><br><span class="hljs-comment">// 模板类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeptServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h3><p>Servlet app 过多会导致类爆炸</p><p>以前的设计是一个请求一个 Servlet 类</p><p>可以一个请求对应一个方法，一个业务对应一个 Servlet 类</p><blockquote><p>处理部门相关业务对应一个 DeptServlet，处理用户相关业务对应一个 UserServlet</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 模板方法设计模式</span><br><span class="hljs-comment">// 重写 service 方法而不是 doGet/doPost，以应对所有请求</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">// 获取 Servlet Path</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">servletPathPath</span> <span class="hljs-operator">=</span> req.getServletPath();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dept/list&quot;</span>.equals(servletPathPath)) &#123;<br>        doList(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dept/add&quot;</span>.equals(servletPathPath)) &#123;<br>        doAdd(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dept/edit&quot;</span>.equals(servletPathPath)) &#123;<br>        doEdit(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dept/modify&quot;</span>.equals(servletPathPath)) &#123;<br>        doModify(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dept/detail&quot;</span>.equals(servletPathPath)) &#123;<br>        doDetail(req, resp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/dept/delete&quot;</span>.equals(servletPathPath)) &#123;<br>        doDel(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个请求再通过方法实现即可</p><h2 id="设计缺陷"><a href="#设计缺陷" class="headerlink" title="设计缺陷"></a>设计缺陷</h2><p>在 Servlet 中编写前端代码</p><ul><li><p>难度大、繁琐</p></li><li><p>耦合度非常高</p></li><li><p>代码非常不美观</p></li><li><p>维护成本太高</p><p>改动前端代码，就需要重新编译 Java 代码，生成 新的 class 文件，打一个新的 war 包，重新发布</p></li></ul><h1 id="使用-Servlet-JSP-改造"><a href="#使用-Servlet-JSP-改造" class="headerlink" title="使用 Servlet + JSP 改造"></a>使用 Servlet + JSP 改造</h1><p>使用 Servlet 处理业务，收集数据</p><p>使用 JSP 展示数据</p><h2 id="v2-1"><a href="#v2-1" class="headerlink" title="v2.1"></a>v2.1</h2><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><ol><li><p>将 HTML 资源文件转换成 JSP 文件，添加中文输出格式 page 指令后，复制到 web 根目录</p></li><li><p>完成页面正常流转</p><p>在 JSP 中动态地获取路径</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;a href=<span class="hljs-string">&quot;&lt;%=request.getContextPath()%&gt;/list.jsp&quot;</span>&gt;&lt;/a&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="实现登录页面"><a href="#实现登录页面" class="headerlink" title="实现登录页面"></a>实现登录页面</h3><ol><li><p>数据库中添加一个用户表（juser）</p><ul><li>存储用户登录信息，最基本包括用户名和登录密码</li><li>密码一般在数据库表当中存储的是密文（这里先采用明文方式）</li><li>向表中插入数据</li></ul></li><li><p>实现登录页面</p><ul><li><p>登录表单（post），有用户名和密码输入框</p></li><li><p>用户点击登录，提交表单（用户名和密码）</p></li></ul></li><li><p>后台对应 Servlet 处理登录请求</p><ul><li>登录成功：部门列表页面</li><li>登录失败：跳转失败页面</li></ul></li></ol><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>登录成功后，可以将用户信息存储到 Session 当中</p><p>如果 Session 中有用户信息代表登录成功，否则跳转到登录页面</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>实现十天免登录</p><ol><li><p>修改前端页面，加一个十天内免登录的复选框</p><p>用户选择了复选框表示支持十天免登录</p></li><li><p>修改 Servlet 中的 login 方法</p><p>如果用户登录成功，并且选中了十天免登录，则在 login 方法中创建 Cookie，用来存储用户名和密码，并且设置默认 path，设置有效期，最后将 Cookie 响应给浏览器（浏览器将自动保存这两个 Cookie 到硬盘中，有效期为10天）</p></li><li><p>用户再次访问该网站时，有两个走向</p><ol><li>符合自动登录条件，直接跳转到部门列表页面</li><li>不符合自动登录条件，跳转到登录页面</li></ol><p>配置 web.xml 文件，新增 AutoLogin 为欢迎页面</p></li></ol><h1 id="使用-EL-JSTL-改造"><a href="#使用-EL-JSTL-改造" class="headerlink" title="使用 EL + JSTL 改造"></a>使用 EL + JSTL 改造</h1><h2 id="v3-1"><a href="#v3-1" class="headerlink" title="v3.1"></a>v3.1</h2><ul><li><p>使用 EL + JSTL 改造 JSP 页面</p></li><li><p>使用 base 标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.scheme&#125;://$&#123;pageContext.request.serverName&#125;:$&#123;pageContext.request.serverPort&#125;$&#123;pageContext.request.contextPath&#125;/&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="设计缺陷-1"><a href="#设计缺陷-1" class="headerlink" title="设计缺陷"></a>设计缺陷</h2><p>若还有其他 Servlet，同样需要判断登录状态才能够使用，则 DeptServlet 中的 Cookie 判断需要重复写，过于繁琐</p><h1 id="使用-Filter-过滤器改造"><a href="#使用-Filter-过滤器改造" class="headerlink" title="使用 Filter 过滤器改造"></a>使用 Filter 过滤器改造</h1><h2 id="v4-1"><a href="#v4-1" class="headerlink" title="v4.1"></a>v4.1</h2><p>使用 Filter 过滤器实现登录验证、字符集配置</p><ul><li>传递来的是 HttpServletRequest 与 HttpServletResponse，在 Filter 中使用需做强制类型转换</li></ul><h1 id="使用监听器统计登录在线人数"><a href="#使用监听器统计登录在线人数" class="headerlink" title="使用监听器统计登录在线人数"></a>使用监听器统计登录在线人数</h1><h2 id="v5-1"><a href="#v5-1" class="headerlink" title="v5.1"></a>v5.1</h2><p>用户登录</p><ol><li>session.setAttribute()</li></ol><p>用户退出</p><ol><li>session.removeAttribute()</li><li>Session 超时销毁</li></ol><p>设计方法：</p><ol><li><p>写一个 User 类实现 HttpSessionBindingListener 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueBound</span><span class="hljs-params">(HttpSessionBindingEvent event)</span> &#123;<br>    <span class="hljs-comment">// 用户登录</span><br>    <span class="hljs-comment">// 获取 ServletContext</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> event.getSession().getServletContext();<br>    <span class="hljs-comment">// 获取在线人数变量</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer)application.getAttribute(<span class="hljs-string">&quot;onlineCount&quot;</span>);<br>    <span class="hljs-comment">// 第一个人登录时，onlineCount 为空，需手动指定为1</span><br>    <span class="hljs-keyword">if</span> (onlineCount == <span class="hljs-literal">null</span>) &#123;<br>        application.setAttribute(<span class="hljs-string">&quot;onlineCount&quot;</span>, <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则在线人数加一，并存储到域中</span><br>        application.setAttribute(<span class="hljs-string">&quot;onlineCount&quot;</span>, ++onlineCount);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">valueUnbound</span><span class="hljs-params">(HttpSessionBindingEvent event)</span> &#123;<br>    <span class="hljs-comment">// 用户退出</span><br>    <span class="hljs-comment">// 获取 application 域</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> event.getSession().getServletContext();<br>    <span class="hljs-comment">// 获取在线用户人数</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">onlineCount</span> <span class="hljs-operator">=</span> (Integer)application.getAttribute(<span class="hljs-string">&quot;onlineCount&quot;</span>);<br>    <span class="hljs-comment">// 在线人数减1后存储到 application 域</span><br>    application.setAttribute(<span class="hljs-string">&quot;onlineCount&quot;</span>, --onlineCount);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改代码，登录时将 User 对象存储到 session 中</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Servlet</tag>
      
      <tag>JSP</tag>
      
      <tag>EL</tag>
      
      <tag>JSTL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb - Note03 HTTP &amp; HttpServlet</title>
    <link href="/2022/07/29/JavaWeb%20-%20Note03%20HTTP%20&amp;%20HttpServlet/"/>
    <url>/2022/07/29/JavaWeb%20-%20Note03%20HTTP%20&amp;%20HttpServlet/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><p>W3C 制定的一种<strong>超文本传输协议</strong>（通信协议，传输非普通文本，例如流媒体：声音、视频、图片等）</p><p>B（Browser）与 S（Server）之间收发数据都遵循此协议，互不依赖（解耦合）</p><p>HTTP 协议包括：请求（request）协议、响应（response）协议</p><h2 id="请求协议"><a href="#请求协议" class="headerlink" title="请求协议"></a>请求协议</h2><p>包括：请求行、请求头、空白行、请求体</p><p>get 请求报文：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 请求行<br>GET <span class="hljs-regexp">/servlet04/g</span>etServlet?username=vv&amp;password=<span class="hljs-number">123</span> HTTP/<span class="hljs-number">1.1</span><br><span class="hljs-regexp">//</span> 请求头<br>Host: localhost:<span class="hljs-number">8080</span><br>Connection: keep-alive<br>Upgrade-Insecure-Requests: <span class="hljs-number">1</span><br>User-Agent: Mozilla<span class="hljs-regexp">/5.0 (Windows NT 6.1; WOW64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/86.0.4240.198 Safari/</span><span class="hljs-number">537.36</span><br>Accept: text<span class="hljs-regexp">/html,application/</span>xhtml+xml,application<span class="hljs-regexp">/xml;q=0.9,image/</span>avif,image<span class="hljs-regexp">/webp,image/</span>apng,*<span class="hljs-regexp">/*;q=0.8,application/</span>signed-exchange;v=b3;q=<span class="hljs-number">0.9</span><br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?<span class="hljs-number">1</span><br>Sec-Fetch-Dest: document<br>Referer: http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/servlet04/i</span>ndex.html<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span><br><span class="hljs-regexp">//</span> 空白行<br><br><span class="hljs-regexp">//</span> 请求体<br><br></code></pre></td></tr></table></figure><p>post 请求报文：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 请求行<br>POST <span class="hljs-regexp">/servlet04/</span>postServlet HTTP/<span class="hljs-number">1.1</span><br><span class="hljs-regexp">//</span> 请求头<br>Host: localhost:<span class="hljs-number">8080</span><br>Connection: keep-alive<br>Content-Length: <span class="hljs-number">24</span><br>Cache-Control: max-age=<span class="hljs-number">0</span><br>Upgrade-Insecure-Requests: <span class="hljs-number">1</span><br>Origin: http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><br>Content-Type: application/x-www-form-urlencoded<br>User-Agent: Mozilla<span class="hljs-regexp">/5.0 (Windows NT 6.1; WOW64) AppleWebKit/</span><span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome<span class="hljs-regexp">/86.0.4240.198 Safari/</span><span class="hljs-number">537.36</span><br>Accept: text<span class="hljs-regexp">/html,application/</span>xhtml+xml,application<span class="hljs-regexp">/xml;q=0.9,image/</span>avif,image<span class="hljs-regexp">/webp,image/</span>apng,*<span class="hljs-regexp">/*;q=0.8,application/</span>signed-exchange;v=b3;q=<span class="hljs-number">0.9</span><br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?<span class="hljs-number">1</span><br>Sec-Fetch-Dest: document<br>Referer: http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/servlet04/i</span>ndex.html<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span><br><span class="hljs-regexp">//</span> 空白行<br><br><span class="hljs-regexp">//</span> 请求体<br>username=ee&amp;password=<span class="hljs-number">456</span><br></code></pre></td></tr></table></figure><blockquote><p>F12，找到 network，通过这个页面可以查看协议的具体内容响应协议</p></blockquote><blockquote><p>请求行、请求头在 Header - Request Header 中</p><p>请求体在 Header - Form Data 中</p></blockquote><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>包括三部分：</p><ol><li><p>请求方式（7种）</p><ul><li><p><strong>get</strong></p></li><li><p><strong>post</strong></p></li><li><p>delete</p></li><li><p>put</p></li><li><p>head</p></li><li><p>options</p></li><li><p>trace</p></li></ul></li><li><p>URI</p><ul><li>URI：统一资源<strong>标识符</strong>，代表网络中某个资源的名称（无法定位）</li><li>URL：统一资源<strong>定位符</strong>，代表网络中某个资源，通过 URL 可以定位到该资源</li></ul><p>URL 包括 URI，e.g：</p><ul><li>URL：<code>http://localhost:8080/servlet/index.html</code></li><li>URI：<code>servlet/index.html</code></li></ul></li><li><p>协议版本号</p></li></ol><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>作为了解</p><ol><li>请求的主机</li><li>主机的端口</li><li>浏览器信息</li><li>平台信息</li><li>cookie 信息</li><li>…</li></ol><h3 id="空白行"><a href="#空白行" class="headerlink" title="空白行"></a>空白行</h3><p>用来区分请求头和请求体</p><h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><p>向服务器发送的具体数据</p><h2 id="get-amp-post"><a href="#get-amp-post" class="headerlink" title="get &amp; post"></a>get &amp; post</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p>get</p><ol><li><p>发送数据时，在请求行发送数据，发送的数据回显在地址栏</p></li><li><p>只能发送普通字符串，不同浏览器有不同长度限制（无明确规范）</p></li><li><p>get 请求绝对安全，只是为了从服务器获取数据，不会对服务器造成威胁（get 请求不应用在敏感信息）</p></li><li><p>支持缓存</p><p>任何一个 get 请求最终的 “响应结果” 都会被浏览器缓存起来</p><p>在浏览器缓存当中，一个 get 请求对应一个资源</p><blockquote><p>实际上，只要发送 get 请求，浏览器就会先从本地缓存找，找不到才会去服务器获取。目的是提高用户体验</p></blockquote><p>若不想 get 请求走缓存，也就是希望每次都从服务器获取，可以在路径后加一个时间戳，这样资源名每时每刻都在改变，无法从本地缓存找到</p></li></ol></li><li><p>post</p><ol><li><p>发送数据时，在请求体中发送，不会回显在浏览器地址栏</p></li><li><p>可以发送任何类型数据，包括：普通字符串、流媒体（视频、声音、图片…）等，可以发送大数据量，理论上无长度限制</p></li><li><p>post 请求有危险，向服务器提交数据，数据可能有危险，所以一般情况下拦截数据，大部分都会监听 post 请求</p></li><li><p>不支持缓存</p><p>目的是给服务器提交数据，返回的是处理结果，缓存无意义</p></li></ol></li></ul><blockquote><p>二者发送请求的数据格式相同，只是位置不同</p><p>数据会挂在 URL 后面，且 URL 与数据之间会添加一个“？”</p><p>http:&#x2F;&#x2F;[url]?name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value…</p><p>其中，以 form 表单为例：</p><ul><li>name：表单中输入域控件的 name</li><li>value：表单中输入域控件的 value</li></ul><p>所有的 value 皆是字符串</p></blockquote><h3 id="发送途径"><a href="#发送途径" class="headerlink" title="发送途径"></a>发送途径</h3><ul><li><p>post：目前为止，form 表单中，method 设置为 post 则为 post</p></li><li><p>get：除 post 以外，其他一律为 get</p><p>如：输入 URL、超链接、form 表单、method 为 get</p></li></ul><h3 id="使用情形"><a href="#使用情形" class="headerlink" title="使用情形"></a>使用情形</h3><ul><li><p>get：</p><p>从服务器端获取数据</p></li><li><p>post：</p><p>向服务器端发送数据</p><p>大部分 form 表单中填写大量数据</p><p>form 表单中存在敏感信息</p><p>做文件上传（非普通文本）</p></li></ul><h2 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议"></a>响应协议</h2><p>包括：状态行、响应头、空白行、响应体</p><p>具体报文：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml">// 状态行<br>HTTP/1.1 200 ok<br>// 响应头<br>Content-Type: text/html;charset=ISO-8859-1<br>Content-Length: 94<br>Date: Fri, 29 Jul 2022 09:53:15 GMT<br>Keep-Alive: timeout=20<br>Connection: keep-alive<br>// 空白行<br><br>// 响应体<br><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>get page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>get page<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>状态行、响应头在 Header - Response Header</p><p>响应体在 Response</p></blockquote><blockquote><p>若想响应体好看，可以使用 out.println()，此为源代码换行；网页展示换行需输出 <code>&lt;br&gt;</code> 标签</p></blockquote><h3 id="状态行"><a href="#状态行" class="headerlink" title="*状态行"></a>*状态行</h3><p>三部分组成：</p><ol><li><p>协议版本号</p><p>HTTP&#x2F;1.1</p></li><li><p>状态码（HTTP 协议规定的状态号，对应着不同的响应结果）</p><ul><li><p>200 请求响应成功</p></li><li><p>404 访问的资源不存在（前端错误）、路径错误或服务器资源没有启动成功</p></li><li><p>405 前端发送的请求方式与后端请求处理方式不一致，例如：</p><ul><li>前端 post 请求，后端按 get 请求处理</li><li>前端 get 请求，后端按 post 请求处理</li></ul></li><li><p>500 服务器端的程序出现异常（后端错误）</p></li></ul><blockquote><p>4 开头一般为浏览器端错误</p><p>5 开头一般为服务器端错误</p></blockquote></li><li><p>状态描述信息</p><ul><li>ok 表示正常成功结束</li><li>not found 表示资源找不到</li></ul></li></ol><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>作为了解</p><ol><li>响应内容类型</li><li>响应内容长度</li><li>响应时间</li><li>…</li></ol><h3 id="空白行-1"><a href="#空白行-1" class="headerlink" title="空白行"></a>空白行</h3><p>分隔响应头和响应体</p><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>响应正文，是一个长的字符串，被浏览器渲染、解释并运行，最终展示效果</p><h1 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h1><p>在模板类的模板方法中定义核心算法骨架（可以使用 final 修饰，防止修改），具体的实现步骤可以延迟到子类当中完成（可以使用 abstract 关键字）</p><h1 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h1><p><code>jakarta.servlet.http.HttpServlet</code></p><p>HttpServlet 类专门为 HTTP 协议准备，比 GenericServlet 更适合 HTTP 协议下的开发</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ol><li><p>jakarta.servlet.http.HttpServlet</p><p>HTTP 协议专用的 Servlet 抽象类</p></li><li><p>jakarta.servlet.http.HttpServletRequest</p><p>HTTP 协议专用的请求对象（简称 request 对象）</p><p>封装了请求协议的全部内容（WEB 服务器解析）</p></li><li><p>jakarta.servlet.http.HttpServletResponse</p><p>HTTP 协议专用的响应对象</p></li></ol><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>HttpServlet 源码分析（按生命周期）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1 创建对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">// 用户第一次请求，创建对象时，会执行这个无参构造方法</span><br>    <span class="hljs-keyword">public</span> HelloServlet &#123;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 2 调用父类 init</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span>, ServletConfig, java.io.Serializable &#123;<br>    <span class="hljs-comment">// 用户第一次请求，第一次创建对象后，这个 init 方法会被执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-built_in">this</span>.config = config;<br>        <span class="hljs-comment">// 3 执行无参 init</span><br>        <span class="hljs-built_in">this</span>.init();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 3 第一次执行时，有参 init 中会执行无参 init</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inti</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-comment">// NULL by default</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 4 调用 service 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-comment">// 用户只要发送一次请求，service 方法就执行一次</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest req, ServletResponse res)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        HttpServletRequest request;<br>        HttpServletResponse response;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 将 ServletRequest 和 ServletResponse 向下转型为带有 Http 的 HttpservletRequest 和 HttpServletResponse</span><br>            request = (HttpServletRequest)req;<br>            response = (HttpServletResponse)res;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassCastException var6) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(lStrings.getString(<span class="hljs-string">&quot;http.non_http&quot;</span>));<br>        &#125;<br><br>        <span class="hljs-comment">// 4 调用重载的 service 方法</span><br>        <span class="hljs-built_in">this</span>.service(request, response);<br>    &#125;<br><br>    <span class="hljs-comment">// 4 调用重载的 service 方法</span><br>    <span class="hljs-comment">// 两个参数都带有 Http</span><br>    <span class="hljs-comment">// 这个 service 是一个模板方法，在该方法中定义核心算法骨架，具体的实现步骤延迟到子类中去完成</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 获取请求方式（大写），可能是7种请求方式之一</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<br>        <span class="hljs-type">long</span> lastModified;<br>        <span class="hljs-comment">// 如果请求方式是 GET</span><br>        <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;GET&quot;</span>)) &#123;<br>            lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);<br>            <span class="hljs-keyword">if</span> (lastModified == -<span class="hljs-number">1L</span>) &#123;<br>                <span class="hljs-comment">// 执行 doGet</span><br>                <span class="hljs-built_in">this</span>.doGet(req, resp);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> ifModifiedSince;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ifModifiedSince = req.getDateHeader(<span class="hljs-string">&quot;If-Modified-Since&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var9) &#123;<br>                    ifModifiedSince = -<span class="hljs-number">1L</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (ifModifiedSince &lt; lastModified / <span class="hljs-number">1000L</span> * <span class="hljs-number">1000L</span>) &#123;<br>                    <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);<br>                    <span class="hljs-built_in">this</span>.doGet(req, resp);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    resp.setStatus(<span class="hljs-number">304</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;HEAD&quot;</span>)) &#123;<br>            lastModified = <span class="hljs-built_in">this</span>.getLastModified(req);<br>            <span class="hljs-built_in">this</span>.maybeSetLastModified(resp, lastModified);<br>            <span class="hljs-built_in">this</span>.doHead(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;<span class="hljs-comment">// 如果请求方式是 POST</span><br>            <span class="hljs-comment">// 执行 doPost</span><br>            <span class="hljs-built_in">this</span>.doPost(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;PUT&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doPut(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;DELETE&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doDelete(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;OPTIONS&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doOptions(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.equals(<span class="hljs-string">&quot;TRACE&quot;</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.doTrace(req, resp);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">errMsg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_not_implemented&quot;</span>);<br>            Object[] errArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;method&#125;;<br>            errMsg = MessageFormat.format(errMsg, errArgs);<br>            resp.sendError(<span class="hljs-number">501</span>, errMsg);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>若直接继承 HttpServlet，直接重写 HttpServlet 中的 serice 方法可行，但享受不到 HTTP 协议专属服务（如错误代码提示）</p><blockquote><p>未重写 doGet 等处理请求方法，则会执行父类 HttpServlet 中的 doGet 输出错误信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> lStrings.getString(<span class="hljs-string">&quot;http.method_get_not_supported&quot;</span>);<br>    <span class="hljs-built_in">this</span>.sendMethodNotAllowed(req, resp, msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>避免错误信息的方法：后端重写什么类型的请求，前端就发送什么类型的请求</p></blockquote><h2 id="最终开发步骤"><a href="#最终开发步骤" class="headerlink" title="最终开发步骤"></a>最终开发步骤</h2><ol><li>编写一个 Servlet 类，直接继承 HttpServlet</li><li>重写 doGet&#x2F;doPost 方法</li><li>配置 web.xml 文件</li><li>准备前端页面，form 表单中指定路径即可</li></ol><h1 id="web-站点欢迎页面"><a href="#web-站点欢迎页面" class="headerlink" title="web 站点欢迎页面"></a>web 站点欢迎页面</h1><p>对于一个 webapp，可以设置它的欢迎页面，当访问这个 webapp 或 访问这个 web 站点时，没有指定任何“资源路径”，这时会访问欢迎页面</p><p>之前访问的是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/servlet/</span>login.html<br></code></pre></td></tr></table></figure><p>欢迎页面访问方式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>:localhost:<span class="hljs-number">8080</span>/servlet<br></code></pre></td></tr></table></figure><h2 id="设置欢迎页面"><a href="#设置欢迎页面" class="headerlink" title="设置欢迎页面"></a>设置欢迎页面</h2><ol><li><p>web 目录下新建一个文件 welcome.html</p></li><li><p>在 web.xml 中配置 <code>&lt;welcome-file-list&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 不需要“/”，且从 webapp 的根目录开始 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>welcome.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 可以设置多个，优先级从上往下 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>启动服务器，地址输入到项目名即可</p></li></ol><p>欢迎页面名为 index 时，可自动访问不需要配置，是因为 Tomcat 已提前配置好</p><p>实际上配置欢迎页面有两个方法：</p><ol><li><p>在 webapp 内部的 web.xml 中（局部配置）</p></li><li><p>在 CATALINA_HOME\conf\web.xml 中（全局配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">welcom-file-list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">welcom-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcom-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcom-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-name">welcom-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcom-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcom-file</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">welcom-file-list</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>欢迎页还可以是一个 Servlet 动态页面，路径直接使用 url-pattern（去掉斜杠）</p></blockquote><h1 id="HttpServletRequest-接口详解"><a href="#HttpServletRequest-接口详解" class="headerlink" title="*HttpServletRequest 接口详解"></a>*HttpServletRequest 接口详解</h1><p><code>jakarta.servlet.http.HttpServletReques</code></p><p>该接口是 Servlet 规范中的一员，父接口是 ServletRequest</p><p>由 WEB 服务器实现该接口，封装了 <strong>HTTP 请求协议</strong>。用户发送请求时，遵循了 HTTP 协议，WEB 服务器将 HTTP 协议中的信息及数据全部解析出来，然后 WEB 服务器把这些信息封装到 HttpServletRequest 对象中，传递给 Java 程序员</p><p>一次请求对应一个 request 和 response</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p><strong>获取用户提交的数据</strong></p><p>不建议直接使用 Map 集合存储提交的数据，因为 Map 集合 key 重复则 value 覆盖</p><p>采用 <code>Map&lt;String, String[]&gt;</code> 的方式存储</p><ol><li><p><strong>String getParameter(String name)</strong></p><p>根据 Key 获取 value 一维数组中的第一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<span class="hljs-comment">// vv</span><br>System.out.println(req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure></li><li><p>Map&lt;String String[]&gt; getParameterMap()</p><p>获取 Map 集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 req Map 集合</span><br>Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();<br><span class="hljs-comment">// 获取 keySet</span><br>Set&lt;String&gt; parameterKeys = parameterMap.keySet();<br><span class="hljs-keyword">for</span> (String key : parameterKeys) &#123;<br>    System.out.print(key + <span class="hljs-string">&quot;=&quot;</span>);<br>    <span class="hljs-comment">// 通过 key 遍历数组</span><br>    <span class="hljs-keyword">for</span> (String value : parameterMap.get(key)) &#123;<br>        System.out.print(value + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    username=vv </span><br><span class="hljs-comment">    password=123 </span><br><span class="hljs-comment">    habit=sing guitar</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>Enumeration&lt;java.lang.String&gt; getParameterNmes()</p><p>获取 Map 集合中所有的 Key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// getParameterNames 获取所有的 key</span><br>Enumeration&lt;String&gt; parameterNames = req.getParameterNames();<br><span class="hljs-keyword">while</span> (parameterNames.hasMoreElements()) &#123;<br>    System.out.print(parameterNames.nextElement() + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    username password habit</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>String[] getParameterVlues(String name)</p><p>根据 Key 获取 Map 集合的 value</p><p>通常在复选框中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// getParameterNames 获取所有的 key</span><br>Enumeration&lt;String&gt; parameterNames = req.getParameterNames();<br><span class="hljs-keyword">while</span> (parameterNames.hasMoreElements()) &#123;<br>    System.out.print(parameterNames.nextElement() + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    vv 123 sing guitar</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h2><ol><li><p>String getRemoteAddr()</p><p>获取客户端地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(req.getRemoteAdder());<span class="hljs-comment">// 127.0.0.1</span><br></code></pre></td></tr></table></figure></li><li><p>void setCharacterEncoding(String env)</p><p>设置请求体的字符集，一般用于解决 POST 乱码问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>Tomcat 10 之后，request 请求体中默认为 UTF-8，不需要设置字符集，不会出现乱码问题</p><p>Tomcat 9 之前（包括9），如果前端 post 方法提交中文，会出现乱码问题</p></blockquote><blockquote><p>响应同样会有乱码问题，在 setContentType 中设置字符集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">resp.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>get 请求不会出现乱码，因为 <code>CATALINA_HOME\conf\server.xml</code> 中有个 Connector 标签，其中的 URIEncoding 属性用以配置字符集编码</p><p>Tomcat 9 之后（包括）默认为 UTF-8 的格式（之前为 ISO-8859-1）</p></blockquote></li><li><p><strong>String getContextPath()</strong></p><p>获取应用根路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> request.getContextPath();<br><span class="hljs-comment">// /servlet08</span><br></code></pre></td></tr></table></figure></li><li><p>String getMethod()</p><p>获取请求方式</p></li><li><p>String getRequestURI()</p><p>获取请求 URI（带项目名）</p></li><li><p>String getServletPath()</p><p>获取请求 URI（不带项目名）</p></li></ol><h1 id="请求域对象"><a href="#请求域对象" class="headerlink" title="请求域对象"></a>请求域对象</h1><p>请求域对象要比应用域对象范围小很多，生命周期也短很多</p><p>请求域只在一次请求内有效（HttpServletRequest request 对象）</p><p>请求域也有这三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 向域中绑定数据</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setAttribute</span><span class="hljs-params">(String name, Object obj)</span>;<br><span class="hljs-comment">// 从域中通过 name 取数据</span><br>Object <span class="hljs-title function_">getAttribute</span><span class="hljs-params">(String name)</span>;<br><span class="hljs-comment">// 将域中绑定的数据移除</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAttribute</span><span class="hljs-params">(String name)</span>;<br></code></pre></td></tr></table></figure><p>与应用域选用原则：</p><ul><li>尽量使用小的域对象，占用资源较少</li></ul><h2 id="跨请求域"><a href="#跨请求域" class="headerlink" title="跨请求域"></a>跨请求域</h2><p>使用 Servlet 中的转发机制，执行完 A 后跳转到 B，转发为一次跳转</p><p>请求转发器：</p><p><code>RequestDispatcher getRequestDispatcher(String path)</code></p><p>请求转发器方法：</p><ol><li>void forward(ServvletRequest req, ServletResponse resp)</li></ol><p>请求步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第一步：</span><br><span class="hljs-comment">// A 中获取请求转发器</span><br><span class="hljs-comment">// 将下一个跳转的资源告诉服务器</span><br><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">dispatcher</span> <span class="hljs-operator">=</span> req.getRequestDispatcher(<span class="hljs-string">&quot;/b&quot;</span>);<br><span class="hljs-comment">// 第二步：</span><br><span class="hljs-comment">// 调用请求转发器的 forward 方法传递 A 中 request，进行转发</span><br>dispatcher.forward(req, resp)<br></code></pre></td></tr></table></figure><ul><li><p>转发的下一步不一定是 Servlet，支持所有 Tomcat 中的合法资源</p><p>转发路径以 “&#x2F;” 开始，不加项目名</p></li></ul><h2 id="易混淆的两个方法"><a href="#易混淆的两个方法" class="headerlink" title="易混淆的两个方法"></a>易混淆的两个方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> req.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br></code></pre></td></tr></table></figure><p>第一个方法：获取用户在浏览器上提交的数据</p><p>第二个方法：获取请求域中绑定的数据</p><h1 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h1><p><a href="https://wataaaame.github.io/2022/08/03/Project%20-%20oa/">纯 Servlet 实现单表 CRUD（B&#x2F;S 架构）</a></p><h2 id="资源跳转"><a href="#资源跳转" class="headerlink" title="资源跳转"></a>资源跳转</h2><p>在一个 web 应用中通过两种方式，可以完成资源的跳转</p><ol><li>转发</li><li>重定向</li></ol><p>区别：</p><ul><li><p>代码上</p><ol><li><p>转发</p><p>将本 Servlet 中的 request 与 response 通过 foward 方法转发给下一个 Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取请求转发器对象</span><br><span class="hljs-type">RequestDispatcher</span> <span class="hljs-variable">dispatcher</span> <span class="hljs-operator">=</span> request.getRequestDispatcher(<span class="hljs-string">&quot;dept/list&quot;</span>);<br><span class="hljs-comment">// 调用请求转发器对象的 forward 方法转发</span><br>dispatcher.forward(request, response);<br><br><span class="hljs-comment">// 合并一行代码</span><br>request.getRequestDispatcher(<span class="hljs-string">&quot;dept/list&quot;</span>).forward(request, response);<br></code></pre></td></tr></table></figure></li><li><p>重定向</p><p>调用 response 中的 sendRedirect 方法，将路径响应给浏览器，浏览器又自发地向服务器发送了一次全新的请求</p><p>第一次请求：servlet&#x2F;a</p><p>第二次请求：servlet&#x2F;b</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 需要以项目名开始</span><br>response.sendRedirect(request.getContextPath() + <span class="hljs-string">&quot;/b&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol></li><li><p>形式上</p><ol><li><p>转发（一次请求）</p><p>请求前与请求后浏览器地址栏不变</p></li><li><p>重定向（两次请求）</p><p>请求后浏览器地址栏变成最后一次发送的请求</p></li></ol></li><li><p>本质区别：</p><ol><li><p>转发是由 WEB 服务器来控制</p><p><img src="/images/image-javaweb/note03-01-%E8%BD%AC%E5%8F%91%E5%8E%9F%E7%90%86.PNG" alt="转发原理"></p></li><li><p>重定向是浏览器完成的</p><p><img src="/images/image-javaweb/note03-02-%E9%87%8D%E5%AE%9A%E5%90%91%E5%8E%9F%E7%90%86.PNG" alt="重定向原理"></p></li></ol></li></ul><p>如何选择：</p><ol><li>如果在上一个 Servlet 中向 request 域中绑定了数据，希望从下一个 Servlet 中把 request 域中的数据取出时使用<strong>转发</strong></li><li>剩下所有的请求均使用<strong>重定向</strong></li></ol><blockquote><p>保存转发存在刷新问题，若重复刷新，则导致反复提交；重定向刷新的是最后一次请求</p></blockquote><h2 id="Servlet-注解"><a href="#Servlet-注解" class="headerlink" title="Servlet 注解"></a>Servlet 注解</h2><p><code>jakarta.servlet.annotation.WebServlet</code></p><p>分析 oa 项目中的 web.xml 文件</p><ol><li>配置信息过多，对于大项目体量而言不利</li><li>web.xml 中进行 Servlet 信息配置，开发效率低，每个都需要配置</li><li>配置文件很少被修改，可以直接写到 Java 类中</li></ol><blockquote><p>Servlet 3.0 之后，推出了各种基于注解式开发</p></blockquote><h3 id="开发优点"><a href="#开发优点" class="headerlink" title="开发优点"></a>开发优点</h3><ol><li>效率高，不需要编写大量配置信息，直接在 Java 类上使用注解进行标注，简化配置</li><li>web.xml 文件体积变小</li></ol><p>一般使用<strong>注解+配置文件</strong>的开发模式</p><p>不会经常变化修改的配置使用注解，可能修改的写到配置文件中</p><h3 id="注解属性"><a href="#注解属性" class="headerlink" title="注解属性"></a>注解属性</h3><ol><li><p>name：指定 Servlet 名字，等同于 <code>&lt;servlet-name&gt;</code></p></li><li><p>urlPatterns：指定映射路径，可以指定多个 String</p><p>若只有一个路径，则大括号可以省略</p></li><li><p>value：同 urlPatterns</p><p>若只有一个路径，则大括号可以省略</p><p>如果注解名是 value，则属性名也可以忽略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/wel&quot;)</span><br></code></pre></td></tr></table></figure><p>支持模糊匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/dept/*&quot;)</span><br></code></pre></td></tr></table></figure></li><li><p>loadOnStartup：启动时是否自动加载，int 决定创建对象顺序</p></li><li><p>initParams：启动时初始化参数</p></li></ol><blockquote><p>注解对象使用格式：</p><p><code>@注解名(属性名=属性值, 属性名=属性值)</code></p></blockquote><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(</span><br><span class="hljs-meta">    name = &quot;HellowServlet&quot;,</span><br><span class="hljs-meta">    urlPatterns = &#123;&quot;/hello1&quot;, &quot;/hello2&quot;&#125;,</span><br><span class="hljs-meta">    loadOnStartUp = 1,</span><br><span class="hljs-meta">    initParams = &#123;</span><br><span class="hljs-meta">        @WebInitParam(name=&quot;username&quot;, value=&quot;vv&quot;),</span><br><span class="hljs-meta">        @WebInitParam(name=&quot;password&quot;, value=&quot;123&quot;)</span><br><span class="hljs-meta">    &#125;,</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HellowServlet</span> extend HttpServlet &#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
      <tag>HttpServlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb - Note02 Servlet &amp; GenericServlet</title>
    <link href="/2022/07/26/JavaWeb%20-%20Note02%20Servlet%20&amp;%20GenericServlet/"/>
    <url>/2022/07/26/JavaWeb%20-%20Note02%20Servlet%20&amp;%20GenericServlet/</url>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p>Servlet（Server Applet ），服务器端的 Java 小程序，JavaWeb 开发最核心的规范</p><h2 id="合法的-webapp-目录结构"><a href="#合法的-webapp-目录结构" class="headerlink" title="合法的 webapp 目录结构"></a>合法的 webapp 目录结构</h2><ul><li>WEB-INF<ul><li>classes</li><li>lib</li><li>web.xml</li></ul></li><li>html</li><li>css</li><li>javascript</li><li>image</li><li>…</li></ul><h2 id="第一个-Servlet-webapp"><a href="#第一个-Servlet-webapp" class="headerlink" title="第一个 Servlet webapp"></a>第一个 Servlet webapp</h2><p>步骤：</p><ol><li><p>在 webapps 目录下新建 <code>项目目录</code></p><blockquote><p>vv：不能包含子目录</p></blockquote></li><li><p>项目目录下新建一个 <code>WEB-INF</code> 目录</p><p>Servlet 规范，目录内的资源受保护，在浏览器上不能通过路径直接访问</p><blockquote><p>像 HTML、CSS、JS、image 等静态资源需放在 WEB-INF 目录之外</p></blockquote></li><li><p>WEB-INF 目录下新建一个 <code>classes</code> 目录</p><p>Servlet 规范，存放 Java 程序编译后的 class 文件</p></li><li><p>WEB-INF 目录下新建一个 <code>lib</code> 目录</p><p><em>非必须，存放第三方 jar 包</em></p></li><li><p>WEB-INF 目录下新建一个 <code>web.xml</code> 文件</p><p>描述请求路径与 Servlet 类之间对照关系</p><blockquote><p>建议直接复制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;5.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure></blockquote></li><li><p>编写一个 Java 程序</p><p>必须实现 Servlet 接口，该接口不在 JDK 中，属于 JavaEE 中的类库</p><p>Tomcat 实现了 Servlet 规范，所以拥有该接口</p><blockquote><p>关于 JavaEE 版本：</p><p>JavaEE 目前最高版本是 JavaEE 8，被 Oracle 捐献给了 Apache，升级后更名为 JakartaEE 9</p><p>JavaEE 8 对应的 Servlet 类名为：javax.servlet.Servlet</p><p>JakartaEE 9 以后对应的 Servlet 类名为：<strong>jakarta.servlet.Servler</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wtaaaame.servlet;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.Servlet;<br><span class="hljs-keyword">import</span> jakarta.servlet.ServletException;<br><span class="hljs-keyword">import</span> jakarta.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> jakarta.servlet.ServletConfig;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br><span class="hljs-comment">// 5个实现方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest request, ServletResponse response)</span><br><span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><span class="hljs-comment">// 向控制台打印输出</span><br>System.out.println(<span class="hljs-string">&quot;Hello Servlet&quot;</span>);<br><br><span class="hljs-comment">// 设置流对象响应类型（普通文本或 html 代码）</span><br><span class="hljs-comment">// 在流对象之前设置有效</span><br>response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br><span class="hljs-comment">// 如果出现中文乱码，可以加上：</span><br><span class="hljs-comment">// response.setContentType(&quot;text/html; charset=UTF-8&quot;);</span><br><br><span class="hljs-comment">// 创建流对象，将信息直接输出到浏览器</span><br><span class="hljs-comment">// 使用 ServletResponse 接口：response</span><br><span class="hljs-comment">// 输出流，负责输出字符串到浏览器，不需要刷新和关闭，由 Tomcat 管理</span><br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getWriter();<br>out.println(<span class="hljs-string">&quot;Response Servlet&quot;</span>);<br><span class="hljs-comment">// 未设置响应类型，无格式输出，需在开启流对象之前设置</span><br>out.println(<span class="hljs-string">&quot;&lt;h1&gt;This is a h1，测试乱码问题&lt;/h1&gt;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编译</p><p>配置环境变量：<code>CLASSPATH=.;[servlet-aip].jar</code></p></li><li><p>将编译后的包放到 <code>tomcat/webapps/[project]/WEB-INF/classes</code> 中</p></li><li><p>注册 Servlet 类</p><p>在 web.xml 中编写配置信息，让“请求路径”和 ”Servlet 类名“关联</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;5.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Servlet 描述信息 --&gt;</span><br><span class="hljs-comment">&lt;!-- 任何一个 servlet 都对应一个 servlet-mappint --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>vv<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这个位置必须是带有包名的全限定类名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>io.github.wtaaaame.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Servlet 映射信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 这里随便，但需要与上面的 name 相同 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>vv<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">这里需要一个路径</span><br><span class="hljs-comment">唯一的要求就是以 / 开始</span><br><span class="hljs-comment">当前随便写</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/vv/vv<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>启动 Tomcat 服务器</p></li><li><p>打开浏览器</p><p>地址栏输入 URL：<code>http://localhost:8080/[project_name][url-pattern]</code></p><p>浏览器路径与 url-pattern 路径唯一区别是：浏览器路径带 &#x2F;[project_name]</p></li></ol><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>若浏览器上编写的路径太复杂，可以使用超链接（html 页面只能放到 WEB-INF 目录上一层）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello Servlet<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/crm/vv/vv&quot;</span> /&gt;</span>Hello Servlet<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>访问时只需访问该 html 页面（<code>http://localhost:8080/crm/index.html</code>），通过页面中的超链接跳转</p><h2 id="Servlet-连接数据库"><a href="#Servlet-连接数据库" class="headerlink" title="Servlet 连接数据库"></a>Servlet 连接数据库</h2><p>Servlet 是 Java 程序，所以在 Servlet 中可直接编写 JDBC 代码连接数据库</p><p>Servlet 连接数据库需新写一个 class，在 service() 方法中编写程序，并将数据库驱动 jar 包放到 webapp 中的 lib 下</p><h2 id="在-IDEA-中开发"><a href="#在-IDEA-中开发" class="headerlink" title="在 IDEA 中开发"></a>在 IDEA 中开发</h2><ul><li><p>让 Module 变成 JavaEE 模块（符合 Servlet 规范的 Module）：</p><p><code>模块右键 -&gt; Add Frameworks Support -&gt; Java EE - Web Application</code></p><ul><li>生成的 web 目录，就是 webapp 的根</li></ul></li><li><p>配置 IEAD 的 classpath：</p><p>将 <code>CATALINA_HOME\lib</code> 下的 <code>servlet-api.jar</code> 添加到 <code>Libraries</code> 中（<code>IDEA -&gt; File -&gt; Project Structure -&gt; Project Settings - Libraries</code>）</p><ul><li>也可以在 <code>Project Settings - Modules - [Module] - Dependencies</code> 中点击 <code>+</code> 号单独添加 jar 包</li></ul></li><li><p>IEAD 工具关联 Tomcat 服务器</p><p>关联的过程中将 webapp 部署到 Tomcat 服务器</p><ol><li>IDEA 工具右上角，Build 按钮右边，点击 <code>Add Configuration...</code></li><li>点击左上角 <code>+</code> 号，找到 <code>Tomcat Server</code>，选择 <code>local</code></li><li>配置 Tomcat 路径、服务器、JRE 等</li><li>当前窗口点击 <code>Deployment</code> 部署 webapp<ol><li>点击 <code>+</code> 配置<code>Artifact</code></li><li>修改 <code>Application context</code>，重命名为项目名</li></ol></li><li>建议以 Debug 模式启动服务器</li></ol></li></ul><h2 id="Servlet-对象生命周期"><a href="#Servlet-对象生命周期" class="headerlink" title="Servlet 对象生命周期"></a>Servlet 对象生命周期</h2><p>Servlet 对象的创建、方法调用、销毁，JavaWeb 程序员无权干预</p><p>Servlet 对象的生命周期由 Tomcat 服务器（WEB Server）全权负责</p><p>Tomcat 服务器通常又称为：WEB 容器（WEB Container）</p><p>自己 new 的 Servlet 对象不受 Tomcat 服务器管理，WEB 服务器创建的 Servlet 对象都会被放到一个 HashMap 中，只有放在这个 HashMap 集合中的 Servlet 才能够被 Tomcat 管理</p><h3 id="实例化时机"><a href="#实例化时机" class="headerlink" title="实例化时机"></a>实例化时机</h3><p>在 Servlet 中提供一个无参数的构造方法，启动服务器时看看构造方法是否执行？</p><p>默认情况下，服务器在启动时 Servlet 对象并不会被实例化</p><ul><li><p>用户没有发送请求之前，如果提前创建出所有 Servlet 对象，必然要耗费大量内存</p></li><li><p>若想在服务器启动时创建对象，只需在 <code>web.xml</code> 中的 <code>servlet</code> 标签中加上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>中间整数决定创建顺序（从小到大）</li></ul></li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ol><li>默认用户发送第一次请求时，实例化 Servlet 对象</li><li>对象被创建出来后，Tomcat 服务器马上调用对象 init 方法</li><li>以后每次发起请求都只调用 service 方法，不新建对象</li><li>关闭服务器时调用 destroy 方法</li></ol><p>说明：</p><ol><li><p>Servlet 对象是单实例的（假单例，并不符合单例模式）</p><p>程序员无法管理 Servlet 对象，由于 Tomcat 只创建了一个，所以导致了单例，但是属于假单例，真单例构造方法是私有化的</p></li><li><p>无参数构造方法、init 方法只在第一次用户发送请求时执行</p></li><li><p>只要用户发送一次请求，service 方法必然被调用一次</p></li><li><p>Servlet 的 destroy 方法只被 Tomcat 服务器调用一次</p></li><li><p>destroy 方法属于实例方法，方法结束后才会释放</p></li></ol><h3 id="5个对象方法"><a href="#5个对象方法" class="headerlink" title="5个对象方法"></a>5个对象方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 无参数构造方法</span><br><span class="hljs-keyword">public</span> [Servlet name]() &#123;&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-comment">// init 方法通常完成初始化操作</span><br><span class="hljs-comment">// 在对象第一次被创建后执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-comment">// 处理用户请求的核心方法</span><br><span class="hljs-comment">// 用户发送一次请求，则执行一次 service 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-comment">// 只执行一次，Tomcat 服务器销毁对象之前调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>当 Servlet 类中编写有参数构造方法，如果<strong>没有手动编写无参数构造方法</strong>会出现 <code>500 错误</code>（HTTP 协议的错误状态码，500一般属于服务器的 Java 程序出现了异常，服务器内部错误）</p><blockquote><p>Servlet 开发中不建议定义构造方法，容易导致无参构造方法消失，可能无法实例化对象，所以 init 方法有存在的必要</p></blockquote></li></ul><h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a><em>GenericServlet</em></h2><blockquote><p><em>注意：以后编写 Servlet 类，不会直接继承 GenericServlet，因为 B&#x2F;S 架构系统基于 HTTP 超文本传输协议，在 Servlet 规范中提供了一个类叫做 <code>HttpServlet</code>，它是专门为 HTTP 协议准备的一个 Servlet 类（HTTP 协议专用）</em></p><blockquote><p>jakarta.servlet.Servlet（接口）</p><p>jakarta.servlet.GenericServlet implement Servlet（接口的抽象类）</p><p>jakarta.servlet.http.HttpServlet implement GenericServlet（抽象类的抽象类）</p></blockquote></blockquote><p>Servlet 中需要实现 Servlet 接口所有方法，包含可能用不上的方法，所以不够美观</p><p>可以利用适配器设计模式（Adapter），编写一个 GenericServlet 抽象类，类中实现 Servlet 接口所有方法，并把想要重写的方法定义为抽象方法，用以继承实现</p><ul><li>子类依旧会调用父类 init 方法</li></ul><h3 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h3><p>ServletConfig 是一个接口，<strong>Tomcat 先创建了 ServletConfig 对象，然后调用 init 方法</strong>，将 ServletConfig 对象传给 init 方法</p><p>若 service 中想要使用 ServletConfig 对象，可以在 Servlet 类中创建一个私有的成员变量，然后在 init 方法中初始化赋值</p><p>若 GenericServlet 中重写的 init 方法不想让子类覆盖，可以使用 final 关键字，然后重载一个无参数的 init 方法调用，并让子类重写；与此同时，通过 getServletConfig 对象返回 config</p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.generic;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-comment">// 定义一个私有成员变量</span><br>    <span class="hljs-keyword">private</span> ServletConfig servletConfig;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 不想子类重写方法导致影响成员变量的赋值，可以使用 final 修饰</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-comment">// 成员变量赋值</span><br>        <span class="hljs-built_in">this</span>.servletConfig = servletConfig;<br>        <span class="hljs-comment">// 原方法调用重载的 init 方法</span><br>        init();<br>    &#125;<br><br>    <span class="hljs-comment">// 重载一个无参的 init 方法供子类重写，从而避免影响</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        return null;</span><br>        <span class="hljs-comment">// 此处为成员变量的 get 方法，可返回成员变量</span><br>        <span class="hljs-keyword">return</span> servletConfig;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>GenericServlet 已有现成抽象类，可以直接继承</p></blockquote><h3 id="扩展：关联源码"><a href="#扩展：关联源码" class="headerlink" title="扩展：关联源码"></a>扩展：关联源码</h3><p>IDEA 可以反编译 class 文件，可以在顶部提示框点击 <code>Choose Source</code> 选择源码文件，以展示注释信息</p><h3 id="ServletConfig-详解"><a href="#ServletConfig-详解" class="headerlink" title="ServletConfig 详解"></a>ServletConfig 详解</h3><p>ServletConfig 是 Servlet 对象的配置信息对象</p><p>Tomcat 解析 web.xml 文件，包装了文件中 <code>&lt;servlet&gt;&lt;/servlet&gt;</code> 标签的配置信息</p><p>Servlet 规范中的一员，是一个接口，由以下类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">org</span>.apache.catalina.core.StandardWrapperFacade <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>若换作其他服务器，则包名、类名会不同，但都实现了 ServletConfig 接口</li></ul><p>一个 Servlet 对象中有一个 ServletConfig 对象（一对一）</p><p>在 Servlet 对象创建的时候，同时创建了 ServletConfig 对象，然后传参到 init 方法</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>config<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>io.github.wataaaame.config.ConfigTest<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这里可以配置一个 Servlet 对象的初始化信息 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 局部配置信息时使用  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>driver<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/learning<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>user<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>0.0<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过 ServletConfig 对象的前两个方法，可以获取到 web.xml 中的初始化参数配置信息</p><ol><li><p>Enumeration&lt;java.lang.String&gt; getInitParameterNames()</p><p>获取所有初始化参数的 name</p><p>hasMoreElements() 判断是否有下一个元素</p><p>nextElement() 获取下一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取所有初始化参数名称</span><br>Enumeration&lt;String&gt; parameterNames = getServletConfig().getInitParameterNames();<br><span class="hljs-comment">// 遍历集合</span><br><span class="hljs-keyword">while</span> (parameterNames.hasMoreElements()) &#123;  <span class="hljs-comment">// 是否有更多元素</span><br>    <span class="hljs-comment">// 取出元素并打印</span><br>    out.print(parameterNames.nextElement() + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>String getInitParameter(String name)</p><p>获取 name 对应的 value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 name 对应的 value</span><br>out.print(getServletConfig().getInitParameter(<span class="hljs-string">&quot;driver&quot;</span>));<br></code></pre></td></tr></table></figure></li><li><p>ServletContext getServletContext()</p><p>获取 ServletContext 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">out.print(getServletContext() + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br><span class="hljs-comment">// org.apache.catalina.core.ApplicationContextFacade</span><br></code></pre></td></tr></table></figure></li><li><p>String getServletName()</p><p>获取 servlet 配置中的 servlet-name</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">out.print(getServletConfig().getServletName());<span class="hljs-comment">// config</span><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>以上方法可以通过 ServletConfig 调用，也可通过继承 GenericSerlvet 直接调用</p></blockquote><h3 id="ServletContext-详解"><a href="#ServletContext-详解" class="headerlink" title="ServletContext 详解"></a>ServletContext 详解</h3><p>Servlet 的环境（上下文）对象，是一个接口，是 Servlet 规范中的一员，<strong>包含 web.xml 中所有配置信息</strong>（属于公用配置）</p><ul><li>Tomcat 是一个容器，可以存放多个 webapp，<strong>一个 webapp 对应一个 ServletContext 对象</strong></li></ul><p>由 Tomcat 服务器实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">org</span>.apache.catalina.core.ApplicationContextFacade <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContext</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>在 WEB 服务器启动时创建，关闭时结束，属于<strong>应用级对象</strong>（全局配置）</p><blockquote><p>全局配置信息使用 ServletContext 的 <code>&lt;context-param&gt;</code></p><p>局部 servlet 配置信息使用 ServletConfig 的 <code>&lt;init-param&gt;</code></p></blockquote><p>ServletContext 对象还有另一个名字：<strong>应用域</strong>（以后还有请求域、会话域）</p><p>如果所有用户<strong>共享一份数据</strong>（对象只有一个，不共享没有意义），并且这个数据<strong>很少被修改</strong>（共享数据修改涉及线程安全问题，所以这里数据一般只读）、<strong>数据量很少</strong>（过大占用太多堆内存，且这个数据生命周期长，会影响服务器性能），则可以考虑放到 ServletContext 这个应用域中</p><h4 id="重要方法"><a href="#重要方法" class="headerlink" title="重要方法"></a>重要方法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 此处配置上下文的初始化参数 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 全局配置信息时使用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>pageSize<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>startIndex<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>context01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>io.github.wataaaame.context.ServletContextTest01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>context01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/context01<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p>String getInitParameter(String name)</p><p>通过初始化参数的 name 获取 value</p></li><li><p>Enumeration&lt;java.lang.String&gt; getInitParameterNames()</p><p>获取所有的初始化参数的 name</p><p>hasMoreElements() 判断是否有下一个元素</p><p>nextElement() 获取下一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 ServletContext 上下文的初始化参数</span><br>Enumeration&lt;String&gt; initParameterNames = application.getInitParameterNames();<br><span class="hljs-keyword">while</span> (initParameterNames.hasMoreElements()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> initParameterNames.nextElement();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> application.getInitParameter(name);<br>    out.print(name + <span class="hljs-string">&quot; &quot;</span> + value + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>vv：一定需要调用 ServletContext 的1、2方法，否则调用的是 ServletConfig 中的 init-parameter</p></blockquote></li><li><p><strong>String getContextPath()</strong></p><p>获取应用地址的根路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">out.print(application.getContextPath() + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<span class="hljs-comment">// /context</span><br></code></pre></td></tr></table></figure></li><li><p><strong>String getRealPath(String path)</strong></p><p>获取 webapp 文件真实路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取文件真实路径</span><br>out.print(application.getRealPath(<span class="hljs-string">&quot;/html.html&quot;</span>) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br><span class="hljs-comment">// C:\vv\code\Java\JavaWeb\out\artifacts\servlet03_war_exploded\html.html</span><br></code></pre></td></tr></table></figure><p>路径为 webapp 的根路径为起点</p></li><li><p>void log(String msg)</p><p>记录日志，记录到 <code>CATALINA_HOME\ligs</code> 下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输出日志文件</span><br>application.log(<span class="hljs-string">&quot;It&#x27;s VV&quot;</span>);<br><span class="hljs-comment">// 29-Jul-2022 12:11:32.764 信息 [http-nio-8080-exec-7]</span><br><span class="hljs-comment">// org.apache.catalina.core.ApplicationContext.log It&#x27;s VV</span><br></code></pre></td></tr></table></figure><p>void log(String message, Throwable throwable)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输出日志文件（Throwable）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">18</span>) &#123;<br>    application.log(<span class="hljs-string">&quot;未成年&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;FBI WARNING&quot;</span>));<br>&#125;<br><span class="hljs-comment">// 29-Jul-2022 12:11:32.764 严重 [http-nio-8080-exec-7]</span><br><span class="hljs-comment">// org.apache.catalina.core.ApplicationContext.log 未成年</span><br><span class="hljs-comment">// java.lang.RuntimeException: FBI WARNING</span><br></code></pre></td></tr></table></figure><blockquote><p>使用原始方法肯定会直接操作 <code>CATALINA_HOME</code>，而 IDEA 中只会生成到 IDEA 指定的目录，须在命令台找到存放路径</p></blockquote><p>Tomcat 日志文件：</p><ul><li>localhost_access_log：服务器访问日志</li><li>catalina：服务器启动日志</li><li>localhost：方法记录的日志</li></ul></li></ol><h4 id="应用域方法"><a href="#应用域方法" class="headerlink" title="应用域方法"></a>应用域方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ServletContext 应用域</span><br><span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;vv&quot;</span>, <span class="hljs-number">22</span>);<br><span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ee&quot;</span>, <span class="hljs-number">21</span>);<br></code></pre></td></tr></table></figure><ol><li><p>void setAttribute(String name, object value)</p><p>存数据到 ServletContext 应用域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 存</span><br>application.setAttribute(<span class="hljs-string">&quot;user1&quot;</span>, u1);<br>application.setAttribute(<span class="hljs-string">&quot;user2&quot;</span>, u2);<br></code></pre></td></tr></table></figure></li><li><p>Object getAttribute(String name)</p><p>从 ServletContext 应用域取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 取</span><br>out.print(application.getAttribute(<span class="hljs-string">&quot;user1&quot;</span>) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<span class="hljs-comment">// User&#123;name=&#x27;vv&#x27;, age=22&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>void removeAttribute(String name)</p><p>从 ServletContext 应用域删数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 删</span><br>application.removeAttribute(<span class="hljs-string">&quot;user1&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="扩展：缓存机制"><a href="#扩展：缓存机制" class="headerlink" title="扩展：缓存机制"></a>扩展：缓存机制</h2><ul><li><p>堆内存中的字符串缓存机制</p><p>“abc” 先在字符串常量池中查找，如果有，直接拿来用；如果没有则新建，然后放入字符串常量池</p></li><li><p>堆内存中的整数型常量池</p><p>[-128, 127] 一共256个 Integer 类型的引用，放在整数型常量池中，没有超出范围则直接从常量池中取</p></li><li><p>连接池（Connection Cache）</p><p>这里说的连接池中的连接是 Java 语言连接数据库的连接对象：java.sql.Connection 对象</p><p>JVM 与 MySQL 皆是进程，进程之间建立连接，打开通道很费资源</p><p>可以提前创建好 n 个 Connection 连接对象，将连接对象放到一个集合中，我们把这个放有 Connection 对象的集合称为连接池。这样，每次用户连接不需要新建连接对象，直接从连接池中获取连接对象，大大提升访问效率</p><p>连接池可以提高用户的访问效率，也可以保证数据库的安全性，实际开发中需考虑：</p><ul><li>最小连接数</li><li>最大连接数</li></ul></li><li><p>线程池</p><p>Tomcat 服务器本身支持多线程</p><p>Tomcat 服务器启动时，会先创建好 n 多个线程对象，然后将线程对象放到集合中，称为线程池</p><p>用户发送请求后，需要有对应的线程来处理请求，此时线程对象就会直接从线程池中获取，效率较高</p><ul><li>所有的 WEB 服务器或应用服务器都有线程池机制</li></ul></li><li><p>Redis</p><p>NoSQL 数据库，非关系型数据库、缓存数据库</p></li><li><p>向 ServletContext 应用域中存储数据，也等于是将数据存放到缓存 cache 中了</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Servlet</tag>
      
      <tag>GenericServlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb - Note01 BS Framwork</title>
    <link href="/2022/07/26/JavaWeb%20-%20Note01%20BS%20Framwork/"/>
    <url>/2022/07/26/JavaWeb%20-%20Note01%20BS%20Framwork/</url>
    
    <content type="html"><![CDATA[<h1 id="B-x2F-S-架构通信原理"><a href="#B-x2F-S-架构通信原理" class="headerlink" title="B&#x2F;S 架构通信原理"></a>B&#x2F;S 架构通信原理</h1><h2 id="WEB-系统的访问过程"><a href="#WEB-系统的访问过程" class="headerlink" title="WEB 系统的访问过程"></a>WEB 系统的访问过程</h2><ol><li>打开浏览器</li><li>地址栏输入合法网址</li><li>回车</li><li>浏览器展示响应结果</li></ol><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>域名即一个网址，通过域名解析器，被解析成一个具体的 IP 地址和端口号等</p><p><code>wataaaame.github.io</code> –解析成–&gt; <code>185.199.110.153</code></p><h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><p>计算机在网络中的一个身份证号，在同一个网络中，IP 地址是唯一的</p><p>两台计算机通信，首先需要知道 IP 地址才能建立连接</p><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>一个端口对应一个软件，每一个软件启动之后都有一个端口号，端口代表着服务</p><p>在同一个计算机上，端口号具有唯一性</p><h2 id="WEB-系统通信原理"><a href="#WEB-系统通信原理" class="headerlink" title="WEB 系统通信原理"></a>WEB 系统通信原理</h2><ol><li>用户输入网址（URL，统一资源定位符）</li><li>域名解析器进行域名解析（解析成 IP 地址）</li><li>浏览器软件在网络中搜索 IP 地址对应服务器</li><li>服务器定位到端口对应软件</li><li>软件定位浏览器想要的资源名</li><li>服务器软件找到资源，并将文件输出响应到浏览器</li><li>浏览器接收来自服务器的代码</li><li>浏览器执行渲染</li></ol><h2 id="WEB-服务器软件"><a href="#WEB-服务器软件" class="headerlink" title="WEB 服务器软件"></a>WEB 服务器软件</h2><p>提前开发好的常用服务器软件</p><ul><li><strong>Tomcat</strong>（Apache）（WEB 服务器）</li><li>Jetty（WEB 服务器）</li><li>JBOSS（应用服务器）</li><li>WebLogic（应用服务器）</li><li>WebSphere（应用服务器）</li></ul><p>应用服务器实现了 JavaEE 所有规范（13个）</p><p>WEB 服务器只实现了 JavaEE 中的 Servlet、JSP 两个核心规范</p><p>应用服务器包含 WEB 服务器</p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p><a href="https://tomcat.apache.org/">Tomcat</a>（<a href="https://www.apache.org/">Apache</a> 开发），是一款开源免费的轻量级 WEB 服务器，体积小、运行速度快，只实现了 Servlet + JSP 规范</p><p>Tomcat 是 Java 语言写的，想要运行，必须先有 jre（Java 运行环境）</p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p>bin：命令文件（启动关闭 Tomcat）</p><p>conf：配置文件（server.xml 配置端口号）</p><p>lib：核心程序</p><p>logs：日志信息</p><p>temp：临时目录</p><p>webapps：存放大量 webapp（web application）</p><p>work：存放 JSP 翻译之后的 Java 文件以及编译之后的 class 文件</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>环境变量：</p><ul><li>path 对应的 bin 目录</li><li>CATALINA_HOME</li><li>JAVA_HOME</li></ul><p>启动：通过 bin 目录下的 <code>start.bat</code> 启动 Tomcat 服务器</p><blockquote><p>解决 dos 窗口乱码问题：</p><p>编辑：<code>%CATALINA_HOME%\conf\logging.properties</code>，将 <code>java.util.logging.ConsoleHandler.encoding</code> 值更改为 GBK</p></blockquote><p>关闭：通过 <code>shutdown.bat</code> 关闭 Tomcat 服务器（建议修改为 <code>stop.bat</code>，以免同关机命令混淆）</p><p>验证：浏览器输入：<code>http://localhost:8080</code> 或 <code>http://120.0.0.1:8080</code></p><blockquote><p>bat 文件是 Windows 操作系统的批处理文件，可以封装 dos 命令执行</p><p>sh 文件是 Linux 环境下封装的 shell 命令</p></blockquote><p>分析 start.bat 文件得出，执行该命令，实际上是执行 <code>catalina.bat</code> 文件</p><p>catalina.bat 文件中有这样一行配置：<code>MAINCLASS=org.apache.catalina.startup.Bootstrap</code></p><p>该类就是 main 方法所在的类，启动了 main 方法代表服务器启动</p><h4 id="第一个-web-应用"><a href="#第一个-web-应用" class="headerlink" title="第一个 web 应用"></a>第一个 web 应用</h4><ol><li><p>找到 <code>CATALINA_HOME\webapps</code> 目录</p><p>所有 webapp 要放在 webapps 目录下</p></li><li><p>新建一个子目录，起名 <code>oa</code></p><p>oa 就是这个 webapp 的名字</p></li><li><p>oa 目录下新建资源文件，例如 <code>index.html</code></p><p>编写 index.html 文件的内容</p></li><li><p>启动 Tomcat 服务器</p></li><li><p>打开浏览器，输入 URL（<code>http://localhost:8080/oa/index.html</code>）</p></li></ol><p>超链接中 href 可以省略 IP 与端口号，斜杠开头，从项目名开始写，同样属于绝对路径：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/oa/login.html&quot;</span>&gt;</span>login2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="B-x2F-S-架构系统的角色和协议"><a href="#B-x2F-S-架构系统的角色和协议" class="headerlink" title="B&#x2F;S 架构系统的角色和协议"></a>B&#x2F;S 架构系统的角色和协议</h2><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>浏览器软件开发团队</p><p>WEB Server 开发团队</p><p>DB Server 开发团队</p><p>webapp 开发团队（Java 程序员开发）</p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>webapp 开发团队和 WEB Server 的开发团队之间有一套规范：JavaEE 规范之一 Servlet 规范</p><ul><li>Servlet 规范作用是 WebServer 和 webapp 解耦合</li></ul><p>Browser 和 WebServer 之间有一套传输协议：HTTP 协议（超文本传输协议）</p><p>webapp 开发团队和 DB Server 开发团队之间有一套规范：JDBC规范</p><p><img src="/images/image-javaweb/note01-01-BS%E6%9E%B6%E6%9E%84%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%92%E8%89%B2%E5%92%8C%E5%8D%8F%E8%AE%AE.PNG" alt="BS架构系统的角色和协议"></p><p>对于 JavaWeb 程序员来说，只需要做两件事</p><ol><li>编写一个类实现 Servlet 接口</li><li>将编写的类配置到配置文件中，在配置文件中指定请求路径和类名的关系</li></ol><blockquote><p>配置文件的文件名和存放路径遵守 Servlet 规范，不能随意更改</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BS Framwork</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - Note03 JSON</title>
    <link href="/2022/07/25/JavaScript%20-%20Note03%20JSON/"/>
    <url>/2022/07/25/JavaScript%20-%20Note03%20JSON/</url>
    
    <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON（JavaScript Object Notation），是一种数据交换格式标准，在 JS 里以对象形式存在，最主要的作用是进行数据交换</p><p>轻量级的数据交换格式，特点是：体积小、易解析</p><blockquote><p>实际开发中还有一种数据交换格式：XML</p><p>虽体积大、解析麻烦，但是语法严谨（e.g. 银行业务）</p></blockquote><h2 id="定义一个-JSON-对象"><a href="#定义一个-JSON-对象" class="headerlink" title="定义一个 JSON 对象"></a>定义一个 JSON 对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个 json 对象</span><br><span class="hljs-keyword">var</span> studentObj = &#123;<br>    <span class="hljs-string">&quot;sno&quot;</span> : <span class="hljs-string">&quot;101&quot;</span>,<br>    <span class="hljs-string">&quot;sname&quot;</span> : <span class="hljs-string">&quot;vv&quot;</span>,<br>    <span class="hljs-string">&quot;sex&quot;</span> : <span class="hljs-string">&quot;1&quot;</span><br>&#125;;<br><span class="hljs-comment">// 访问该 json 对象的属性</span><br><span class="hljs-title function_">alert</span>(studentObj.<span class="hljs-property">sno</span> + <span class="hljs-string">&quot;, &quot;</span> + studentObj.<span class="hljs-property">sname</span> + <span class="hljs-string">&quot;, &quot;</span> + studentObj.<span class="hljs-property">sex</span>);<br></code></pre></td></tr></table></figure><ul><li>JSON 与对象定义方法相似，所以又被称为“无类型对象”</li></ul><h2 id="定义一个-JSON-数组"><a href="#定义一个-JSON-数组" class="headerlink" title="定义一个 JSON 数组"></a>定义一个 JSON 数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个 json 数组</span><br><span class="hljs-keyword">var</span> students = [<br>    &#123;<span class="hljs-string">&quot;sno&quot;</span> : <span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-string">&quot;sname&quot;</span> : <span class="hljs-string">&quot;vv&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;sno&quot;</span> : <span class="hljs-string">&quot;102&quot;</span>, <span class="hljs-string">&quot;sname&quot;</span> : <span class="hljs-string">&quot;ee&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span> : <span class="hljs-string">&quot;0&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;sno&quot;</span> : <span class="hljs-string">&quot;103&quot;</span>, <span class="hljs-string">&quot;sname&quot;</span> : <span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>&#125;<br>];<br><span class="hljs-comment">// 遍历 json 数组</span><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> students) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(students[i].<span class="hljs-property">sno</span> + <span class="hljs-string">&quot;, &quot;</span> + students[i].<span class="hljs-property">sname</span> + <span class="hljs-string">&quot;, &quot;</span> + students[i].<span class="hljs-property">sex</span> + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JSON-嵌套"><a href="#JSON-嵌套" class="headerlink" title="JSON 嵌套"></a>JSON 嵌套</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// JSON 嵌套</span><br><span class="hljs-keyword">var</span> user = &#123;<br>    <span class="hljs-string">&quot;userid&quot;</span> : <span class="hljs-number">101</span>,<br>    <span class="hljs-string">&quot;username&quot;</span> : <span class="hljs-string">&quot;vv&quot;</span>,<br>    <span class="hljs-string">&quot;sex&quot;</span> : <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;address&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;city&quot;</span> : <span class="hljs-string">&quot;Wuhan&quot;</span>,<br>        <span class="hljs-string">&quot;street&quot;</span> : <span class="hljs-string">&quot;Wuchang&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;habit&quot;</span> : [<span class="hljs-string">&quot;Java&quot;</span>, <span class="hljs-string">&quot;Guitar&quot;</span>]<br>&#125;;<br><span class="hljs-comment">// 访问人名与居住地</span><br><span class="hljs-title function_">alert</span>(user.<span class="hljs-property">username</span> + <span class="hljs-string">&quot; live in &quot;</span> + user.<span class="hljs-property">address</span>.<span class="hljs-property">city</span> + <span class="hljs-string">&quot; &quot;</span> + user.<span class="hljs-property">address</span>.<span class="hljs-property">street</span>);<br></code></pre></td></tr></table></figure><h2 id="window-eval"><a href="#window-eval" class="headerlink" title="window.eval()"></a>window.eval()</h2><p>将字符串当作一段 JS 代码解释并执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;var i = 100&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(i + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><p>Java 连接数据库，查询数据之后，将数据在 Java 程序中拼接成 JSON 格式的“字符串”，并将该字符串响应到浏览器</p><blockquote><p>Java 响应到浏览器上的只是一个 “JSON 格式字符串”，还不是一个 JSON 对象</p></blockquote><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fromJava = <span class="hljs-string">&quot;&#123;\&quot;name\&quot; : \&quot;vv\&quot;, \&quot;password\&quot; : \&quot;123\&quot;&#125;&quot;</span><br><span class="hljs-comment">// 将以上 JSON 字符串转换为 JSON 对象</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;var jsonObj = &quot;</span> + fromJava);<br><span class="hljs-comment">// 访问 JSON 对象</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(jsonObj.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;, &quot;</span> + jsonObj.<span class="hljs-property">password</span> + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>[] 与 {} 的区别？</p><ul><li><p>JS 中</p><p>[]：数组</p><p>{}：JSON</p></li><li><p>Java 中：</p><p>[]：取址符</p><p>{}：数组</p></li></ul><h2 id="设置-table-的-tbody"><a href="#设置-table-的-tbody" class="headerlink" title="设置 table 的 tbody"></a>设置 table 的 tbody</h2><p>将 JSON 数据绑定到 table 的 tbody 中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>设置table的tbody<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> data = &#123;</span><br><span class="language-javascript">            <span class="hljs-string">&quot;total&quot;</span> : <span class="hljs-number">4</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&quot;emp&quot;</span> : [</span><br><span class="language-javascript">                &#123;<span class="hljs-string">&quot;empno&quot;</span> : <span class="hljs-number">101</span>, <span class="hljs-string">&quot;ename&quot;</span> : <span class="hljs-string">&quot;vv&quot;</span>, <span class="hljs-string">&quot;sal&quot;</span> : <span class="hljs-number">8000</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-string">&quot;empno&quot;</span> : <span class="hljs-number">102</span>, <span class="hljs-string">&quot;ename&quot;</span> : <span class="hljs-string">&quot;ee&quot;</span>, <span class="hljs-string">&quot;sal&quot;</span> : <span class="hljs-number">16000</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-string">&quot;empno&quot;</span> : <span class="hljs-number">103</span>, <span class="hljs-string">&quot;ename&quot;</span> : <span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-string">&quot;sal&quot;</span> : <span class="hljs-number">7000</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-string">&quot;empno&quot;</span> : <span class="hljs-number">104</span>, <span class="hljs-string">&quot;ename&quot;</span> : <span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-string">&quot;sal&quot;</span> : <span class="hljs-number">6000</span>&#125;</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">display</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 遍历取出每条 emp 信息，拼接成 HTML 标签，通过 innerHTML 插入到 tbody</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> tbodyHTML = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> data.<span class="hljs-property">emp</span>) &#123;</span><br><span class="language-javascript">                tbodyHTML += <span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="language-javascript">                tbodyHTML += <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data.<span class="hljs-property">emp</span>[i].<span class="hljs-property">empno</span> + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="language-javascript">                tbodyHTML += <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data.<span class="hljs-property">emp</span>[i].<span class="hljs-property">ename</span> + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="language-javascript">                tbodyHTML += <span class="hljs-string">&quot;&lt;td&gt;&quot;</span> + data.<span class="hljs-property">emp</span>[i].<span class="hljs-property">sal</span> + <span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="language-javascript">                tbodyHTML += <span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 拼接</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tbody&quot;</span>).<span class="hljs-property">innerHTML</span> = tbodyHTML;</span><br><span class="language-javascript">            <span class="hljs-comment">// 总条目</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;count&quot;</span>).<span class="hljs-property">innerText</span> = data.<span class="hljs-property">total</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>EMP TABLE<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;display&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;display()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">1px</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>EMPNO<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ENAME<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>SAL<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tbody&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;tr&gt;</span><br><span class="hljs-comment">                &lt;td&gt;&lt;/td&gt;</span><br><span class="hljs-comment">                &lt;td&gt;&lt;/td&gt;</span><br><span class="hljs-comment">                &lt;td&gt;&lt;/td&gt;</span><br><span class="hljs-comment">            &lt;/tr&gt; --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    Total<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>items<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front End</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - Note02 DOM &amp; BOM</title>
    <link href="/2022/07/23/JavaScript%20-%20Note02%20DOM%20&amp;%20BOM/"/>
    <url>/2022/07/23/JavaScript%20-%20Note02%20DOM%20&amp;%20BOM/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript 包括三大块：</p><ul><li><p>ECMAScript：JS 的核心语法（ES 规范&#x2F;ECMA-262 标准）</p></li><li><p>DOM：Document Object Model（文档对象模型）</p><p>对网页当中的节点进行增删改的过程，HTML 文档被当作一棵 DOM 数来看待</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> domObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;id&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>BOM：Browser Object Model（浏览器对象模型）</p><p>关闭浏览器窗口、打开一个新浏览器窗口、后退、前进、浏览器地址栏上的地址等</p></li></ul><h2 id="DOM-amp-BOM"><a href="#DOM-amp-BOM" class="headerlink" title="DOM &amp; BOM"></a>DOM &amp; BOM</h2><p>DOM 顶级对象是 document</p><p>BOM 顶级对象是 window</p><p>实际上 BOM 是包括 DOM 的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// BOM 包含 DOM，window. 可省略</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btnElt = <span class="hljs-variable language_">window</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>)</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(btnElt);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;window.document&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-js/note02-01-BOM&DOM.PNG" alt="BOM&amp;DOM"></p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>获取文本框的 value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 获取文本框的 value --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;txt&quot;</span>).<span class="hljs-property">value</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;copy text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>输入文本框，点击按钮将内容复制到另一个文本框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 输入文本框，点击按钮将内容复制到另一个文本框 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btnCopy&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> txtInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;txtInput&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;txtOutput&quot;</span>).<span class="hljs-property">value</span> = txtInput;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txtInput&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;copy&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnCopy&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txtOutput&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span><br></code></pre></td></tr></table></figure><p>this 获取文本框 value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- this 获取文本框 value --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;alert(this.value)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>失去焦点时，输出当前标签 value</li></ul><h2 id="innerHTML-amp-innerText"><a href="#innerHTML-amp-innerText" class="headerlink" title="innerHTML &amp; innerText"></a>innerHTML &amp; innerText</h2><p>二者为属性，皆可设置元素内部内容</p><p>innerHTML 会把字符串当作 HTML 代码解释并执行</p><p>innerText 仅当作字符串执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>innerHTML &amp; innerText<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">199</span>, <span class="hljs-number">252</span>, <span class="hljs-number">225</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 设置 div 内容</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> btn1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn1&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> btn2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn2&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            btn1.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取 div 对象</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> div1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div1&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// 使用 innerHTML 属性来设置元素内部内容</span></span><br><span class="language-javascript">                div1.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;font color=&#x27;red&#x27;&gt;username can&#x27;t be null&lt;/font&gt;&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            btn2.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> div2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;div2&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">// 使用 innerText 属性来设置元素内部内容</span></span><br><span class="language-javascript">                div2.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;&lt;font color=&#x27;red&#x27;&gt;username can&#x27;t be null&lt;/font&gt;&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;innerHTML&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;innerText&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>Regular Expression，是一门独立的学科，主要用在字符串格式匹配方面，大部分编程语言都支持</p><h3 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a>常用符号</h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>除换行符以外的任意字符</td></tr><tr><td>\w</td><td>字母或数字或下划线或汉字</td></tr><tr><td>\s</td><td>任意空白符</td></tr><tr><td>\d</td><td>数字</td></tr><tr><td>\b</td><td>单词的开始或结束</td></tr><tr><td>^</td><td>字符串的开始</td></tr><tr><td>$</td><td>字符串的结束</td></tr></tbody></table><h3 id="匹配次数"><a href="#匹配次数" class="headerlink" title="匹配次数"></a>匹配次数</h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>零次或更多次</td></tr><tr><td>+</td><td>一次或更多次</td></tr><tr><td>?</td><td>零次或一次</td></tr><tr><td>{n}</td><td>n 次</td></tr><tr><td>{n, }</td><td>n 次或更多次</td></tr><tr><td>{n, m}</td><td>n 到 m 次</td></tr></tbody></table><h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>\W</td><td>任意不是字母、数字、下划线、汉字的字符</td></tr><tr><td>\S</td><td>任意不是空白的字符</td></tr><tr><td>\D</td><td>任意非数字的字符</td></tr><tr><td>\B</td><td>不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>除了 x 以外的任意字符</td></tr><tr><td>[^aeiou]</td><td>除了 aeiou 字母以外的任意字符</td></tr></tbody></table><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>QQ 号的正则表达式：<code>^[1-9]&#123;1&#125;[0-9]&#123;4,&#125;$</code></p><p>从 ^ 到 $</p><p>[1-9] 表示1到9的任意1个数字（次数 {1} 可省略）</p><blockquote><p><code>[A-Za-z0-9-]</code> 表示 A-Z、a-z、0-9、-，以上所有字符中的任意一字符</p></blockquote><h3 id="正则表达式对象"><a href="#正则表达式对象" class="headerlink" title="正则表达式对象"></a>正则表达式对象</h3><p>创建对象的方法：</p><ol><li><p>双斜杠</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> regExp = <span class="hljs-regexp">/正则表达式或字符/</span>flags;<br></code></pre></td></tr></table></figure></li><li><p>使用内置支持类 RegExp</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> regExp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;正则表达式或字符&quot;</span>, <span class="hljs-string">&quot;flags&quot;</span>);<br></code></pre></td></tr></table></figure><p>关于 flags：</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>g</td><td>全局匹配</td></tr><tr><td>i</td><td>忽略大小写</td></tr><tr><td>m</td><td>多行搜索（无法用在正则表达式的情况）</td></tr></tbody></table></li></ol><p>对象的 boolean test() 方法：</p><p>正则表达式对象.test(用户填写的字符串)</p><p>true：字符串格式匹配成功</p><p>false：字符串格式匹配失败</p><p>邮箱地址格式的正则验证：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 点击按钮验证邮箱地址格式</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> email = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;email&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> emailRegExp = <span class="hljs-regexp">/^[a-z0-9]+([._\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.)&#123;1,63&#125;[a-z0-9]+$/</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (!emailRegExp.<span class="hljs-title function_">test</span>(email)) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;emailError&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;email is illegal&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 光标再次聚焦则需要恢复提示</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;email&quot;</span>).<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;emailError&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emailError&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red; font-size: 12px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;check email&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>去除字符串前后空白</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;-&gt;&quot;</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>).<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>() + <span class="hljs-string">&quot;&lt;-&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;remove space&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>低版本的 IE 浏览器（IE 8.0）不支持字符串 trim() 的解决方法：</p><p>对 String 类扩展一个全新的 trim() 函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 对 String 类扩展一个全新的 trim() 函数</span></span><br><span class="language-javascript">    <span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">trim</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s+/</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s+$/</span>, <span class="hljs-string">&quot;&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;-&gt;&quot;</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>).<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>() + <span class="hljs-string">&quot;&lt;-&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;remove space&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 对 String 类扩展一个全新的 trim() 函数</span></span><br><span class="language-javascript">    <span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">trim</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s+/</span>, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s+$/</span>, <span class="hljs-string">&quot;&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;-&gt;&quot;</span> + <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>).<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>() + <span class="hljs-string">&quot;&lt;-&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;remove space&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 关于 JS 中内置的支持类：Date，可以用来获取时间/日期</span><br><span class="hljs-comment">// *获取系统当前时间</span><br><span class="hljs-keyword">var</span> nowTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-comment">// 输出（类似于 System.out.println())</span><br><span class="hljs-comment">// document.write(nowTime);</span><br><br><span class="hljs-comment">// 转换成具有本地语言环境的日期格式</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(nowTime.<span class="hljs-title function_">toLocaleString</span>());<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br><br><span class="hljs-comment">// 获取时间后自定制日期格式</span><br><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-keyword">var</span> year = d.<span class="hljs-title function_">getFullYear</span>(); <span class="hljs-comment">// 全格式返回年信息</span><br><span class="hljs-keyword">var</span> month = d.<span class="hljs-title function_">getMonth</span>();   <span class="hljs-comment">// 月份是 0-11</span><br><span class="hljs-comment">// var dayOfWeek = d.getDay(); // 获取一周的第几天</span><br><span class="hljs-keyword">var</span> day = d.<span class="hljs-title function_">getDate</span>();  <span class="hljs-comment">// 获取日信息</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(year + <span class="hljs-string">&quot;年&quot;</span> + (month+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br><br><span class="hljs-comment">// *获取毫秒数（1970.01.01 00:00:00 000 至今）</span><br><span class="hljs-keyword">var</span> msa = d.<span class="hljs-title function_">getTime</span>();<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(msa);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br><span class="hljs-comment">// 联合使用</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>());<br></code></pre></td></tr></table></figure><h3 id="设置网页时钟"><a href="#设置网页时钟" class="headerlink" title="设置网页时钟"></a>设置网页时钟</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 时间函数</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">displayDate</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> nowDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">toLocaleString</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> dateElt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;date&quot;</span>);</span><br><span class="language-javascript">        dateElt.<span class="hljs-property">innerText</span> = nowDate;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 开始展示时间函数</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">displayStart</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 每隔一秒调用一次函数，实现自动更新</span></span><br><span class="language-javascript">        <span class="hljs-title function_">displayDate</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">// 全局变量传递给 window.cleanInterval() 以终止时间</span></span><br><span class="language-javascript">        stop = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;displayDate()&quot;</span>, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 停止时间函数</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">displayStop</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(stop);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 点击按钮显示网页时钟 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Now Date&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;displayStart()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnDate&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 点击按钮终止网页时钟 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Stop Date&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;displayStop()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;date&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><p>要求：</p><ol><li>用户名不能为空</li><li>用户名必须在6-14位之间</li><li>用户名只能有数字和字母组成，不能有其他符号（正则表达式）</li><li>密码和确认密码一致，邮箱地址合法</li><li>统一失去焦点验证</li><li>错误提示信息统一在 span 标签中提示，要求字体 12px、红色</li><li>文本框再次获得焦点后，清空错误提示信息；如果文本框中数据不合法，要求清空文本框的 value</li><li>最终表单中所有项均合法方可提交</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    表单验证</span><br><span class="hljs-comment">    要求：</span><br><span class="hljs-comment">        1. 用户名不能为空</span><br><span class="hljs-comment">        2. 用户名必须在6-14位之间</span><br><span class="hljs-comment">        3. 用户名只能有数字和字母组成，不能有其他符号（正则表达式）</span><br><span class="hljs-comment">        4. 密码和确认密码一致，邮箱地址合法</span><br><span class="hljs-comment">        5. 统一失去焦点验证</span><br><span class="hljs-comment">        6. 错误提示信息统一在 span 标签中提示，要求字体 12px、红色</span><br><span class="hljs-comment">        7. 文本框再次获得焦点后，清空错误提示信息；如果文本框中数据不合法，要求清空文本框的 value</span><br><span class="hljs-comment">        8. 最终表单中所有项均合法方可提交</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单验证<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 用户名</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 获取用户名元素</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> unElt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;un&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 获取用户名的错误信息元素</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> unErr = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;unErr&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 验证是否合法</span></span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">unLegal</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> unVal = unElt.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript">                <span class="hljs-comment">// 判断用户名合法的正则表达式</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> unRegExp = <span class="hljs-regexp">/^[A-Za-z0-9]&#123;6,14&#125;$/</span>;</span><br><span class="language-javascript">                </span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (!unVal) &#123;</span><br><span class="language-javascript">                    unErr.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;Username can&#x27;t be null&quot;</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (unVal.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span> || unVal.<span class="hljs-property">length</span> &gt; <span class="hljs-number">14</span>) &#123;</span><br><span class="language-javascript">                    unErr.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;Username must between 6 and 14&quot;</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!unRegExp.<span class="hljs-title function_">test</span>(unVal)) &#123;</span><br><span class="language-javascript">                    unErr.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;Username were only in num or word&quot;</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 失去焦点</span></span><br><span class="language-javascript">            unElt.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">unLegal</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 获取焦点清空错误信息，若不合法，清空输入框</span></span><br><span class="language-javascript">            unElt.<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 直接通过是否有错误信息判断</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (unErr.<span class="hljs-property">innerText</span>) &#123;</span><br><span class="language-javascript">                    unElt.<span class="hljs-property">value</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                unErr.<span class="hljs-property">innerText</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 密码</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> pwdElt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;pwd&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> pwdErr = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;pwdErr&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 验证是否合法</span></span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">pwdLegal</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> pwdVal = pwdElt.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (pwdVal == <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="language-javascript">                    pwdErr.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;Password can&#x27;t be null&quot;</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 失去焦点</span></span><br><span class="language-javascript">            pwdElt.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">pwdLegal</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 获取焦点</span></span><br><span class="language-javascript">            pwdElt.<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                pwdErr.<span class="hljs-property">innerText</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 确认密码</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> rpwdElt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;rpwd&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> rpwdErr = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;rpwdErr&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 验证是否合法</span></span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">rpwdLegal</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> rpwdVal = rpwdElt.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (rpwdVal != pwdElt.<span class="hljs-property">value</span>.<span class="hljs-title function_">trim</span>()) &#123;</span><br><span class="language-javascript">                    rpwdErr.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;Oops! Password not same&quot;</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 失去焦点验证</span></span><br><span class="language-javascript">            rpwdElt.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">rpwdLegal</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">// 获取焦点验证</span></span><br><span class="language-javascript">            rpwdElt.<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                rpwdErr.<span class="hljs-property">innerText</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// submit 提交判断，若有一个不合法，则聚焦对应文本框</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> submitElt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;submit&quot;</span>);</span><br><span class="language-javascript">            submitElt.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">unLegal</span>()) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">pwdLegal</span>()) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">rpwdLegal</span>()) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// reset 清除所有错误提示</span></span><br><span class="language-javascript">            resetElt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;reset&quot;</span>);</span><br><span class="language-javascript">            resetElt.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                unErr.<span class="hljs-property">innerText</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">                pwdErr.<span class="hljs-property">innerText</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">                rpwdErr.<span class="hljs-property">innerText</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://localhost:8080/dom/hw01&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名*<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;un&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;unErr&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码*<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwdErr&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>确认密码*<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rpwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rpwdErr&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;em&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emErr&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;register&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>vv：</p><ol><li>若获取的属性需要修改，则应获取对象元素即可，否则修改的是变量而不是目标属性。因为存储对象的变量是一个引用类型，可以直接访问到该对象的属性</li><li>trim() 是字符串的方法</li></ol></blockquote><h3 id="复选框的全选"><a href="#复选框的全选" class="headerlink" title="复选框的全选"></a>复选框的全选</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>全选<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            saElt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sa&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 根据 name 获取所有 habit 元素</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> saSta = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;habit&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 全选框 onclick</span></span><br><span class="language-javascript">            saElt.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 可将所有元素选中状态直接更改为全选框的选中状态</span></span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> saSta) &#123;</span><br><span class="language-javascript">                    saSta[i].<span class="hljs-property">checked</span> = saElt.<span class="hljs-property">checked</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 每个单选框 onclick</span></span><br><span class="language-javascript">            <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> saSta) &#123;</span><br><span class="language-javascript">                saSta[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 每次选中则遍历列表，若选中数等于总数，则全选框自动选中</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> checkedCount = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> saSta) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (saSta[i].<span class="hljs-property">checked</span>) &#123;</span><br><span class="language-javascript">                            checkedCount++;</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 判断选中数与总数，并修改全选框状态</span></span><br><span class="language-javascript">                    saElt.<span class="hljs-property">checked</span> = checkedCount == saSta.<span class="hljs-property">length</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sa&quot;</span>&gt;</span>Select All<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;habit&quot;</span>&gt;</span>Sing<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;habit&quot;</span>&gt;</span>Dancing<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;habit&quot;</span>&gt;</span>Piano<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>vv：</p><p>譬如 16、32 行代码，运算结果判断影响变量时可进行代码优化，直接赋值</p></blockquote><h3 id="获取下拉列表选中的-value"><a href="#获取下拉列表选中的-value" class="headerlink" title="获取下拉列表选中的 value"></a>获取下拉列表选中的 value</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;alert(this.value)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>--请选择城市--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;001&quot;</span>&gt;</span>武汉市<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;002&quot;</span>&gt;</span>襄阳市<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;003&quot;</span>&gt;</span>麻城市<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>BOM 编程汇总，window 对象是顶级对象，代表浏览器窗口</p><h2 id="open"><a href="#open" class="headerlink" title="open"></a>open</h2><p>window.open(‘url’, ‘_[self, blank, parent, top]’)</p><p>打开窗口，第一个参数填写地址，第二个参数填写打开方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开启 blog（默认窗口）&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;https://wataaaame.github.io&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开启 blog（当前窗口）&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;https://wataaaame.github.io&#x27;, &#x27;_self&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开启 blog（新窗口）&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;https://wataaaame.github.io&#x27;, &#x27;_blank&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开启 blog（父窗口）&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;https://wataaaame.github.io&#x27;, &#x27;_parent&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开启 blog（顶级窗口）&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;https://wataaaame.github.io&#x27;, &#x27;_top&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;to 02-close.html&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;02-close.html&#x27;)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="close"><a href="#close" class="headerlink" title="close"></a>close</h2><p>window.close()</p><p>关闭窗口</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.close()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>window.history.back()</p><p>同浏览器返回，默认后退上一级</p><p>window.history.go()</p><p>同浏览器前进，默认前进0</p><ul><li>go(-1) 等同于 back()</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;back&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.history.back()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;back&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.history.go(-1)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><p>window.location.href</p><p>该<strong>属性</strong>设置浏览器地址</p><ul><li>href 可省略</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;vv blog&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.location.href = &#x27;https://wataaaame.github.io&#x27;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>document 中也有 .location.href，且 href 同样可以省略</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;url&quot;</span>;<br></code></pre></td></tr></table></figure><p>总结：哪些方法可以通过浏览器向服务器发送请求？</p><ol><li>直接地址栏输入 URL 回车</li><li>超链接</li><li>表单 submit</li><li>window.open</li><li>window.location.href</li><li>document.location.href</li></ol><p>以上所有请求方式均可携带数据给浏览器，但只有<strong>直接输入</strong>与<strong>表单 submit</strong> 可以动态携带</p><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>iframe元素表示嵌套的浏览上下文。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;08.html&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>window.self</p><p>当前窗口</p><p>window.top</p><p>顶层窗口</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 如果当前页面不是顶级窗口，设置为顶级窗口</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setTop</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">top</span> != <span class="hljs-variable language_">window</span>.<span class="hljs-property">self</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">window</span>.<span class="hljs-property">top</span>.<span class="hljs-property">location</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">self</span>.<span class="hljs-property">location</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;如果当前页面不是顶级窗口，设置为顶级窗口&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;setTop()&quot;</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front End</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DOM</tag>
      
      <tag>BOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - Note01 ECMAScript</title>
    <link href="/2022/07/22/JavaScript%20-%20Note01%20ECMAScript/"/>
    <url>/2022/07/22/JavaScript%20-%20Note01%20ECMAScript/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript 是运行在浏览器上的脚本语言，简称 JS，是一门事件驱动型的编程语言，依靠事件去驱动，然后执行对应的程序（事件前加 on 代表事件的句柄）</p><blockquote><p>页面打开时，js 代码并不会执行，只是把这段代码注册到事件上，等事件发生后，注册在句柄后的 js 代码会被浏览器自动调用</p></blockquote><p>JavaScipt 虽然带有 Java，但是没有任何关系，只是语法有点类似，运行位置不同（Java 运行在 JVM 中，JS 运行在浏览器中）</p><p>JavaScript 程序不需要程序员手动编译，编写完代码后，浏览器直接打开解释运行</p><blockquote><p>JavaScript 的“目标程序”以普通文本形式保存，这种语言都叫做“脚本语言”</p></blockquote><h2 id="嵌入方式"><a href="#嵌入方式" class="headerlink" title="嵌入方式"></a>嵌入方式</h2><p>JS 中的字符串可以使用单&#x2F;双引号</p><p>JS 语句结束的分号可省可不省</p><ol><li><p>直接添加属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>嵌入1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 实现功能：用户点击以下按钮，弹出消息框 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 鼠标点击事件 click（事件句柄 onclick，以 html 标签属性存在） --&gt;</span><br>    <span class="hljs-comment">&lt;!-- js 中内置 window 对象（浏览器对象），通过 window 对象 alert 实现弹窗 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.alert(&#x27;hello vv!&#x27;)&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其中 window. 可省略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;hello ee!&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>脚本块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- JS 脚本块页面中可出现多次，且出现位置无要求 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>嵌入2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 暴露在脚本块中的程序，在页面打开时执行，并且遵循自上而下的原则</span></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello vv&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello vv2&quot;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;I&#x27;m a button&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>alert 会阻塞页面加载，直到用户点击确定按钮</li></ul></li><li><p>文件引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>嵌入3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 在需要的位置引入 js 脚本文件 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        不能省略反标签：</span><br><span class="hljs-comment">            &lt;script scr=&#x27;...&#x27; /&gt;</span><br><span class="hljs-comment">        引入文件时，方法体中的代码不会执行，但可重写一个代码块</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/03.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>JavaScript 是一种弱类型语言，声明变量无需指定类型，可接收任意类型变量</p><blockquote><p>Java 是一种强类型语言，变量声明时的类型，之后不可变</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明</span><br><span class="hljs-keyword">var</span> 变量名;<br><span class="hljs-comment">// 赋值</span><br>变量名 = 值;<br></code></pre></td></tr></table></figure><p>在 JS 中，当一个变量没有手动赋值时，系统默认赋值 undefined，其在 JS 中是一个具体存在的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> i;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;i = &quot;</span> + i);<br><span class="hljs-comment">// i = undefined</span><br></code></pre></td></tr></table></figure><p>若未声明变量直接访问则会报错（须在浏览器控制台查看错误信息）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 未定义变量（需在浏览器控制台查看错误信息）</span><br><span class="hljs-title function_">alert</span>(u);<br></code></pre></td></tr></table></figure><p>连续定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a, b, c = <span class="hljs-number">100</span>;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;a = &quot;</span> + a);<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;b = &quot;</span> + b);<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;c = &quot;</span> + c);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">a = undefined</span><br><span class="hljs-comment">b = undefined</span><br><span class="hljs-comment">c = 100</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>全局变量：在函数体之外，生命周期是浏览器打开到关闭（尽量少用，占用浏览器内存）</p><p>局部变量：在函数体中，包括形参，生命周期是函数开始到结束</p><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;vv&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showName</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;ee&quot;</span>;<br>    <span class="hljs-title function_">alert</span>(name);<br>&#125;<br><span class="hljs-title function_">showName</span>(); <span class="hljs-comment">// ee</span><br><span class="hljs-title function_">alert</span>(name);    <span class="hljs-comment">// vv</span><br></code></pre></td></tr></table></figure><ul><li><p>如果变量未使用 var 声明，则该变量无论位置，皆为全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 变量未使用 var 声明，该变量为全局变量</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myfun</span>(<span class="hljs-params"></span>) &#123;<br>me = <span class="hljs-string">&quot;myfun()&quot;</span>;<br>&#125;<br><span class="hljs-title function_">alert</span>(me);<span class="hljs-comment">// myfun()</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>可被重复利用的代码片段，用于完成某个特定功能</p><p>语法格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 第一种方式</span><br><span class="hljs-keyword">function</span> 函数名(形式参数列表) &#123;<br>    函数体;<br>&#125;<br><br><span class="hljs-comment">// 第二种方式</span><br>函数名 = <span class="hljs-keyword">function</span>(<span class="hljs-params">形式参数列表</span>) &#123;<br>    函数体;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>JS 中的函数不需要指定返回值类型</li></ul><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>函数初步<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// sum 函数</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(a + b);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 函数调用</span></span><br><span class="language-javascript">        <span class="hljs-title function_">sum</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// sayHello 函数</span></span><br><span class="language-javascript">        sayHello = <span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello, &quot;</span> + name);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 函数调用</span></span><br><span class="language-javascript">        <span class="hljs-title function_">sayHello</span>(<span class="hljs-string">&#x27;vv&#x27;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sayHello&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sayHello(&#x27;vv&#x27;)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>JS 中的函数调用时，参数类型、参数个数均无限制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">// 调用函数</span><br><span class="hljs-keyword">var</span> retValue1 = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-title function_">alert</span>(retValue1);   <span class="hljs-comment">// 3</span><br><br><span class="hljs-keyword">var</span> retValue2 = <span class="hljs-title function_">sum</span>(<span class="hljs-string">&quot;vv&quot;</span>);<br><span class="hljs-title function_">alert</span>(retValue2);   <span class="hljs-comment">// vvundefined</span><br><br><span class="hljs-keyword">var</span> retValue3 = <span class="hljs-title function_">sum</span>();<br><span class="hljs-title function_">alert</span>(retValue3);   <span class="hljs-comment">// NaN</span><br><span class="hljs-comment">// NaN 表示一个具体的值，该值表示不是一个数字</span><br><br><span class="hljs-keyword">var</span> retValue4 = <span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-title function_">alert</span>(retValue4);   <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>同名函数会自动覆盖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 同名函数会自动覆盖</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;test&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;test test&quot;</span>);<br>&#125;<br><br><span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;vv&quot;</span>); <span class="hljs-comment">// test test</span><br></code></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>虽然声明时不需要指定数据类型，但在赋值时还是有数据类型</p><p>原始类型：Undefined, Number, String, Boolean, Null</p><p>引用类型：Object 以及 Object 的子类</p><p>ES规范（ECMAScript）在 ES6 之后，新增了 Symbol</p><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>可以在程序的运行阶段动态的获取变量的数据类型</p><p>语法格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> 变量名<br></code></pre></td></tr></table></figure><p>typeof 运算符结果是以下 6 个字符串之一（全都小写）</p><p>“undefined”, “number”, “string”, “boolean”, “object”, “function”</p><p>JS 中比较字符串使用双等号完成</p><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><p>Undefined 类型只有一个值，这个值就是 undefined</p><p>当一个变量没有手动赋值，系统默认赋值 undefined，也可以手动赋值 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> i;<span class="hljs-comment">// &quot;undefined&quot;</span><br><span class="hljs-keyword">var</span> k = <span class="hljs-literal">undefined</span>;<span class="hljs-comment">// &quot;undefined&quot;</span><br><span class="hljs-keyword">var</span> y = <span class="hljs-string">&quot;undefined&quot;</span><span class="hljs-comment">// &quot;string&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>包括：整数、小数、正数、负数、不是数字（NaN）、无穷大（Infinity）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> v1 = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> v2 = <span class="hljs-number">3.14</span>;<br><span class="hljs-keyword">var</span> v3 = -<span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> v4 = <span class="hljs-title class_">NaN</span>;<br><span class="hljs-keyword">var</span> v5 = <span class="hljs-title class_">Infinity</span>;<br><br><span class="hljs-comment">// &quot;number&quot;</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> v1);<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> v2);<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> v3);<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> v4);<br><span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> v5);<br></code></pre></td></tr></table></figure><p>NaN（Not a number），不是一个数字，但属于 Number 类型。本来是数字运算，当运算完却不是数字时，结果是 NaN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// NaN</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">100</span>;<br><span class="hljs-title function_">alert</span>(a / b);   <span class="hljs-comment">// NaN</span><br><span class="hljs-comment">// 字符串拼接</span><br><span class="hljs-title function_">alert</span>(a + b);   <span class="hljs-comment">// abc100</span><br></code></pre></td></tr></table></figure><p>Infinity，当除数为0是结果为无穷大</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Infinity</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-number">10</span> / <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><ol><li><p>isNaN()</p><p>括号中填数据，结果是 true 表示不是一个数字，结果是 false 表示是一个数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 改进 sum</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(a) || <span class="hljs-built_in">isNaN</span>(b)) &#123;<br>        <span class="hljs-title function_">alert</span>(a + <span class="hljs-string">&quot; and &quot;</span> + b + <span class="hljs-string">&quot; not all number&quot;</span>);<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-title function_">alert</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;vv&quot;</span>));<br></code></pre></td></tr></table></figure></li><li><p>parseInt()</p><p>将字符串自动转换为数字，并且取整数位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// parseInt()</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-number">3.14</span>));<span class="hljs-comment">// 3</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;4.15&quot;</span>));<span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure></li><li><p>parseFloat()</p><p>将字符串自动转换为数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// parseFloat()</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-number">4.44</span>));<span class="hljs-comment">// 4.44</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;5.553&quot;</span>) + <span class="hljs-number">1</span>);<span class="hljs-comment">// 6.553</span><br></code></pre></td></tr></table></figure></li><li><p>Math.ceil()</p><p>Math 是数学类，函数的作用是：向上取整</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Math.ceil()</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-number">3.11</span>));<br></code></pre></td></tr></table></figure></li></ol><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>JS 中的布尔类型永远只有 true 和 false</p><p>Boolean 类型中有一个函数叫做：Boolean()</p><p>语法格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Boolean</span>(数据)<br></code></pre></td></tr></table></figure><ul><li>将非布尔类型转换成布尔类型</li></ul><p>if 中若不为 boolean 类型，则调用 Boolean() 函数自动转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;vv&quot;</span>;<br><span class="hljs-comment">// 若 if 中不为 boolean，会自动调用 Boolean() 将其转换为 boolean 类型</span><br><span class="hljs-keyword">if</span> (name) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Welcome, &quot;</span> + name);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Name can&#x27;t be null&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Boolean() 自动转换规律：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 规律：“有”转为 true，“无”转换为 false</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">1</span>));  <span class="hljs-comment">// true</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">0</span>));  <span class="hljs-comment">// false</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&quot;&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&quot;abc&quot;</span>));  <span class="hljs-comment">// true</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">null</span>));   <span class="hljs-comment">// false</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-title class_">NaN</span>));    <span class="hljs-comment">// false</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">undefined</span>));  <span class="hljs-comment">// false</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-title class_">Infinity</span>));   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>Null 类型只有一个数据 null</p><ul><li>typeof(null) 结果为 object 类型</li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>JS 中字符串可以使用单引号或双引号</p><p>创建字符串的两种方式：</p><ol><li><p>直接使用引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>使用 JS 内置支持类 String</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;def&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>String 是一个内置的类，可以直接使用，父类是 Objcet</li></ul></li></ol><p>测试两种定义方式的数据类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;def&quot;</span>);<br><br><span class="hljs-comment">// 小 String（String 原始数据类型）</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title function_">typeof</span>(s1));<span class="hljs-comment">// string</span><br><span class="hljs-comment">// 大 String（Object 数据类型）</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title function_">typeof</span>(s2));<span class="hljs-comment">// object</span><br><br><span class="hljs-comment">// 无论大小 String，他们的属性通用</span><br><span class="hljs-comment">// 例如 .length 获取字符串长度</span><br><span class="hljs-title function_">alert</span>(s1.<span class="hljs-property">length</span>);<br><span class="hljs-title function_">alert</span>(s2.<span class="hljs-property">length</span>);<br></code></pre></td></tr></table></figure><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ol><li><p>length</p><p>获取字符串长度</p></li></ol><h4 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h4><ol><li><p>indexOf()</p><p>获取指定字符串在当前字符串中第一次出现处的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;http://wataaaame.github.io&quot;</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;http&quot;</span>));  <span class="hljs-comment">// 0</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;http://wataaaame.github.io&quot;</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;https&quot;</span>));  <span class="hljs-comment">// -1</span><br><span class="hljs-comment">// 引申：判断一个字符串中是否包含某一个字符串？</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;http://wataaaame.github.io&quot;</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;https&quot;</span>) &gt;= <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;包含&quot;</span> : <span class="hljs-string">&quot;不包含&quot;</span>);  <span class="hljs-comment">// 不包含</span><br></code></pre></td></tr></table></figure></li><li><p>lastIndexOf()</p><p>获取指定字符串在当前字符串中最后一次出现处的索引</p></li><li><p>replace()</p><p>替换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// replace</span><br><span class="hljs-comment">// 默认只替换第一个</span><br><span class="hljs-comment">// 想全部替换需要正则表达式</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;a &amp; b &amp; c &amp; d&quot;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>));   <span class="hljs-comment">// a + b &amp; c &amp; d</span><br></code></pre></td></tr></table></figure></li><li><p>substr()</p><p>截取子字符串</p></li><li><p>substring()</p><p>截取子字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br><span class="hljs-comment">// substr(startIndex, length)</span><br><span class="hljs-title function_">alert</span>(str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>));    <span class="hljs-comment">// c d e f</span><br><span class="hljs-comment">// substring(startIndex, endIndex)（左闭右开）</span><br><span class="hljs-title function_">alert</span>(str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)); <span class="hljs-comment">// c d</span><br></code></pre></td></tr></table></figure></li><li><p>toLowerCase()</p><p>转换小写</p></li><li><p>toUpperCase()</p><p>转换大写</p></li><li><p>split()</p><p>拆分字符串</p></li></ol><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>Object 类型是所有类型的超类，自定义的任何类型，默认继承 Object</p><p>JS 中定义的类默认继承 Object，会继承类中所有的属性以及函数</p><p>prototype 属性：给类动态地扩展属性和函数</p><p>定义类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> 类名(形参) &#123;<br>    <br>&#125;<br><br>类名 = <span class="hljs-keyword">function</span>(<span class="hljs-params">形参</span>) &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>创建对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> 构造方法名(实参);<span class="hljs-comment">// 构造方法名和类名一致</span><br></code></pre></td></tr></table></figure><p>类与函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 把 function 当作一个类</span><br><span class="hljs-keyword">new</span> <span class="hljs-title function_">sayHello</span>();<br><br><span class="hljs-comment">// 把 function 当作一个函数</span><br><span class="hljs-title function_">sayHello</span>();<br></code></pre></td></tr></table></figure><p>类的定义同时又是一个构造函数的定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">User</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>    <span class="hljs-comment">// 声明属性（this 表示当前对象）</span><br>    <span class="hljs-comment">// User 类中有三个属性：sno/sname/sage</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sno</span> = a;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sname</span> = b;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sage</span> = c;<br>&#125;<br><br><span class="hljs-keyword">var</span> u1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">101</span>, <span class="hljs-string">&quot;vv&quot;</span>, <span class="hljs-number">13</span>);<br><span class="hljs-title function_">alert</span>(u1.<span class="hljs-property">sno</span>);  <span class="hljs-comment">// 101</span><br><span class="hljs-title function_">alert</span>(u1.<span class="hljs-property">sname</span>);    <span class="hljs-comment">// vv</span><br><span class="hljs-title function_">alert</span>(u1.<span class="hljs-property">sage</span>); <span class="hljs-comment">// 13</span><br><br><span class="hljs-comment">// 访问一个对象的属性，还可以使用这种语法</span><br><span class="hljs-title function_">alert</span>(u1[<span class="hljs-string">&quot;sno&quot;</span>]); <span class="hljs-comment">// 101</span><br><span class="hljs-title function_">alert</span>(u1[<span class="hljs-string">&quot;sname&quot;</span>]);   <span class="hljs-comment">// vv</span><br><span class="hljs-title function_">alert</span>(u1[<span class="hljs-string">&quot;sage&quot;</span>]);    <span class="hljs-comment">// 13</span><br></code></pre></td></tr></table></figure><p>类中方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 类中函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Product</span>(<span class="hljs-params">name, price</span>) &#123;<br>    <span class="hljs-comment">// 属性</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;<br><br>    <span class="hljs-comment">// 函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">getPrice</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> pro = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>(<span class="hljs-string">&quot;Watermallo&quot;</span>, <span class="hljs-number">4.0</span>);<br><span class="hljs-title function_">alert</span>(pro.<span class="hljs-title function_">getPrice</span>());<span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><ul><li>静态方法也需要创建对象后调用</li></ul><p>prototype 属性动态扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 可通过 prototype 属性来给类动态扩展属性以及函数</span><br><span class="hljs-comment">// 扩展属性</span><br><span class="hljs-title class_">Product</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sale</span> = <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 扩展函数</span><br><span class="hljs-title class_">Product</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>&#125;<br><br>pro = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>(<span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-number">3</span>);<br><span class="hljs-title function_">alert</span>(pro.<span class="hljs-title function_">getName</span>());<span class="hljs-comment">// Orange</span><br><span class="hljs-title function_">alert</span>(pro.<span class="hljs-property">sale</span>);<span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><h2 id="null-NaN-undefined"><a href="#null-NaN-undefined" class="headerlink" title="null NaN undefined"></a>null NaN undefined</h2><table><thead><tr><th>区别</th><th>null</th><th>NaN</th><th>undefined</th></tr></thead><tbody><tr><td>数据类型不一致</td><td>object</td><td>number</td><td>undefined</td></tr><tr><td>&#x3D;&#x3D;</td><td></td><td>与 undefined 等同</td><td>与 NaN 等同</td></tr><tr><td>&#x3D;&#x3D;&#x3D;</td><td>false</td><td>false</td><td>false</td></tr></tbody></table><p>JS 中两个特殊运算符</p><ol><li>&#x3D;&#x3D;，等同运算符，只判断值</li><li>&#x3D;&#x3D;&#x3D;，全等运算符，既判断值又判断数据类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span> == <span class="hljs-literal">true</span>);<span class="hljs-comment">// true</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span> === <span class="hljs-literal">true</span>);<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件是可以被控件识别的操作</p><p>任何一个事件都对应一个时间句柄，事件句柄是在时间前添加 on，以属性的形式存在</p><h3 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h3><h4 id="焦点"><a href="#焦点" class="headerlink" title="焦点"></a>焦点</h4><ol><li>blur 失去焦点</li><li>focus 获得焦点</li></ol><h4 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h4><ol><li>click 鼠标单击</li><li>dblclick 鼠标双击</li><li>mousedown 鼠标按下</li><li>mouseup 鼠标弹起</li><li>mousemove 鼠标移动</li><li>mouseover 鼠标经过</li><li>mouseout 鼠标离开</li></ol><h4 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h4><ol><li><p>keydown 键盘按下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取键值，浏览器传递一个事件对象供函数调用</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;username&quot;</span>).<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 对于“键盘事件对象”来说，都有 keyCode 属性用来获取键值</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 回车键的键值是 13</span></span><br><span class="language-javascript">            <span class="hljs-comment">// ESC键的键值是 27</span></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (event.<span class="hljs-property">keyCode</span> == <span class="hljs-number">13</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;login success!&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>keyup 键盘弹起</p></li></ol><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><ol><li>reset 表单重置</li><li>submit 表单提交</li></ol><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol><li><p>change 下拉列表选中项改变，或文本框内容改变</p></li><li><p>select 文本被选中</p></li><li><p>load 页面加载完毕</p><p>整个 HTML 页面中所有的元素全部加载完毕之后发生</p></li></ol><h3 id="注册方式"><a href="#注册方式" class="headerlink" title="注册方式"></a>注册方式</h3><ol><li><p>标签中直接使用事件句柄</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 函数被调用称为：callback（回调函数）</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sayHello&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sayHello()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用纯 JS 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;document&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mybtn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayDoc</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Document&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 第一步：先获取这个按钮对象（document 为内置对象，代表整个页面）</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> btnObj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;mybtn&quot;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">// 第二步：给按钮对象的 onclick 属性赋值</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 此处函数不能加小括号，否则会自动执行</span></span><br><span class="language-javascript">    btnObj.<span class="hljs-property">onclick</span> = sayDoc;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>支持匿名函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;niming&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnniming&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 支持匿名函数</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 页面打开时仅注册，事件发生后才会调用</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btnniming&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;niming function&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="JS-代码执行顺序"><a href="#JS-代码执行顺序" class="headerlink" title="JS 代码执行顺序"></a>JS 代码执行顺序</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- load 事件在全部元素加载完毕后发生 --&gt;</span><br><span class="hljs-comment">&lt;!-- 否则先定义函数，button 还未生成，未能绑定事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;ready()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">ready</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;already&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ready?&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以不在标签内写 onload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 在这里调用 window.onload，并使用匿名内部类</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 页面加载过程中，将外层函数注册给 load 事件</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 页面加载完毕后，load 事件发生，执行外层回调函数</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 外层回调函数执行过程中，将内层函数注册给 click 事件</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 当按钮节点发生 click 事件后，内层函数被调用并执行</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;already&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ready?&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="设置节点属性"><a href="#设置节点属性" class="headerlink" title="设置节点属性"></a>设置节点属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 一个节点对象中有的属性都可以“.”</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;text&quot;</span>).<span class="hljs-property">type</span> = <span class="hljs-string">&quot;checkbox&quot;</span>;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;将文本框改变为复选框&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="void-运算符"><a href="#void-运算符" class="headerlink" title="void 运算符"></a>void 运算符</h2><p>void(表达式)</p><p>void 运算符执行括号中的表达式，但不返回任何结果</p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">Title<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    href 若不填，则返回空字符串</span><br><span class="hljs-comment">    此处不能直接 void(0)，会被识别为路径，需要加上 “javascript:”，且 void() 中的表达式可为任意值</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.alert(&#x27;yes&#x27;)&quot;</span>&gt;</span><br>    既保留住超链接样式，同时用户点击超链接时执行一段 JS 代码，但页面不能跳转<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p>if, switch, while, do…while…, for, break, continue,</p><p><em>for…in</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// for...in 语句</span><br><span class="hljs-comment">// 用在数组，拿出的是数组下标（Java foreach 拿出的是元素）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> arr) &#123;<br>    <span class="hljs-title function_">alert</span>(arr[i]);<br>&#125;<br><br><span class="hljs-comment">// for...in 语句可以遍历对象的属性</span><br><span class="hljs-title class_">User</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">name, password</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = password;<br>&#125;<br><span class="hljs-keyword">var</span> u1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;vv&quot;</span>, <span class="hljs-number">123</span>);<br><span class="hljs-comment">// 用在对象，拿出的是属性名</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> u1) &#123;<br>    <span class="hljs-comment">// typeof 为 String 类型，访问不需要加双引号</span><br>    <span class="hljs-title function_">alert</span>(u1[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p><em>with</em></p><p>自动将 <code>类名.</code> 加到属性前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用 with 访问对象属性</span><br><span class="hljs-keyword">var</span> u2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;ee&quot;</span>, <span class="hljs-number">456</span>);<br><span class="hljs-title function_">with</span>(<span class="hljs-params">u2</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(name + <span class="hljs-string">&quot;, &quot;</span> + password);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建长度为0的数组</span><br><span class="hljs-keyword">var</span> arr1 = [];<br><span class="hljs-comment">// 数据类型随意</span><br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">3.14</span>, -<span class="hljs-number">5</span>, <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()];<br><span class="hljs-comment">// 下标越界自动扩容</span><br>arr2[<span class="hljs-number">7</span>] = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr2.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(arr2[i] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br><br><span class="hljs-comment">// 另一种创建数组对象的方式</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(a.<span class="hljs-property">length</span>);   <span class="hljs-comment">// 0</span><br><br><span class="hljs-keyword">var</span> a2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(a2.<span class="hljs-property">length</span>);  <span class="hljs-comment">// 3</span><br><br><span class="hljs-keyword">var</span> a3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);   <span class="hljs-comment">// 存储2和3</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(a3.<span class="hljs-property">length</span>);  <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>数组方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 分割</span><br><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>];<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(a.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);    <span class="hljs-comment">// 1-2-3-9</span><br><br><span class="hljs-comment">// 末尾追加元素（长度+1）</span><br>a.<span class="hljs-title function_">push</span>(<span class="hljs-number">10</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(a.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);   <span class="hljs-comment">// 1-2-3-9-10</span><br><br><span class="hljs-comment">// 弹出末尾元素（长度-1）（返回该元素）</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(a.<span class="hljs-title function_">pop</span>() + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);   <span class="hljs-comment">// 10</span><br><br><span class="hljs-comment">// 反转</span><br>a.<span class="hljs-title function_">reverse</span>();<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(a.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>));    <span class="hljs-comment">// 9-3-2-1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front End</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECMAScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS - Note</title>
    <link href="/2022/07/21/CSS%20-%20Note/"/>
    <url>/2022/07/21/CSS%20-%20Note/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>CSS（Cascading Style Sheet）：层叠样式表语言</p><p>作用：修饰 HTML 页面，设置某些元素的样式，让其更加好看</p><blockquote><p>CSS 好比 HTML 的化妆品</p></blockquote><h2 id="使用-CSS-的三种方式"><a href="#使用-CSS-的三种方式" class="headerlink" title="使用 CSS 的三种方式"></a>使用 CSS 的三种方式</h2><ol><li><p>内联定义：在标签内部使用 style 属性来设置元素的 CSS 样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;标签 style=&quot;样式名:样式值; 样式名:样式值...&quot;&gt;&lt;/标签&gt;<br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>内联定义样式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        width 宽度样式</span><br><span class="hljs-comment">        height 高度样式</span><br><span class="hljs-comment">        background-color 背景色样式</span><br><span class="hljs-comment">        display 布局样式（none 隐藏，block 显示）</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none; width:300px; height:300px; background-color:#CCFFFF&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:300px; height:300px; background-color:#CCFFFF;</span></span><br><span class="hljs-string"><span class="hljs-tag">        border: 1px solid black;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>内部样式块对象：在 HTML 文档的 <code>&lt;HTML&gt;</code> 和 <code>&lt;BODY&gt;</code> 标记之间插入一个 <code>&lt;STYLE&gt;...&lt;/STYLE&gt;</code> 块对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        选择器 &#123;</span><br><span class="language-css">样式名: 样式值;</span><br><span class="language-css">            样式名: 样式值;</span><br><span class="language-css">            ...</span><br><span class="language-css">        &#125;</span><br><span class="language-css">选择器 &#123;</span><br><span class="language-css">样式名: 样式值;</span><br><span class="language-css">            样式名: 样式值;</span><br><span class="language-css">            ...</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>内部样式块对象<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 这是 CSS 的注释（与 Java 相同） */</span></span><br><span class="language-css">        <span class="hljs-comment">/* id 选择器 */</span></span><br><span class="language-css">        <span class="hljs-selector-id">#usernameErrorMsg</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 标签选择器 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: black;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 类选择器 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.class</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;usernameErrorMsg&quot;</span>&gt;</span>Sorry, username can&#x27;t be null<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- class 相同的属于同一类 --&gt;</span><br>    class<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>链入外部样式表文件</strong>：将样式写到一个独立的 xxx.css 中，在需要的网页上直接引入 css 文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css文件路径&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>优点：易维护，维护成本低</p><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>引入外部样式文件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 引入样式文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/03.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://wataaaame.github.io&quot;</span>&gt;</span>真实的超链接无样式<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span1&quot;</span>&gt;</span>虚假的文字像超链接<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><br><span class="hljs-selector-id">#span1</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: underline;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        coursor 鼠标样式，pointer、hand 都代表小手</span><br><span class="hljs-comment">            但是 hand 有兼容性问题，建议使用 pointer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h2><p>去除小圆点</p><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>列表样式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 去除列表小圆点 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style-type</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>湖北<br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>武汉<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>襄阳<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>浙江<br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>嘉善<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>绍兴<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>金华<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><br><span class="hljs-selector-id">#span1</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: underline;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">        coursor 鼠标样式，pointer、hand 都代表小手</span><br><span class="hljs-comment">            但是 hand 有兼容性问题，建议使用 pointer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>绝对定位<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#div1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: lightpink;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">25%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">25%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front End</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML - Note</title>
    <link href="/2022/07/20/HTML%20-%20Note/"/>
    <url>/2022/07/20/HTML%20-%20Note/</url>
    
    <content type="html"><![CDATA[<h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><h2 id="B-x2F-S-架构"><a href="#B-x2F-S-架构" class="headerlink" title="B&#x2F;S 架构"></a>B&#x2F;S 架构</h2><p>Browser &#x2F; Server（浏览器&#x2F;服务器的交互形式）</p><p>Browser 支持的语言：HTML CSS JavaScript</p><p>Server 端支持的语言：C C++ Java Python</p><p>优点：升级方便，只升级服务器端代码</p><p>缺点：速度慢、体验差、界面简单</p><blockquote><p>企业内部的解决方案都是采用 B&#x2F;S 架构的系统，只需要做到数据的增删改查即可，且企业内部更注重的是开发成本</p></blockquote><h2 id="C-x2F-S-架构"><a href="#C-x2F-S-架构" class="headerlink" title="C&#x2F;S 架构"></a>C&#x2F;S 架构</h2><p>Client &#x2F; Server（客户端&#x2F;服务器端的交互形式）</p><p>优点：速度快、体验好、界面炫酷（娱乐型系统）</p><p>缺点：升级麻烦，维护成本较高</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>Hyper Text Markup Language（超文本标记语言）</p><p>由大量标签组成，每一个标签都有开始标签和结束标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;标签&gt;<br>    &lt;标签 属性名=&quot;属性值&quot;&gt;&lt;/标签&gt;<br>&lt;/标签&gt;<br></code></pre></td></tr></table></figure><ul><li><p>超文本：流媒体、图片、声音、视频等</p></li><li><p>开发使用普通文本编辑器就行，扩展名为 <code>.html</code>，专业开发工具：DreamWeaver、HBuilder等</p></li><li><p>运行使用浏览器打开 HTML 文件就是运行</p></li></ul><h2 id="制定者"><a href="#制定者" class="headerlink" title="制定者"></a>制定者</h2><p>W3C（World Wide Web）：世界万维网联盟制定了 HTML 规范，例如：HTML &#x2F; XML &#x2F; http &#x2F; https…</p><p>提供帮助文档的网站：</p><p><a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a></p><h2 id="第一个-HTML-网页"><a href="#第一个-HTML-网页" class="headerlink" title="第一个 HTML 网页"></a>第一个 HTML 网页</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">1. 这是 HTML 的注释</span><br><span class="hljs-comment">2. 加上以下代码的第一行就表示使用 HTML5 的语法，去掉则为 HTML4</span><br><span class="hljs-comment">3. HTML 不区分大小写，语法松散不严格</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 根 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 头 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 网页标题，显示在网页左上角 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>The Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 体 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        Body, the main part of web<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML 的基本标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 段落标记 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>《红楼梦》，别名《石头记》等，中国古代章回体长篇小说，中国古典四大名著之一，通行本共120回，一般认为前80回是清代作家曹雪芹所著，后40回作者为无名氏，整理者为程伟元、高鹗。小说以贾、史、王、薛四大家族的兴衰为背景，以富贵公子贾宝玉为视角，以贾宝玉与林黛玉、薛宝钗的爱情婚姻悲剧为主线，描绘了一些闺阁佳人的人生百态，展现了真正的人性美和悲剧美，可以说是一部从各个角度展现女性美以及中国古代社会百态的史诗性著作。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>《红楼梦》版本有120回“程本”和80回“脂本”两大系统。程本为程伟元排印的印刷本，脂本为脂砚斋在不同时期抄评的早期手抄本。脂本是程本的底本。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>《红楼梦》是一部具有世界影响力的人情小说、中国封建社会的百科全书、传统文化的集大成者。其作者以“大旨谈情，实录其事”自勉，只按自己的事体情理，按迹循踪，摆脱旧套，新鲜别致，取得了非凡的艺术成就。“真事隐去，假语存焉”的特殊笔法更是令后世读者脑洞大开，揣测之说久而遂多。二十世纪以来，《红楼梦》更以其丰富深刻的思想底蕴和异常出色的艺术成就使学术界产生了以为研究对象的专门学问——红学。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 标题字 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>h2标题字<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2标题字<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>h3标题字<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>h4标题字<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>h5标题字<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>h6标题字<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 换行标记，br 标签是一个独目标签 --&gt;</span><br>Hello<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>World<br><br><span class="hljs-comment">&lt;!-- 横线，独木标记 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- color 和 width 都是 hr 标签的属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 预留格式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><br>for(int i = 0; i &lt; 10; i++) &#123;<br>System.out.println(i);<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>删除字<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>插入字<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>粗体字<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>斜体字<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><br>右上角加字<span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">sup</span>&gt;</span><br><br>右下角加字<span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">sub</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;blue&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;</span>字体标签<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="实体符号"><a href="#实体符号" class="headerlink" title="实体符号"></a>实体符号</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>实体符号<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 实体符号的特点是：以&amp;开始</span><br><span class="hljs-comment">&amp;lt; 小于号</span><br><span class="hljs-comment">&amp;gt; 是大于号</span><br><span class="hljs-comment">&amp;nbsp; 空格</span><br><span class="hljs-comment">--&gt;</span><br>b<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>c<br>b<span class="hljs-symbol">&amp;lt;</span>a<span class="hljs-symbol">&amp;gt;</span>c<br>a<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>b<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表格<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 三行三列的表格 --&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">border 设置表格边框像素</span><br><span class="hljs-comment">width 设置宽度</span><br><span class="hljs-comment">height 设置高度</span><br><span class="hljs-comment">align 设置水平对齐方式</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;60%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;150px&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>d<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>e<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>f<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>x<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>y<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>z<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="单元格合并"><a href="#单元格合并" class="headerlink" title="单元格合并"></a>单元格合并</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表格单元格合并<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;20%&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-comment">&lt;!-- row 级合并：（6和9合并）删除后者，前者加上 rowspan=&quot;2&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>69<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-comment">&lt;!-- column 级合并：（7和8合并）无删除顺序，加上 colspan=&quot;2&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>78<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">&lt;td&gt;9&lt;/td&gt;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="th-标签"><a href="#th-标签" class="headerlink" title="th 标签"></a>th 标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>th标签<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>比 td 多了居中加粗<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="thead-tbody-and-tfoot"><a href="#thead-tbody-and-tfoot" class="headerlink" title="thead, tbody and tfoot"></a>thead, tbody and tfoot</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-comment">&lt;!-- table 中不是必须的，只是方便后期 js 中的代码编写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML单元格-thead tbody tfoot<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 头 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1 group<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>2 group<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>3 group<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 体 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 脚 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>69<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>78<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="背景颜色与背景图片"><a href="#背景颜色与背景图片" class="headerlink" title="背景颜色与背景图片"></a>背景颜色与背景图片</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 告诉浏览器打开文件采用的编码方式，并非设置文件编码方式--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>背景颜色和背景图片<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    对背景进行设置</span><br><span class="hljs-comment">    背景颜色：bgcolor</span><br><span class="hljs-comment">    背景图片：background</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">background</span>=<span class="hljs-string">&quot;img/IMG_2160.JPG&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>图片img<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        1. 设置图片宽高时，只需指定宽，高度会自动缩放</span><br><span class="hljs-comment">        2. title 设置鼠标悬停时显示的信息</span><br><span class="hljs-comment">        3. alt 设置图片加载失败时显示的提示信息</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/dona.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;dona&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/dona.j&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;not found&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>通过超链接可以从浏览器向服务器发送请求（request）</p><p>服务器向浏览器发送数据称为响应（response）</p><p>B&#x2F;S 结构的系统，每一个请求都会对应一个响应</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>图片img<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        1. 设置图片宽高时，只需指定宽，高度会自动缩放</span><br><span class="hljs-comment">        2. title 设置鼠标悬停时显示的信息</span><br><span class="hljs-comment">        3. alt 设置图片加载失败时显示的提示信息</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/dona.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500px&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;dona&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/dona.j&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;not found&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>收集用户的信息，用户填写表单，点击提交按钮提交数据到服务器</p><p>表单使用 form 标签，一个网页可以有多个表单</p><p>表单中的 action 属性填写提交地址（同 href 属性）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 请求路径，数据最终提交给 192.168.111.3 上的 8080 端口对应的软件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://192.168.111.3:8080/oa/save&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 画一个提交按钮，该按钮可以提交表单 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 画按钮可以使用 input 输入域，type=&quot;submit&quot; 时代表提交按钮，具有提交表单的能力 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;设置按钮显示文本&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        表单提交格式</span><br><span class="hljs-comment">            http://localhost:8080/test/login?loginName=222&amp;loginPwd=222</span><br><span class="hljs-comment">            格式：action?name=value&amp;name=value...</span><br><span class="hljs-comment">            表单中有 name 属性，一律提交</span><br><span class="hljs-comment">            若不想提交某字段，不要提供 name 属性</span><br><span class="hljs-comment">            当 value 未填写时，会提交空字符串</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/test/login&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 此中 value 属性等待用户填写 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginPwd&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!-- 此中 value 用以改变显示文本，不设置 name 属性避免提交 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>                    <span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-symbol">&amp;nbsp;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用户注册表单示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- method=&quot;post&quot; 可以让表单在浏览器地址栏隐藏（get 会显示） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/test/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        用户名<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginName&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        密码<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;loginPwd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        确认密码<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 无用户输入的 input 需要手动选择 value --&gt;</span><br>        性别<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>男<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>女<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        爱好<br>        <span class="hljs-comment">&lt;!-- 加上 checked 则默认选中 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;habit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sing&quot;</span> <span class="hljs-attr">checked</span>&gt;</span>唱歌<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;habit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dancing&quot;</span>&gt;</span>跳舞<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;habit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sport&quot;</span>&gt;</span>运动<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        学历<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;grade&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 默认选中为 selected --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>--请选择--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;gz&quot;</span>&gt;</span>高中<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dz&quot;</span>&gt;</span>大专<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bk&quot;</span>&gt;</span>本科<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ss&quot;</span>&gt;</span>硕士<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        简介<br>        <span class="hljs-comment">&lt;!-- 文本域 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;introduce&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- http://localhost:8080/test/login?loginName=vv&amp;loginPwd=11&amp;sex=0&amp;habit=sing&amp;grade=dz&amp;introduce=vv --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        超链接也可以提交数据给服务器，但是提交的数据固定不变</span><br><span class="hljs-comment">        只能是 get 请求</span><br><span class="hljs-comment">     --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080/test/login?loginName=vv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下拉列表支持多选：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>下拉列表支持多选<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">        使用 multiple 属性支持多选（按住 Ctrl）</span><br><span class="hljs-comment">        size 固定显示条数</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;武汉市&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>武昌区<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>汉口区<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>汉阳区<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="file-控件"><a href="#file-控件" class="headerlink" title="file 控件"></a>file 控件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 文件上传专用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="隐藏域"><a href="#隐藏域" class="headerlink" title="隐藏域"></a>隐藏域</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 隐藏域：网页上不显示，但表单提交会自动传给服务器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userid&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="readonly-amp-disabled"><a href="#readonly-amp-disabled" class="headerlink" title="readonly &amp; disabled"></a>readonly &amp; disabled</h3><p>都是数据只读不能修改，但是 readonly 可以提交给服务器，disabled 数据不会提交（即使有 name 属性）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>readonly disabled<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/test&quot;</span>&gt;</span><br>        用户id<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userid&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;101&quot;</span> <span class="hljs-attr">readonly</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <br>        用户名<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;vv&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交数据&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="input-控件的-maxlength"><a href="#input-控件的-maxlength" class="headerlink" title="input 控件的 maxlength"></a>input 控件的 maxlength</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 最多输入的字符数量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="元素-id-属性"><a href="#元素-id-属性" class="headerlink" title="元素 id 属性"></a>元素 id 属性</h2><p>id 属性的存在，更方便获取元素</p><blockquote><p>DOM（Document）树</p><p>HTML 类似一颗树，每一个节点都有唯一的 id</p><p>JavaScript 语言可以对 HTML 中的任意节点进行增删改操作，则使用 id 获取对象</p></blockquote><p>HTML 文档中，任何元素（节点）都有 id 属性，id 属性是该节点的唯一标识</p><blockquote><p>id 就是节点身份证号</p></blockquote><p>表单提交数据时与 id 属性无关</p><h2 id="div-amp-span"><a href="#div-amp-span" class="headerlink" title="div &amp; span"></a>div &amp; span</h2><p>都可以称为“图层”，作用于页面的灵活布局</p><blockquote><p>最早网页采用 table 布局，不够灵活</p><p>现代网页开发中 div 布局使用最多</p></blockquote><p>图层类比盒子，div 嵌套 div 就是盒子嵌套盒子</p><p>div 和 span 可以定位，只要确定左上角坐标即可</p><p>div 默认独占一行，span 不会独自占一行</p><h2 id="base"><a href="#base" class="headerlink" title="base"></a>base</h2><p>设置整个网页的基础路径，自动填充到没有以斜杠开始的路径，通常配置在 head 标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;uft-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Dept<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080/oa/&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;dept/list&quot;</span>&gt;</span>list<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- http://localhost:8080/oa/dept/list --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>不能应用于 Java 的 taglib 标签</li></ul><p>结合 EL 动态获取 base：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;$&#123;pageContext.request.scheme&#125;://$&#123;pageContext.request.serverName&#125;:$&#123;pageContext.request.serverPort&#125;$&#123;pageContext.request.contextPath&#125;/&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front End</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC - Note</title>
    <link href="/2022/07/18/JDBC%20-%20Note/"/>
    <url>/2022/07/18/JDBC%20-%20Note/</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>Java DataBase Connectivity（Java 语言连接数据库）</p><p>本质是 SUN 公司制定的一套接口</p><p><code>java.sql.*</code></p><p><img src="/images/image-jdbc/note-01-JDBC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.PNG" alt="JDBC底层原理"></p><h2 id="Before-Start"><a href="#Before-Start" class="headerlink" title="Before Start"></a>Before Start</h2><p>从官网下载对应的驱动 jar 包，然后配置到环境变量 classpath 中</p><p>将 jar 包存在自定的 tool 文件，其中 <code>;.</code> 代表当前目录所有文件</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">.;<span class="hljs-name">C</span>:\vv\code\Java\Tool\mysql-connector-java<span class="hljs-number">-5.1</span><span class="hljs-number">.23</span>.jar<br></code></pre></td></tr></table></figure><ul><li>以上配置是针对文本编辑器开发，使用 IDEA 不需要配置以上环境变量（直接导入 jar 包即可）</li></ul><h2 id="Six-Step"><a href="#Six-Step" class="headerlink" title="Six Step"></a>Six Step</h2><ol><li>注册驱动（告诉 Java 程序，即将连接的是哪一种数据库）</li><li>获取连接（打开 JVM 进程与数据库<strong>进程</strong>之间的通道）</li><li>获取数据库操作对象（专门执行 SQL 语句的对象）</li><li>执行 SQL 语句（DQL DML 等）</li><li>处理查询结果集（只有第四步执行的是 DQL 时才有查询结果）</li><li>释放资源（使用完需关闭进程）</li></ol><p>通过 Java 执行 insert 语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1. 注册驱动</span><br>            <span class="hljs-comment">// 多态，父类引用指向子类型对象</span><br>            <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.mysql.jdbc.Driver();<br>            <span class="hljs-comment">// Oracle 创建对象</span><br>            <span class="hljs-comment">// new oracle.jdbc.driver.OracleDriver();</span><br>            DriverManager.registerDriver(driver);<br><br>            <span class="hljs-comment">// 2. 获取连接</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                url：统一资源定位符（网络中某个资源的绝对路径）</span><br><span class="hljs-comment">                例如：https://wataaaame.github.io</span><br><span class="hljs-comment">                https://185.199.109.153:80/index.html</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                url 包含：</span><br><span class="hljs-comment">                    通信协议：https（通信前提前定好的数据传输格式）</span><br><span class="hljs-comment">                    服务器IP：185.199.109.153</span><br><span class="hljs-comment">                    服务器软件：PORT：80</span><br><span class="hljs-comment">                    资源名：index.html</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-comment">// 127.0.0.1 和 localhost 都是指本机 IP</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/learning&quot;</span>;<br>            <span class="hljs-comment">// Oracle url：</span><br>            <span class="hljs-comment">// jdbc:oracle:thin:@localhost:1521:orcl</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">psw</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0.0&quot;</span>;<br>            conn = DriverManager.getConnection(url, user, psw);<br><span class="hljs-comment">//            System.out.println(conn);</span><br><br>            <span class="hljs-comment">// 3. 获取数据库操作对象</span><br>            <span class="hljs-comment">// Statement 用于执行 sql 语句</span><br>            stmt = conn.createStatement();<br><br>            <span class="hljs-comment">// 4. 执行 sql</span><br>            <span class="hljs-comment">// JDBC 中的 SQL 语句不需要写分号</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into emp1(empno, ename) values(101, &#x27;vv&#x27;)&quot;</span>;<br>            <span class="hljs-comment">// executeUpdate() 专门执行 DML 语句（insert, delete, update）</span><br>            <span class="hljs-comment">// 返回值 int 是“影响数据库中的记录条数”</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql);<br>            System.out.println(count == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;success&quot;</span> : <span class="hljs-string">&quot;false&quot;</span>);<br><br>            <span class="hljs-comment">// 5. 处理查询结果集</span><br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 6. 释放资源</span><br>            <span class="hljs-comment">// 由内而外依次关闭，且分别对其 try...catch...</span><br>            <span class="hljs-keyword">if</span> (stmt != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    stmt.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注册驱动的另一种方式（常用）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1. 注册驱动</span><br>            <span class="hljs-comment">// 旧版写法</span><br><span class="hljs-comment">//            DriverManager.registerDriver(new com.mysql.jdbc.Driver());</span><br>            <span class="hljs-comment">// 新版写法</span><br>            <span class="hljs-comment">// Class.forName() 执行能够使 com.mysql.jdbc.Driver 中的无参构造方法自动加载</span><br>            <span class="hljs-comment">// 以下方法不需要接受返回值，只需要利用其类加载动作</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br><br>            <span class="hljs-comment">// 2. 获取连接</span><br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/learning&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;0.0&quot;</span>);<br>            System.out.println(conn);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将连接数据库的所有信息配置到配置文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 使用资源绑定器绑定属性配置文件</span><br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>        <span class="hljs-comment">// 获取配置文件中的 String</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1. 注册驱动</span><br>            Class.forName(driver);<br><br>            <span class="hljs-comment">// 2. 连接数据库</span><br>            conn = DriverManager.getConnection(url, user, password);<br><br>            <span class="hljs-comment">// 3. 获取数据库操作对象</span><br>            stmt = conn.createStatement();<br><br>            <span class="hljs-comment">// 4. 执行 SQL 语句</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into emp1(empno, ename) values(101, &#x27;vv&#x27;)&quot;</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql);<br>            System.out.println(count == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;completed&quot;</span> : <span class="hljs-string">&quot;fail&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (stmt != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    stmt.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>处理查询结果集：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 1. 注册驱动</span><br>            Class.forName(driver);<br><br>            <span class="hljs-comment">// 2. 获取连接</span><br>            conn = DriverManager.getConnection(url, user, password);<br><br>            <span class="hljs-comment">// 3. 获取数据库操作对象</span><br>            stmt = conn.createStatement();<br><br>            <span class="hljs-comment">// 4. 执行 SQL 语句</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select empno, ename, sal from emp&quot;</span>;<br>            <span class="hljs-comment">// 通过 executeQuery()，专门执行 DQL 语句，返回 ResultSet</span><br>            rs = stmt.executeQuery(sql);<br><br>            <span class="hljs-comment">// 5. 处理查询结果集</span><br>            <span class="hljs-comment">// rs.next() 光标后移一位，若为真，则光标指向行有数据</span><br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                <span class="hljs-comment">// 取数据</span><br>                <span class="hljs-comment">// getString()：不管原类型，都以 String 类型取出</span><br>                <span class="hljs-comment">// 若使用 getInt() 等特定类型，可直接进行数据运算（需底层类型相同）</span><br>                <span class="hljs-comment">// JDBC 中，所有的下标都从 1 开始，代表第一列</span><br><span class="hljs-comment">//                System.out.println(rs.getString(1) + &quot;, &quot; +</span><br><span class="hljs-comment">//                        rs.getString(2) + &quot;, &quot; +</span><br><span class="hljs-comment">//                        rs.getString(3));</span><br>                <span class="hljs-comment">// 建议用列名获取，更加健壮（若查询使用别名，则需要同步使用）</span><br>                System.out.println(rs.getString(<span class="hljs-string">&quot;empno&quot;</span>) + <span class="hljs-string">&quot;, &quot;</span> +<br>                        rs.getString(<span class="hljs-string">&quot;ename&quot;</span>) + <span class="hljs-string">&quot;, &quot;</span> +<br>                        rs.getString(<span class="hljs-string">&quot;sal&quot;</span>));<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 6. 释放资源</span><br>            <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    rs.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (stmt != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    stmt.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-jdbc/note-02-%E9%81%8D%E5%8E%86%E7%BB%93%E6%9E%9C%E9%9B%86%E5%8E%9F%E7%90%86.PNG" alt="遍历结果集原理"></p><h2 id="Use-IDEA"><a href="#Use-IDEA" class="headerlink" title="Use IDEA"></a>Use IDEA</h2><p><code>Module 右键 -&gt; Open Module Settings -&gt; Project Setting -&gt; Libraries -&gt; + -&gt; Java -&gt; [path]/mysql-connector-java-5.1.23.jar -&gt; choose Module</code></p><h2 id="Power-Designer"><a href="#Power-Designer" class="headerlink" title="Power Designer"></a>Power Designer</h2><p>使用 PD 工具来进行数据库表的设计</p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>模拟用户登录功能的实现</p><p>业务描述：</p><p>程序运行的时候，提供一个输入的入口，可以让用户输入用户名和密码</p><p>用户输入用户名和密码之后，提交信息，Java 程序收集到用户信息</p><p>Java 程序连接数据库验证用户名和密码是否合法</p><p>合法：显示登录成功</p><p>不合法：显示登录失败</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 初始化一个界面</span><br>        Map&lt;String, String&gt; userLoginInfo = initUI();<br><br>        <span class="hljs-comment">// 验证用户名和密码</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLogin</span> <span class="hljs-operator">=</span> login(userLoginInfo);<br>        System.out.println(isLogin == <span class="hljs-literal">true</span> ? <span class="hljs-string">&quot;success&quot;</span> : <span class="hljs-string">&quot;fail&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户登录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userLoginInfo 用户登录信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 表示登录成功，false 表示登录失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(Map&lt;String, String&gt; userLoginInfo)</span> &#123;<br>        <span class="hljs-comment">// JDBC 代码</span><br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> userLoginInfo.get(<span class="hljs-string">&quot;loginName&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginPwd</span> <span class="hljs-operator">=</span> userLoginInfo.get(<span class="hljs-string">&quot;loginPwd&quot;</span>);<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLogin</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(driver);<br>            conn = DriverManager.getConnection(url, user, password);<br><br>            stmt = conn.createStatement();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_user where loginName = &#x27;&quot;</span> + loginName + <span class="hljs-string">&quot;&#x27; and loginPwd = &#x27;&quot;</span> + loginPwd + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>            rs = stmt.executeQuery(sql);<br>            <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>                <span class="hljs-comment">// 登录成功</span><br>                isLogin = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    rs.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (stmt != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    stmt.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> isLogin;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化用户界面</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用户输入的用户名和密码等等录信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title function_">initUI</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.print(<span class="hljs-string">&quot;username: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> s.nextLine();<br><br>        System.out.print(<span class="hljs-string">&quot;password: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginPwd</span> <span class="hljs-operator">=</span> s.nextLine();<br><br>        Map&lt;String, String&gt; userLoginInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginName&quot;</span>, loginName);<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginPwd&quot;</span>, loginPwd);<br><br>        <span class="hljs-keyword">return</span> userLoginInfo;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    username: vv</span><br><span class="hljs-comment">    password: 123</span><br><span class="hljs-comment">    success</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    username: vv</span><br><span class="hljs-comment">    password: 22</span><br><span class="hljs-comment">    fail</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><p>当前程序存在的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    username: vv</span><br><span class="hljs-comment">    password: vv&#x27; or &#x27;1&#x27;=&#x27;1</span><br><span class="hljs-comment">    success</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>这种现象被称为 “SQL 注入”（黑客经常使用）</p><ul><li>用户输入的信息中含有 sql 语句的关键字，并且这些关键字参与 sql 语句的编译过程，导致 sql 语句的原意被扭曲</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_user where loginName = &#x27;&quot;</span> + loginName + <span class="hljs-string">&quot;&#x27; and loginPwd = &#x27;&quot;</span> + loginPwd + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-comment">// 以上代码正好完成了 sql 语句的拼接：</span><br><span class="hljs-comment">// where loginName = &#x27;vv&#x27; and loginPwd = &#x27;vv&#x27; or &#x27;1&#x27; = &#x27;1&#x27;</span><br><span class="hljs-comment">// 正好将用户提供的非法信息编译进去（1 = 1 恒成立）</span><br>rs = stmt.executeQuery(sql);<br></code></pre></td></tr></table></figure><h3 id="解决-SQL-注入问题"><a href="#解决-SQL-注入问题" class="headerlink" title="解决 SQL 注入问题"></a>解决 SQL 注入问题</h3><p>用户提供的信息不参与 SQL 语句的编译过程</p><p><code>java.sql.PreparedStatement</code></p><ul><li>该接口继承 <code>java.sql.Statement</code></li><li>该对象属于预编译的数据库操作对象</li><li>原理是：预先对 SQL 语句的框架进行编译，然后再给 SQL 语句传值</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 解决 SQL 注入问题</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String, String&gt; userLoginInfo = initUI();<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLogin</span> <span class="hljs-operator">=</span> login(userLoginInfo);<br>        System.out.println(isLogin == <span class="hljs-literal">true</span> ? <span class="hljs-string">&quot;success&quot;</span> : <span class="hljs-string">&quot;fail&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">(Map&lt;String, String&gt; userLoginInfo)</span> &#123;<br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 这里使用 PreparedStatement 预编译的数据库操作对象</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> userLoginInfo.get(<span class="hljs-string">&quot;loginName&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginPwd</span> <span class="hljs-operator">=</span> userLoginInfo.get(<span class="hljs-string">&quot;loginPwd&quot;</span>);<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLogin</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(driver);<br>            conn = DriverManager.getConnection(url, user, password);<br><br>            <span class="hljs-comment">// 3. 获取预编译的数据库操作对象</span><br>            <span class="hljs-comment">// 获取预编译的数据库操作对象</span><br>            <span class="hljs-comment">// sql 语句（框架）提前，且值变为 ？ 占位符（不可加单引号）</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_user where loginName = ? and loginPwd = ?&quot;</span>;<br>            ps = conn.prepareStatement(sql);<br>            <span class="hljs-comment">// 给占位符 ？ 传值（JDBC 下标从 1 开始，第一个 ？ 为 1）</span><br>            ps.setString(<span class="hljs-number">1</span>, loginName);<br>            ps.setString(<span class="hljs-number">2</span>, loginPwd);<br><br>            <span class="hljs-comment">// 4. 执行 SQL</span><br>            <span class="hljs-comment">// 执行不必传 sql 语句，直接调用对象的 executeQuery 方法</span><br>            rs = ps.executeQuery();<br>            <span class="hljs-keyword">if</span> (rs.next()) &#123;<br>                isLogin = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    rs.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ps.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> isLogin;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, String&gt; <span class="hljs-title function_">initUI</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.print(<span class="hljs-string">&quot;username: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> s.nextLine();<br><br>        System.out.print(<span class="hljs-string">&quot;password: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginPwd</span> <span class="hljs-operator">=</span> s.nextLine();<br><br>        Map&lt;String, String&gt; userLoginInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginName&quot;</span>, loginName);<br>        userLoginInfo.put(<span class="hljs-string">&quot;loginPwd&quot;</span>, loginPwd);<br><br>        <span class="hljs-keyword">return</span> userLoginInfo;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    username: vv</span><br><span class="hljs-comment">    password: vv&#x27; or &#x27;1&#x27; = &#x27;1</span><br><span class="hljs-comment">    fail</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="Statement-与-PreparedStatement-对比"><a href="#Statement-与-PreparedStatement-对比" class="headerlink" title="Statement 与 PreparedStatement 对比"></a>Statement 与 PreparedStatement 对比</h3><table><thead><tr><th></th><th>Statement</th><th>PreparedStatement</th></tr></thead><tbody><tr><td>SQL 注入问题</td><td>存在</td><td>不存在</td></tr><tr><td>编译运行</td><td>编译一次运行一次</td><td>编译一次运行多次（预先编译）</td></tr><tr><td>类型安全检查</td><td>无</td><td>编译阶段占位符传入类型做安全检查</td></tr><tr><td>使用</td><td>较少</td><td>较多</td></tr></tbody></table><ul><li>业务要求使用 SQL 语句拼接时使用 Statement（如升序降序中的 desc 无法使用单引号）</li><li>问号占位符不能带双引号</li></ul><blockquote><p>SQL 相同语句不会重复编译</p></blockquote><p>实例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ResourceBundle;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;jdbc&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;order by desc/asc&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;Plz enter: &quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> s.nextLine();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(driver);<br>            conn = DriverManager.getConnection(url, user, password);<br><br>            stmt = conn.createStatement();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_user order by id &quot;</span> + order;<br>            rs = stmt.executeQuery(sql);<br>            <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                System.out.println(rs.getString(<span class="hljs-string">&quot;id&quot;</span>) + <span class="hljs-string">&quot;\t&quot;</span> +<br>                        rs.getString(<span class="hljs-string">&quot;loginName&quot;</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    rs.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (stmt != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    stmt.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    order by desc/asc</span><br><span class="hljs-comment">    Plz enter: desc</span><br><span class="hljs-comment">    2ee</span><br><span class="hljs-comment">    1vv</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="PreparedStatement-实现增删改"><a href="#PreparedStatement-实现增删改" class="headerlink" title="PreparedStatement 实现增删改"></a>PreparedStatement 实现增删改</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost/learning&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;0.0&quot;</span>);<br><br>            <span class="hljs-comment">// 插入</span><br>            <span class="hljs-comment">/*String sql = &quot;insert into t_user(loginName, loginPwd, realName) values(?, ?, ?)&quot;;</span><br><span class="hljs-comment">            ps = conn.prepareStatement(sql);</span><br><span class="hljs-comment">            ps.setString(1, &quot;xx&quot;);</span><br><span class="hljs-comment">            ps.setString(2, &quot;111&quot;);</span><br><span class="hljs-comment">            ps.setString(3, &quot;Mr.X&quot;);</span><br><span class="hljs-comment">            int count = ps.executeUpdate();*/</span><br><br>            <span class="hljs-comment">// 修改</span><br>            <span class="hljs-comment">/*String sql = &quot;update t_user set loginName = ?, loginPwd = ?, realName = ? where id = 4&quot;;</span><br><span class="hljs-comment">            ps = conn.prepareStatement(sql);</span><br><span class="hljs-comment">            ps.setString(1, &quot;yy&quot;);</span><br><span class="hljs-comment">            ps.setString(2, &quot;111&quot;);</span><br><span class="hljs-comment">            ps.setString(3, &quot;Mr.Y&quot;);</span><br><span class="hljs-comment">            int count = ps.executeUpdate();*/</span><br><br>            <span class="hljs-comment">// 删除</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from t_user where id &gt; ?&quot;</span>;<br>            ps = conn.prepareStatement(sql);<br>            ps.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> ps.executeUpdate();<br><br>            System.out.println(<span class="hljs-string">&quot;Query OK, &quot;</span> + count + <span class="hljs-string">&quot; row affected&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ps.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>JDBC 中的事物自动提交，只要执行任意一条 DML 语句，则自动提交一次</p><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest10</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/learning&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;0.0&quot;</span>);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_user set loginName = ? where id = ?&quot;</span>;<br>            ps = conn.prepareStatement(sql);<br>            <span class="hljs-comment">// 第一次给占位符传值</span><br>            ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;aa&quot;</span>);<br>            ps.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-comment">// 执行第一条 update 语句</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> ps.executeUpdate();<br>            System.out.println(count);<br><br>            <span class="hljs-comment">// 重新给占位符传值</span><br>            ps = conn.prepareStatement(sql);<br>            ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;aa&quot;</span>);<br>            ps.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-comment">// 执行第二条 update 语句</span><br>            count = ps.executeUpdate();<br>            System.out.println(count);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ps.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用以下三行代码解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>conn.commit();<br>conn.rollback();<br></code></pre></td></tr></table></figure><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 模拟银行转账事务</span><br><span class="hljs-comment"> * sql脚本：</span><br><span class="hljs-comment"> *      drop table if exists t_act;</span><br><span class="hljs-comment"> *      create table t_act (</span><br><span class="hljs-comment"> *          actno int,</span><br><span class="hljs-comment"> *          balance double(7, 2)    // 7代表有效数字，2代表小数个数</span><br><span class="hljs-comment"> *      );</span><br><span class="hljs-comment"> *      insert into t_act values(101, 20000);</span><br><span class="hljs-comment"> *      insert into t_act values(102, 0);</span><br><span class="hljs-comment"> *      commit;</span><br><span class="hljs-comment"> *      select * from t_act;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCTest11</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/learning&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;0.0&quot;</span>);<br>            <span class="hljs-comment">// 1. 将自动提交机制修改为手动提交</span><br>            conn.setAutoCommit(<span class="hljs-literal">false</span>);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update t_act set balance = ? where actno = ?&quot;</span>;<br>            ps = conn.prepareStatement(sql);<br><br>            <span class="hljs-comment">// 101 向 102 转账 10000，101 扣款 10000</span><br>            ps.setDouble(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>);<br>            ps.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">101</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> ps.executeUpdate();<br><br>            <span class="hljs-comment">// 手动执行一个空指针异常，后面代码不会执行</span><br>            <span class="hljs-comment">// 此时101 balance 10000，102 balance 0 出错</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            s.toString();<br><br>            <span class="hljs-comment">// 102 收入 10000</span><br>            ps.setDouble(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>);<br>            ps.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">102</span>);<br>            count += ps.executeUpdate();<br><br>            <span class="hljs-comment">// 2. 手动提交</span><br>            conn.commit();<br>            System.out.println(count == <span class="hljs-number">2</span> ? <span class="hljs-string">&quot;success&quot;</span> : <span class="hljs-string">&quot;fail&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-comment">// 3. 回滚事务</span><br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.rollback();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException ex) &#123;<br>                    ex.printStackTrace();<br>                &#125;<br>            &#125;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (ps != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    ps.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="工具类的封装"><a href="#工具类的封装" class="headerlink" title="工具类的封装"></a>工具类的封装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.jdbc.utils;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDBC 工具类，简化 JDBC 编程</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 工具类中的构造方法都是私有的</span><br><span class="hljs-comment">     * 因为工具类中的方法都是静态的，不需要 new 对象，直接采用类名调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">JDBCUtils</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 静态代码块中执行一次驱动注册</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接数据库的方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 数据库连接对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException 由于方法的调用是在 try...catch 中，所以直接抛出异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost/learning&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;0,0&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn 连接对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stmt 数据库操作对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs 查询结果集</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Connection conn, Statement stmt, ResultSet rs)</span> &#123;<br>        <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (stmt != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><p>查询语句后加上 <code>for update</code> 可以保证当前事务还未结束时，行不能被其他事务修改（悲观锁，不支持并发）</p><blockquote><p>乐观锁是多线程并发，事务都可以进行修改，自动添加修改后的版本号</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JDBC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL - Note04 Database</title>
    <link href="/2022/07/14/MySQL%20-%20Note04%20Database/"/>
    <url>/2022/07/14/MySQL%20-%20Note04%20Database/</url>
    
    <content type="html"><![CDATA[<h1 id="DBA-命令"><a href="#DBA-命令" class="headerlink" title="DBA 命令"></a>DBA 命令</h1><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><ol><li><p>导出整个库</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">mysqldump [database]&gt;[<span class="hljs-built_in">path</span>.sql] -u[name] -p[psw]<br></code></pre></td></tr></table></figure></li><li><p>导出库中表</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">mysqldump [database] [table]&gt;[<span class="hljs-built_in">path</span>.sql] -u[name] -p[psw]<br></code></pre></td></tr></table></figure></li></ol><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database [name];<br>use [name];<br>source [path.sql]<br></code></pre></td></tr></table></figure><h1 id="数据库设计三范式"><a href="#数据库设计三范式" class="headerlink" title="*数据库设计三范式"></a>*数据库设计三范式</h1><p>设计表的依据，按照这个三范式设计的表不会出现数据冗余</p><h2 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h2><p>任何一个表都应该有主键，并且每个字段原子性不可再分</p><h2 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h2><p>建立在第一范式的基础之上，所有非主键字段完全依赖主键，不能产生部分依赖</p><ul><li><p>多对多，三张表，关系表两个外键</p><p>t_student 学生表：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">sno(pk)sname</span><br><span class="hljs-section">-----------------</span><br>1vv<br>2ee<br></code></pre></td></tr></table></figure><p>t_teacher 讲师表：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">tno(pk)tname</span><br><span class="hljs-section">-----------------</span><br>1t1<br>2t2<br>3t3<br></code></pre></td></tr></table></figure><p>t_student_teacher_relation 学生讲师关系表：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">id(pk)sno(fk)tno(fk)</span><br><span class="hljs-section">-------------------------------</span><br>111<br>213<br>322<br>421<br></code></pre></td></tr></table></figure></li></ul><h2 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h2><p>建立在第二范式基础上，所有非主键字段直接依赖主键，不能产生传递依赖</p><ul><li><p>一对多，两张表，多的表加外键（蝴蝶）</p><p>班级 t_class</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">cno(pk)cname</span><br><span class="hljs-section">-----------------</span><br>1a<br>2b<br></code></pre></td></tr></table></figure><p>学生 t_student</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">sno(pk)snameclassno(fk)</span><br><span class="hljs-section">-----------------------------------</span><br>101vv1<br>102ee2<br></code></pre></td></tr></table></figure></li></ul><p>提示：在实际开发中，以满足客户需求为主，可能会用冗余换执行速度</p><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><ol><li><p>主键共享</p><p>t_user_login 用户登录表</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">id(pk)usernamepassword</span><br><span class="hljs-section">--------------------------------</span><br>1vv123<br>2ee456<br></code></pre></td></tr></table></figure><p>t_user_detail 用户详情信息表</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">id(pk+fk)realnametel...</span><br><span class="hljs-section">---------------------------------------</span><br>1vay321...<br>2yiyi543...<br></code></pre></td></tr></table></figure></li><li><p>外键唯一</p><p>t_user_login 用户登录表</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">id(pk)usernamepassword</span><br><span class="hljs-section">------------------------------------</span><br>1vv123<br>2ee456<br></code></pre></td></tr></table></figure><p>t_user_detail 用户详情信息表</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">id(pk)realnameteluserid(fk+unique)</span><br><span class="hljs-section">-----------------------------------------------------</span><br>1vay3211<br>2yiyi5432<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DBA</tag>
      
      <tag>Paradigm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL - 34 Exercises</title>
    <link href="/2022/07/13/MySQL%20-%2034%20Exercises/"/>
    <url>/2022/07/13/MySQL%20-%2034%20Exercises/</url>
    
    <content type="html"><![CDATA[<h1 id="34道练习题"><a href="#34道练习题" class="headerlink" title="34道练习题"></a>34道练习题</h1><ol><li><p>取得每个部门最高薪水的人员名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 取得每个部门最高薪水<br>select deptno, max(sal) as maxsal<br>from emp<br>group by deptno;<br>/*<br>    +--------+---------+<br>    | deptno | maxsal  |<br>    +--------+---------+<br>    |     10 | 5000.00 |<br>    |     20 | 3000.00 |<br>    |     30 | 2850.00 |<br>    +--------+---------+<br>*/<br><br># 将以上结果作为临时表 t，t 表与 emp e 表进行连接<br>select e.ename, t.*<br>from (select deptno, max(sal) as maxsal<br>     from emp<br>     group by deptno) t<br>join emp e<br>on t.deptno = e.deptno AND t.maxsal = e.sal;<br>/*<br>    +-------+--------+---------+<br>    | ename | deptno | maxsal  |<br>    +-------+--------+---------+<br>    | BLAKE |     30 | 2850.00 |<br>    | SCOTT |     20 | 3000.00 |<br>    | KING  |     10 | 5000.00 |<br>    | FORD  |     20 | 3000.00 |<br>    +-------+--------+---------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>哪些人的薪水在部门的平均薪水之上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 部门平均薪水<br>select deptno, avg(sal) avgsal<br>from emp<br>group by deptno;<br>/*<br>    +--------+-------------+<br>    | deptno | avgsal      |<br>    +--------+-------------+<br>    |     10 | 2916.666667 |<br>    |     20 | 2175.000000 |<br>    |     30 | 1566.666667 |<br>    +--------+-------------+<br>*/<br><br># 高于平均薪水名单<br>select e.ename, e.sal, t.*<br>from emp e<br>join (select deptno, avg(sal) avgsal<br>from emp<br>group by deptno) t<br>on e.deptno = t.deptno AND e.sal &gt; avgsal;<br>/*<br>    +-------+---------+--------+-------------+<br>    | ename | sal     | deptno | avgsal      |<br>    +-------+---------+--------+-------------+<br>    | ALLEN | 1600.00 |     30 | 1566.666667 |<br>    | JONES | 2975.00 |     20 | 2175.000000 |<br>    | BLAKE | 2850.00 |     30 | 1566.666667 |<br>    | SCOTT | 3000.00 |     20 | 2175.000000 |<br>    | KING  | 5000.00 |     10 | 2916.666667 |<br>    | FORD  | 3000.00 |     20 | 2175.000000 |<br>    +-------+---------+--------+-------------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>取得部门中（所有人的）平均薪水等级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 获取薪水等级表<br>select e.ename, e.sal, s.grade<br>from emp e<br>join salgrade s<br>on e.sal between s.losal and s.hisal;<br>/*<br>    +--------+---------+-------+<br>    | ename  | sal     | grade |<br>    +--------+---------+-------+<br>    | SMITH  |  800.00 |     1 |<br>    | ALLEN  | 1600.00 |     3 |<br>    | WARD   | 1250.00 |     2 |<br>    | JONES  | 2975.00 |     4 |<br>    | MARTIN | 1250.00 |     2 |<br>    | BLAKE  | 2850.00 |     4 |<br>    | CLARK  | 2450.00 |     4 |<br>    | SCOTT  | 3000.00 |     4 |<br>    | KING   | 5000.00 |     5 |<br>    | TURNER | 1500.00 |     3 |<br>    | ADAMS  | 1100.00 |     1 |<br>    | JAMES  |  950.00 |     1 |<br>    | FORD   | 3000.00 |     4 |<br>    | MILLER | 1300.00 |     2 |<br>    +--------+---------+-------+<br>*/<br><br># 求平均薪水等级（按部门分组）<br>select e.deptno, avg(s.grade)<br>from emp e<br>join salgrade s<br>on e.sal between s.losal and s.hisal<br>group by e.deptno;<br>/*<br>    +--------+--------------+<br>    | deptno | avg(s.grade) |<br>    +--------+--------------+<br>    |     10 |       3.6667 |<br>    |     20 |       2.8000 |<br>    |     30 |       2.5000 |<br>    +--------+--------------+<br>*/<br></code></pre></td></tr></table></figure><ul><li>重复连接的表不考虑嵌套</li></ul></li><li><p><strong>不准用组函数（Max），取得最高薪水</strong>（给出两种方案）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1. 降序，limit 1<br>select sal from emp order by sal desc limit 1;<br><br># 2. 自连接<br>select sal<br>from emp<br>where sal not in (<br>select distinct a.sal<br>    from emp a<br>    join emp b<br>    on a.sal &lt; b.sal<br>);<br><br>/*<br>    +---------+<br>    | sal     |<br>    +---------+<br>    | 5000.00 |<br>    +---------+<br>*/<br></code></pre></td></tr></table></figure><ul><li><p>a.sal &lt; b.sal，则列出除最大值以外的所有工资表 t（笛卡尔积需去重）</p><p>再与 emp 连接，不在 t 中的只剩最大值</p></li></ul></li><li><p>取得平均薪水最高的部门的部门编号（至少给出两种方案）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 每个部门平均薪水<br>select deptno, avg(sal) avgsal<br>from emp<br>group by deptno;<br>/*<br>    +--------+-------------+<br>    | deptno | avgsal      |<br>    +--------+-------------+<br>    |     10 | 2916.666667 |<br>    |     20 | 2175.000000 |<br>    |     30 | 1566.666667 |<br>    +--------+-------------+<br>*/<br><br># 1 最高部门<br>select deptno<br>from emp<br>group by deptno<br>order by avg(sal) desc limit 1;<br><br># 2 max<br>select deptno<br>from emp<br>group by deptno<br>having avg(sal) = (<br>select max(avgsal)<br>from (<br>select deptno, avg(sal) avgsal<br>    from emp<br>    group by deptno<br>) t<br>);<br><br>;<br><br># 3 自连接<br>select distinct deptno<br>from (<br>    select deptno, avg(sal) avgsal<br>    from emp<br>    group by deptno<br>) t<br>where avgsal not in (<br>select a.avgsal<br>    from (<br>    select avg(sal) avgsal<br>    from emp<br>    group by deptno<br>    ) a<br>    join (<br>    select avg(sal) avgsal<br>    from emp<br>    group by deptno<br>    ) b<br>    on a.avgsal &lt; b.avgsal<br>);<br><br>/*<br>    +--------+<br>    | deptno |<br>    +--------+<br>    |     10 |<br>    +--------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>取得平均薪水最高的部门的部门名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 同第 5 题<br># 借用 5-1<br>select d.dname<br>from emp e<br>join dept d<br>on e.deptno = d.deptno<br>group by e.deptno<br>order by avg(e.sal) desc limit 1;<br><br>/*<br>    +------------+<br>    | dname      |<br>    +------------+<br>    | ACCOUNTING |<br>    +------------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>求平均薪水的等级最低的部门的部门名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 部门平均薪水<br>select deptno, avg(sal) avg_sal<br>from emp<br>group by deptno;<br>/*<br>    +--------+-------------+<br>    | deptno | avg_sal     |<br>    +--------+-------------+<br>    |     10 | 2916.666667 |<br>    |     20 | 2175.000000 |<br>    |     30 | 1566.666667 |<br>    +--------+-------------+<br>*/<br><br># 部门平均薪水的等级<br>select s.grade, t.*<br>from salgrade s<br>join (<br>select deptno, avg(sal) avg_sal<br>    from emp<br>    group by deptno<br>) t<br>on t.avg_sal between s.losal and s.hisal;<br>/*<br>    +-------+--------+-------------+<br>    | grade | deptno | avg_sal     |<br>    +-------+--------+-------------+<br>    |     3 |     30 | 1566.666667 |<br>    |     4 |     10 | 2916.666667 |<br>    |     4 |     20 | 2175.000000 |<br>    +-------+--------+-------------+<br>*/<br><br># 部门平均薪水最低的等级<br>select s.grade<br>from salgrade s<br>join (<br>select avg(sal) avg_sal<br>    from emp<br>    group by deptno<br>) t<br>on t.avg_sal between s.losal and s.hisal<br>order by t.avg_sal limit 1;<br>/*<br>    +-------+<br>    | grade |<br>    +-------+<br>    |     3 |<br>    +-------+<br>*/<br><br># 平均薪水的等级最低的部门名称<br>select s.grade, t.dname<br>from salgrade s<br>join (<br>select d.dname, avg(e.sal) avg_sal<br>    from emp e<br>    join dept d<br>    on e.deptno = d.deptno<br>    group by d.dname<br>) t<br>on t.avg_sal between s.losal and s.hisal<br>where s.grade = (<br>    select s.grade<br>    from salgrade s<br>    join (<br>        select avg(sal) avg_sal<br>        from emp<br>        group by deptno<br>    ) t<br>    on t.avg_sal between s.losal and s.hisal<br>    order by t.avg_sal limit 1<br>);<br>/*<br>    +-------+-------+<br>    | grade | dname |<br>    +-------+-------+<br>    |     3 | SALES |<br>    +-------+-------+<br>*/<br></code></pre></td></tr></table></figure><ul><li>平均薪水最低一定是等级最低</li><li>平均薪水不是最低，也可能是等级最低</li></ul></li><li><p>取得比普通员工（员工代码不在 mgr 字段上）的最高薪资还要高的领导人姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 普通员工的最高薪资<br>select max(sal)<br>from emp<br>where empno not in (<br>select mgr<br>    from emp<br>    where mgr is not null<br>);<br>/*<br>    +----------+<br>    | max(sal) |<br>    +----------+<br>    |  1600.00 |<br>    +----------+<br>*/<br><br># answer<br>select ename<br>from emp<br>where sal &gt; (<br>select max(sal)<br>    from emp<br>    where empno not in (<br>        select mgr<br>        from emp<br>        where mgr is not null<br>    )<br>);<br></code></pre></td></tr></table></figure><ul><li>比普通员工最高工资高的一定是领导</li></ul></li><li><p>取得薪水最高的前五名员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename<br>from emp<br>order by sal desc limit 5;<br>/*<br>    +-------+<br>    | ename |<br>    +-------+<br>    | KING  |<br>    | SCOTT |<br>    | FORD  |<br>    | JONES |<br>    | BLAKE |<br>    +-------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>取得薪水最高的第六到第十名员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename<br>from emp<br>order by sal desc limit 5, 5;<br>/*<br>    +--------+<br>    | ename  |<br>    +--------+<br>    | CLARK  |<br>    | ALLEN  |<br>    | TURNER |<br>    | MILLER |<br>    | MARTIN |<br>    +--------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>取得最后入职的5名员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename, hiredate<br>from emp<br>order by hiredate desc limit 5;<br>/*<br>    +--------+------------+<br>    | ename  | hiredate   |<br>    +--------+------------+<br>    | ADAMS  | 1987-05-23 |<br>    | SCOTT  | 1987-04-19 |<br>    | MILLER | 1982-01-23 |<br>    | FORD   | 1981-12-03 |<br>    | JAMES  | 1981-12-03 |<br>    +--------+------------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>取得每个薪水等级有多少员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select s.grade, count(e.empno) num<br>from salgrade s<br>join emp e<br>on e.sal between s.losal and s.hisal<br>group by s.grade;<br>/*<br>    +-------+-----+<br>    | grade | num |<br>    +-------+-----+<br>    |     1 |   3 |<br>    |     2 |   3 |<br>    |     3 |   2 |<br>    |     4 |   5 |<br>    |     5 |   1 |<br>    +-------+-----+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>面试题</p><p>有3个表 S（学生表），C（课程表），SC（学生选课表）</p><p>S（SNO，SNAME）代表（学号，姓名）</p><p>C（CNO，CNAME，CTEACHER）代表（课号，课名，教师）</p><p>SC（SNO，CNO，SCGRADE）代表（学号，课号，成绩）</p><p>问题：</p><ol><li><p>找出没选过“黎明”老师的所有学生姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select s.sname<br>from s<br>join sc<br>on s.sno = sc.sno<br>join c<br>on sc.cno = c.cno<br>where c.cteacher not like &#x27;黎明&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>列出2门以上（含两门）不及格学生姓名及平均成绩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select s.sname, avg(ifnull(sc.scgrade, 0)) avg_grade<br>from s<br>left join sc<br>on s.sno = sc.sno<br>where sc.scgrade &lt; 60<br>group by sc.cno<br>having sc.cno &gt;= 2;<br></code></pre></td></tr></table></figure></li><li><p>既学过1号课程又学过2号课程所有学生的姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select s.sname<br>from s<br>join sc<br>on s.sno = sc.sno<br>where sc.cno = 1 or sc.cno = 2;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>列出所有员工及领导的姓名</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 外连接<br>select a.ename, b.ename mgr<br>from emp a<br>left join emp b<br>on a.mgr = b.empno;<br>/*<br>    +--------+-------+<br>    | ename  | mgr   |<br>    +--------+-------+<br>    | SMITH  | FORD  |<br>    | ALLEN  | BLAKE |<br>    | WARD   | BLAKE |<br>    | JONES  | KING  |<br>    | MARTIN | BLAKE |<br>    | BLAKE  | KING  |<br>    | CLARK  | KING  |<br>    | SCOTT  | JONES |<br>    | KING   | NULL  |<br>    | TURNER | BLAKE |<br>    | ADAMS  | SCOTT |<br>    | JAMES  | BLAKE |<br>    | FORD   | JONES |<br>    | MILLER | CLARK |<br>    +--------+-------+<br>*/<br></code></pre></td></tr></table></figure><ul><li>逐条检索 emp a 中的 a.ename，若条目中的 mgr 存在于 emp b 中的 b.ename，则说明为该条目的领导，并打印领导名称</li><li>外连接区别于内连接，不会忽略 null</li></ul></li><li><p>列出受雇日期早于其直接上级的所有员工的编号，姓名，部门名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 受雇日期早于其直接上级的所有员工<br>select t.empno, t.ename, d.dname<br>from (<br>    select a.empno, a.ename, a.deptno<br>    from emp a<br>    left join emp b<br>    on a.mgr = b.empno<br>    where a.hiredate &lt; b.hiredate<br>) t<br>join dept d<br>on t.deptno = d.deptno;<br><br># 支持连续 join<br>select a.empno, a.ename, d.dname<br>from emp a<br>join emp b<br>on a.mgr = b.empno and a.hiredate &lt; b.hiredate<br>join dept d<br>on a.deptno = d.deptno;<br>/*<br>    +-------+-------+------------+<br>    | empno | ename | dname      |<br>    +-------+-------+------------+<br>    |  7782 | CLARK | ACCOUNTING |<br>    |  7369 | SMITH | RESEARCH   |<br>    |  7566 | JONES | RESEARCH   |<br>    |  7499 | ALLEN | SALES      |<br>    |  7521 | WARD  | SALES      |<br>    |  7698 | BLAKE | SALES      |<br>    +-------+-------+------------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select d.dname, e.*<br>from emp e<br>right join dept d<br>on e.deptno = d.deptno;<br><br>/*<br>    +------------+-------+--------+-----------+------+---------+--------+<br>    | dname      | empno | ename  | job       | mgr  | sal     | deptno |<br>    +------------+-------+--------+-----------+------+---------+--------+<br>    | ACCOUNTING |  7782 | CLARK  | MANAGER   | 7839 | 2450.00 |     10 |<br>    | ACCOUNTING |  7839 | KING   | PRESIDENT | NULL | 5000.00 |     10 |<br>    | ACCOUNTING |  7934 | MILLER | CLERK     | 7782 | 1300.00 |     10 |<br>    | RESEARCH   |  7369 | SMITH  | CLERK     | 7902 |  800.00 |     20 |<br>    | RESEARCH   |  7566 | JONES  | MANAGER   | 7839 | 2975.00 |     20 |<br>    | RESEARCH   |  7788 | SCOTT  | ANALYST   | 7566 | 3000.00 |     20 |<br>    | RESEARCH   |  7876 | ADAMS  | CLERK     | 7788 | 1100.00 |     20 |<br>    | RESEARCH   |  7902 | FORD   | ANALYST   | 7566 | 3000.00 |     20 |<br>    | SALES      |  7499 | ALLEN  | SALESMAN  | 7698 | 1600.00 |     30 |<br>    | SALES      |  7521 | WARD   | SALESMAN  | 7698 | 1250.00 |     30 |<br>    | SALES      |  7654 | MARTIN | SALESMAN  | 7698 | 1250.00 |     30 |<br>    | SALES      |  7698 | BLAKE  | MANAGER   | 7839 | 2850.00 |     30 |<br>    | SALES      |  7844 | TURNER | SALESMAN  | 7698 | 1500.00 |     30 |<br>    | SALES      |  7900 | JAMES  | CLERK     | 7698 |  950.00 |     30 |<br>    | OPERATIONS |  NULL | NULL   | NULL      | NULL |    NULL |   NULL |<br>    +------------+-------+--------+-----------+------+---------+--------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出至少有5个员工的所有部门</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select d.deptno, count(e.empno) num<br>from emp e<br>join dept d<br>on e.deptno = d.deptno<br>group by deptno<br>having num &gt;= 5;<br>/*<br>    +--------+-----+<br>    | deptno | num |<br>    +--------+-----+<br>    |     20 |   5 |<br>    |     30 |   6 |<br>    +--------+-----+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出薪资比 “SMITH” 高的所有员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select *<br>from emp<br>where sal &gt; (<br>select sal<br>    from emp<br>    where ename = &#x27;smith&#x27;<br>);<br>/*<br>    +-------+--------+-----------+------+------------+---------+---------+--------+<br>    | EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>    +-------+--------+-----------+------+------------+---------+---------+--------+<br>    |  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>    |  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>    |  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>    |  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>    |  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>    |  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>    |  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>    |  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>    |  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>    |  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>    |  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>    |  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>    |  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>    +-------+--------+-----------+------+------------+---------+---------+--------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出所有 “CLERK”（办事员）的姓名及其部门名称、部门人数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 部门人数<br>select deptno, count(*)<br>from emp<br>group by deptno;<br><br># all CLERK<br>select e.ename, d.dname, t.dept_num<br>from emp e<br>join dept d<br>on e.deptno = d.deptno<br>join (<br>select deptno, count(*) dept_num<br>    from emp<br>    group by deptno<br>) t<br>on e.deptno = t.deptno<br>where e.job = &#x27;clerk&#x27;;<br>/*<br>    +--------+------------+----------+<br>    | ename  | dname      | dept_num |<br>    +--------+------------+----------+<br>    | SMITH  | RESEARCH   |        5 |<br>    | ADAMS  | RESEARCH   |        5 |<br>    | JAMES  | SALES      |        6 |<br>    | MILLER | ACCOUNTING |        3 |<br>    +--------+------------+----------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出最低薪资大于1500的各种工作及从事此工作的全部雇员人数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 最低薪资大于1500的工作<br>select job, count(*)<br>from emp<br>group by job<br>having min(sal) &gt; 1500;<br>/*<br>    +-----------+----------+<br>    | job       | count(*) |<br>    +-----------+----------+<br>    | ANALYST   |        2 |<br>    | MANAGER   |        3 |<br>    | PRESIDENT |        1 |<br>    +-----------+----------+<br>*/<br></code></pre></td></tr></table></figure><ul><li>分组函数需要用 having 筛选</li><li>分号的组可以直接 count 组中人数</li><li>要求岗位的最低薪金，故不能使用 where 先过滤</li></ul></li><li><p>列出在部门 “SALES”（销售部）工作的员工姓名，假定不知道销售部的部门编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 两边连结筛选<br>select e.ename<br>from emp e<br>join dept d<br>on e.deptno = d.deptno<br>where d.dname = &#x27;SALES&#x27;;<br><br># 直接查询部门编号<br>select ename<br>from emp<br>where deptno = (<br>select deptno<br>    from dept<br>    where dname = &#x27;SALES&#x27;<br>);<br><br>/*<br>    +--------+<br>    | ename  |<br>    +--------+<br>    | ALLEN  |<br>    | WARD   |<br>    | MARTIN |<br>    | BLAKE  |<br>    | TURNER |<br>    | JAMES  |<br>    +--------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出薪金高于公司平均薪金的所有员工、所在部门、上级领导、雇员工资等级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select a.ename, a.deptno, b.ename mgr, s.grade<br>from emp a<br>left join emp b<br>on a.mgr = b.empno<br>join salgrade s<br>on a.sal between s.losal and s.hisal<br>where a.sal &gt; (<br>select avg(sal)<br>    from emp<br>);<br>/*<br>    +-------+--------+-------+-------+<br>    | ename | deptno | mgr   | grade |<br>    +-------+--------+-------+-------+<br>    | JONES |     20 | KING  |     4 |<br>    | BLAKE |     30 | KING  |     4 |<br>    | CLARK |     10 | KING  |     4 |<br>    | SCOTT |     20 | JONES |     4 |<br>    | KING  |     10 | NULL  |     5 |<br>    | FORD  |     20 | JONES |     4 |<br>    +-------+--------+-------+-------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出与 “SCOTT” 从事相同工作的所有员工及部门名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename, d.dname<br>from emp e<br>join dept d<br>on e.deptno = d.deptno<br>where e.job = (<br>select job<br>    from emp<br>    where ename = &#x27;SCOTT&#x27;<br>) and e.ename &lt;&gt; &#x27;SCOTT&#x27;;<br>/*<br>    +-------+----------+<br>    | ename | dname    |<br>    +-------+----------+<br>    | FORD  | RESEARCH |<br>    +-------+----------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出薪金等于部门30中员工的薪金的其他员工的姓名和薪金</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename, sal<br>from emp<br>where sal in (<br>select distinct sal<br>    from emp<br>    where deptno = 30 and deptno &lt;&gt; 30<br>);<br>/*<br>Empty set<br>*/<br></code></pre></td></tr></table></figure><ul><li>其他员工，则排除30号部门人员</li></ul></li><li><p>列出薪金高于在部门 30 工作的所有员工的薪金的员工姓名和薪金、部门名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename, e.sal, d.dname<br>from emp e<br>join dept d<br>on e.deptno = d.deptno<br>where e.sal &gt; (<br>select max(sal)<br>    from emp<br>    where deptno = 30<br>    group by deptno<br>);<br>/*<br>    +-------+---------+------------+<br>    | ename | sal     | dname      |<br>    +-------+---------+------------+<br>    | KING  | 5000.00 | ACCOUNTING |<br>    | JONES | 2975.00 | RESEARCH   |<br>    | SCOTT | 3000.00 | RESEARCH   |<br>    | FORD  | 3000.00 | RESEARCH   |<br>    +-------+---------+------------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出在每个部门工作的员工数量、平均工资和平均服务年限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select d.dname, count(e.ename) num, ifnull(avg(e.sal), 0) avg_sal, TimeStampDiff(YEAR, e.hiredate, now()) avg_hiredate<br>from emp e<br>right join dept d<br>on e.deptno = d.deptno<br>group by e.deptno;<br></code></pre></td></tr></table></figure><ul><li><p>计算间隔时间函数：<code>TimeStampDiff(间隔类型, 前一个日期, 后一个日期)</code></p><p>间隔类型有：</p><table><thead><tr><th>间隔类型</th><th>表示</th></tr></thead><tbody><tr><td>FRAC_SECOND</td><td>毫秒</td></tr><tr><td>SECOND</td><td>秒</td></tr><tr><td>MINUTE</td><td>分钟</td></tr><tr><td>HOUR</td><td>小时</td></tr><tr><td>DAY</td><td>天</td></tr><tr><td>WEEK</td><td>周</td></tr><tr><td>MONTH</td><td>月</td></tr><tr><td>QUARTER</td><td>季</td></tr><tr><td>YEAR</td><td>年</td></tr></tbody></table><p>现在的时间可以使用 <code>now()</code></p></li></ul></li><li><p>列出所有员工的姓名、部门名称和工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename, d.dname, e.sal<br>from emp e<br>join dept d<br>on e.deptno = d.deptno;<br>/*<br>    +--------+------------+---------+<br>    | ename  | dname      | sal     |<br>    +--------+------------+---------+<br>    | CLARK  | ACCOUNTING | 2450.00 |<br>    | KING   | ACCOUNTING | 5000.00 |<br>    | MILLER | ACCOUNTING | 1300.00 |<br>    | SMITH  | RESEARCH   |  800.00 |<br>    | JONES  | RESEARCH   | 2975.00 |<br>    | SCOTT  | RESEARCH   | 3000.00 |<br>    | ADAMS  | RESEARCH   | 1100.00 |<br>    | FORD   | RESEARCH   | 3000.00 |<br>    | ALLEN  | SALES      | 1600.00 |<br>    | WARD   | SALES      | 1250.00 |<br>    | MARTIN | SALES      | 1250.00 |<br>    | BLAKE  | SALES      | 2850.00 |<br>    | TURNER | SALES      | 1500.00 |<br>    | JAMES  | SALES      |  950.00 |<br>    +--------+------------+---------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出所有部门的详细信息和人数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select d.*, count(e.empno) num<br>from emp e<br>right join dept d<br>on e.deptno = d.deptno<br>group by e.deptno;<br>/*<br>    +--------+------------+----------+-----+<br>    | DEPTNO | DNAME      | LOC      | num |<br>    +--------+------------+----------+-----+<br>    |     40 | OPERATIONS | BOSTON   |   0 |<br>    |     10 | ACCOUNTING | NEW YORK |   3 |<br>    |     20 | RESEARCH   | DALLAS   |   5 |<br>    |     30 | SALES      | CHICAGO  |   6 |<br>    +--------+------------+----------+-----+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出各种工作的最低工资及从事此工作的雇员名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename, job, sal<br>from emp<br>where sal in (<br>select distinct min(sal)<br>    from emp<br>    group by job<br>);<br></code></pre></td></tr></table></figure><ul><li>还可以通过岗位名称做连接查询</li></ul></li><li><p>列出各个部门的 MANAGER（主管）的最低薪资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno, ename, min(sal) min_sal<br>from emp<br>where job = &#x27;MANAGER&#x27;<br>group by deptno;<br>/*<br>    +--------+-------+---------+<br>    | deptno | ename | min_sal |<br>    +--------+-------+---------+<br>    |     10 | CLARK | 2450.00 |<br>    |     20 | JONES | 2975.00 |<br>    |     30 | BLAKE | 2850.00 |<br>    +--------+-------+---------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>列出所有员工的年工资，按年薪从低到高排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename, (sal + ifnull(comm, 0)) * 12 year_sal<br>from emp<br>order by year_sal;<br>/*<br>    +--------+----------+<br>    | ename  | year_sal |<br>    +--------+----------+<br>    | SMITH  |  9600.00 |<br>    | JAMES  | 11400.00 |<br>    | ADAMS  | 13200.00 |<br>    | MILLER | 15600.00 |<br>    | TURNER | 18000.00 |<br>    | WARD   | 21000.00 |<br>    | ALLEN  | 22800.00 |<br>    | CLARK  | 29400.00 |<br>    | MARTIN | 31800.00 |<br>    | BLAKE  | 34200.00 |<br>    | JONES  | 35700.00 |<br>    | FORD   | 36000.00 |<br>    | SCOTT  | 36000.00 |<br>    | KING   | 60000.00 |<br>    +--------+----------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>求出员工领导的薪水超过 3000 的员工名称与领导名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select a.ename, b.ename<br>from emp a<br>join emp b<br>on a.mgr = b.empno<br>where b.sal &gt; 3000;<br>/*<br>    +-------+-------+<br>    | ename | ename |<br>    +-------+-------+<br>    | JONES | KING  |<br>    | BLAKE | KING  |<br>    | CLARK | KING  |<br>    +-------+-------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>求出部门名称中带 ‘S’ 字符的部门员工的工资合计、部门人数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select d.dname, count(e.empno) num, ifnull(sum(e.sal), 0) sum_sal<br>from emp e<br>right join dept d<br>on e.deptno = d.deptno<br>where d.dname like &#x27;%s%&#x27;<br>group by e.deptno;<br>/*<br>    +------------+-----+----------+<br>    | dname      | num | sum_sal  |<br>    +------------+-----+----------+<br>    | OPERATIONS |   0 |     0.00 |<br>    | RESEARCH   |   5 | 10875.00 |<br>    | SALES      |   6 |  9400.00 |<br>    +------------+-----+----------+<br>*/<br></code></pre></td></tr></table></figure></li><li><p>给任职日期超过 30 年的员工加薪 10%</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update emp1<br>set sal = sal * 1.1<br>where TimeStampDiff(YEAR, hiredate, now()) &gt; 30;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Exercises</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java - JDK 14</title>
    <link href="/2022/07/13/Java%20-%20JDK%2014/"/>
    <url>/2022/07/13/Java%20-%20JDK%2014/</url>
    
    <content type="html"><![CDATA[<h1 id="JDK-14-新特性"><a href="#JDK-14-新特性" class="headerlink" title="JDK 14 新特性"></a>JDK 14 新特性</h1><p>2020年3月17日，正式发布 JDK 14，新增16项新特性</p><h2 id="新的语言特性"><a href="#新的语言特性" class="headerlink" title="新的语言特性"></a>新的语言特性</h2><p>新的语言特性有7项</p><h3 id="正式功能"><a href="#正式功能" class="headerlink" title="正式功能"></a>正式功能</h3><ol><li><p>Switch（JEP 361）</p><p>扩展 switch 表达式主要体现在两个方面</p><ol><li><p>case L -&gt; 标签</p><p>不带有贯穿功能，可以忽略 break，需要大括号</p><p>可使用逗号分割多个常量</p><p>局部变量仅作用于 case（旧版作用于 swtich）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// old</span><br><span class="hljs-keyword">switch</span>(day) &#123;<br>    <span class="hljs-comment">// 贯穿效果</span><br>    <span class="hljs-keyword">case</span> MON:<br>    <span class="hljs-keyword">case</span> TUE:<br>    <span class="hljs-keyword">case</span> WEN:<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;upper day&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> THU:<br>    <span class="hljs-keyword">case</span> FRI:<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<span class="hljs-comment">// 重复定义</span><br>        System.out.println(<span class="hljs-string">&quot;lower day&quot;</span>);<br>    <span class="hljs-keyword">case</span> SAT:<br>    <span class="hljs-keyword">case</span> SUN:<br>        System.out.println(<span class="hljs-string">&quot;Weekend&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// new</span><br><span class="hljs-keyword">switch</span>(day) &#123;<br>        <span class="hljs-comment">// 无贯穿</span><br>        <span class="hljs-keyword">case</span> SAT, SUN -&gt; &#123;System.out.println(<span class="hljs-string">&quot;Weekend&quot;</span>); <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;v&quot;</span>;&#125;<br>        <span class="hljs-keyword">case</span> MON, TUE, WEN -&gt; &#123;System.out.println(<span class="hljs-string">&quot;upper part&quot;</span>); <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;&#125;<span class="hljs-comment">// 不会报错</span><br>        <span class="hljs-keyword">case</span> THU, FRI -&gt; System.out.pritnln(<span class="hljs-string">&quot;lower part&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>扩展 switch 作为表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-keyword">switch</span>(day) &#123;<br>    <span class="hljs-keyword">case</span> MON, TUE, WEN -&gt; <span class="hljs-string">&quot;upper day&quot;</span>;<br><span class="hljs-keyword">case</span> THU, FRI -&gt; <span class="hljs-string">&quot;lower day&quot;</span>;<br><span class="hljs-keyword">case</span> SAT, SUN -&gt; <span class="hljs-string">&quot;Weekend&quot;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>扩展 switch 赋值给变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> swtch(day) &#123;<br>    <span class="hljs-keyword">case</span> MON, TUE, WEN -&gt; <span class="hljs-string">&quot;upper day&quot;</span>;<br><span class="hljs-keyword">case</span> THU, FRI -&gt; <span class="hljs-string">&quot;lower day&quot;</span>;<br><span class="hljs-keyword">case</span> SAT, SUN -&gt; <span class="hljs-string">&quot;Weekend&quot;</span>;<br>&#125;;<br>System.out.println(text);<br></code></pre></td></tr></table></figure></li><li><p>switch 新增 yield 语句</p><p>类似于 return，给这条 case 语句返回一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">day = Weekday.SAT;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span>(day) &#123;<br><span class="hljs-keyword">case</span> MON, TUE, WEN -&gt; <span class="hljs-string">&quot;upper day&quot;</span>;<br><span class="hljs-keyword">case</span> THU, FRI -&gt; <span class="hljs-string">&quot;lower day&quot;</span>;<br><span class="hljs-keyword">case</span> SAT, SUN -&gt; &#123;<br>        <span class="hljs-comment">// 生成[0, 10)范围内的随机整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rnd</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">10</span>);<br>        System.out.pritnln(<span class="hljs-string">&quot;rnd&quot;</span> + rnd);<br>        <span class="hljs-comment">// 通过 yiedl 产生一个新值</span><br>        yield rnd;<br>    &#125;<br>&#125;;<br>System.out.println(<span class="hljs-string">&quot;x = &quot;</span> + x);<span class="hljs-comment">// 此处的值为 yield 返回的值</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>有好的空指针异常（JEP 358）</p><p>早期空指针异常只显示错误行数，无法判断诸如 <code>car.engine.power</code> 中哪一个出错</p><p>JDK 14 中可以开启参数：<code>-XX:+ShowCodeDetailsInExceptionMessages</code></p><p>可以更好地指定哪个地方出现异常</p></li><li><p>非易失性映射字节缓冲区（JEP 352）</p><p>新增特定 JDK 的文件映射模式，可以使用 FileChannel 创建引用非易失性存储器的 MappedByteBuffer</p></li></ol><h3 id="预览功能"><a href="#预览功能" class="headerlink" title="预览功能"></a>预览功能</h3><ol><li><p>Record（JEP 359）</p><p>提供了一种紧凑的语法来声明类，可以看作新类型，类似于枚举，只需要使用 record 定义名称及它的属性即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">record</span> <span class="hljs-title class_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>系统会自动生成 Person 的标准成员：</p><ul><li>Person 中的每一个属性都定义为 <code>private final</code></li><li>每个属性都提供公共的 getter 方法</li><li>公共的构造方法，参数列表与声明相同</li><li>生成 equals()、hashCode() 方法实现</li><li>生成 toString() 方法的重写</li></ul><p>注意：record 不能继承；record 类隐含的是 final 类，也不能被继承</p></li><li><p>instanceof 模式匹配（JEP 305）</p><p>通过 instanceof 运算符进行模式匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// old</span><br><span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Integer) &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">ii</span> <span class="hljs-operator">=</span> (Integer)obj;<br>    System.out.println(ii);<br>&#125;<br><br><span class="hljs-comment">// new</span><br><span class="hljs-comment">// 若 obj 判断为 Interger 类型可直接绑定给 ii</span><br><span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Integer ii) &#123;<br>    System.out.println(ii);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>文本块（JEP 368）</p><p>在 JDK 13 中引入了文本块的预览，在 JDK 14 中进行二次预览，为了更方便的对 HTML、XML、JSON、SQL 这些字符串进行更好的阅读与维护</p><p>使用三个引号开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &lt;htm&gt;</span><br><span class="hljs-string">    &lt;body&gt;</span><br><span class="hljs-string">    &lt;p&gt; vv &lt;/p&gt;</span><br><span class="hljs-string">    &lt;/body&gt;</span><br><span class="hljs-string">    &lt;/html&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>;<br><br>System.out.println(html);<br></code></pre></td></tr></table></figure></li><li><p>外部存储器 API（JEP 370）</p><p>外部存储器 API 主要包含三个类：MemorySegment、MemoryAddress、MemoryLayout</p><blockquote><p>该功能作为孵化器模块引用（让更多的 Java 人员参与测试与反馈）</p><p>功能发布顺序：孵化 -&gt; 预览 -&gt; 发布</p></blockquote></li></ol><h2 id="垃圾回收修改"><a href="#垃圾回收修改" class="headerlink" title="垃圾回收修改"></a>垃圾回收修改</h2><ol><li><p>G1 的 NUMA 内存分配优化（JEP 345）</p><p>NUMA（non-uniform memory access）：非统一的内存访问</p><blockquote><p>内存插槽距离大不相同，实际中传输会有延迟</p></blockquote></li><li><p>JFR 事件流（JEP 349）</p><p>JDK flight Recorder：对数据进行连续的监视</p></li><li><p>移除 CMS 垃圾收集器（JEP 363）</p></li><li><p>弃用 Prllel Scvenge 和 Serial Old 垃圾收集算法（JEP 366）</p><blockquote><p>移除顺序：弃用 -&gt; 移除</p></blockquote></li><li><p>MacOS 系统上的 ZGC 实验（JEP 364）</p></li><li><p>Windows 系统上的 ZGC 实验（JEP 365）</p></li></ol><h2 id="移除包和功能"><a href="#移除包和功能" class="headerlink" title="移除包和功能"></a>移除包和功能</h2><ol><li>弃用 Solaris 和 SPARC 端口（JEP 362）</li><li>移除 Pack200（JEP 367）</li></ol><h2 id="新工具"><a href="#新工具" class="headerlink" title="新工具"></a>新工具</h2><ol><li><p>打包工具（JEP 343）</p><p>想创建一个用于打包的独立的 Java 工具，处于孵化阶段</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note12 Annotation</title>
    <link href="/2022/07/12/JavaSE%20-%20Note12%20Annotation/"/>
    <url>/2022/07/12/JavaSE%20-%20Note12%20Annotation/</url>
    
    <content type="html"><![CDATA[<h1 id="注解-x2F-注释类型"><a href="#注解-x2F-注释类型" class="headerlink" title="注解&#x2F;注释类型"></a>注解&#x2F;注释类型</h1><p>是一种引用数据类型，编译之后也是生成 .class 文件</p><p>等同于一种标记，可以在编译，类加载，运行时被读取，并执行相应的处理</p><p>通过注解开发人员可以在不改变原有代码和逻辑的情况下在源代码中嵌入补充信息</p><p>注解可以出现在类上、属性上、方法上、变量上等任意位置（支持套娃注解）</p><p>定义：<code>[修饰符列表] @interface 注解类型名 &#123;&#125;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用：<code>@注解类型名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyAnnotation</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Annotation</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JDK-内置注解"><a href="#JDK-内置注解" class="headerlink" title="JDK 内置注解"></a>JDK 内置注解</h2><p><code>java.lang</code></p><ol><li><p><strong>Deprecated</strong></p><p>此注解标注的类型已过时，不鼓励其他程序员使用，通常是因为它很危险或存在更好的选择</p></li><li><p><strong>Override</strong></p><p>重写方法，标识性注解，表示需重写父类中的方法</p><ul><li>只能注解方法</li><li>给编译器参考，若方法有误则编译器报错</li><li>和运行阶段无关</li></ul></li><li><p>SuppressWarnings</p><p>表示在注释元素（以及注释元素中包含的所有程序元素）中应该抑制命名的编译器警告</p></li></ol><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>用来标注“注解类型”的注解被称为<strong>元注解</strong></p><p>常见的元注解有：</p><ol><li><p><strong>Target</strong></p><p>用来标注”被标注的注解“<strong>出现</strong>的位置</p></li><li><p><strong>Retention</strong></p><p>用来标注“被标注的注解”<strong>保存</strong>的位置</p><table><thead><tr><th>注解名</th><th>保存位置</th></tr></thead><tbody><tr><td>RetentionPolicy.SOURCE</td><td>Java 源文件</td></tr><tr><td>RetentionPolicy.CLASS</td><td>class 文件</td></tr><tr><td>RetentionPolicy.RUNTIME</td><td>class 文件（支持反射机制读取）</td></tr></tbody></table></li></ol><p>元注解实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 被标注的注解 Override 只能出现在方法上</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-comment">// 被标注的注解 Override 保存在源文件当中</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>注解中可以定义属性，类似于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 以下属性代码与属性的使用代码一一对应</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-comment">// f1()</span><br>    String <span class="hljs-title function_">name</span><span class="hljs-params">()</span>;<span class="hljs-comment">// 属性看起来像一个方法</span><br>    <span class="hljs-comment">// f2()</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">22</span>;<span class="hljs-comment">// 属性默认值</span><br>    <span class="hljs-comment">// f3()</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<span class="hljs-comment">// 只有 value 作为属性名</span><br>    <span class="hljs-comment">// f4()</span><br>    String[] email();<span class="hljs-comment">// 数组类型</span><br>&#125;<br></code></pre></td></tr></table></figure><p>属性的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAnnotationTest</span> &#123;<br>    <span class="hljs-comment">// 若注解中有属性，那么必须给属性赋值</span><br>    <span class="hljs-meta">@MyAnnotation(name = &quot;vv&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;&#125;<br>    <br>    <span class="hljs-comment">// 若属性已使用 default 指定了默认值，使用时可以不用再指定值</span><br>    <span class="hljs-meta">@MyAnnotation(age)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> &#123;&#125;<br>    <br>    <span class="hljs-comment">// 若使用 value 作为属性名，且仅有该属性，则使用时可省略</span><br>    <span class="hljs-meta">@MyAnnotation(&quot;ee&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span> &#123;&#125;<br>    <br>    <span class="hljs-comment">// 若使用数组，则使用大括号</span><br>    <span class="hljs-comment">// 若数组只有一个元素，则大括号可以省略</span><br>    <span class="hljs-meta">@MyAnnotation(email = &#123;&quot;1@vv.com&quot;, &quot;2@vv.com&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f4</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="属性的类型"><a href="#属性的类型" class="headerlink" title="属性的类型"></a>属性的类型</h3><p>基本数据类型 + String + Class + Enum</p><p>包括以上每种类型的数组形式</p><h2 id="反射注解"><a href="#反射注解" class="headerlink" title="反射注解"></a>反射注解</h2><p>Retention 元注解中使用 “RetentionPolicy.RUNTIME”，即可被反射获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取这个 class</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName([<span class="hljs-keyword">package</span>].[class]);<br><span class="hljs-comment">// 判断该 class 是否有 @MyAnnotation</span><br><span class="hljs-keyword">if</span> (c.isAnnotationPresent(MyAnnotation.class)) &#123;<br>    <span class="hljs-comment">// 获取该注解对象</span><br>    <span class="hljs-type">MyAnnotation</span> <span class="hljs-variable">ma</span> <span class="hljs-operator">=</span> (MyAnnotation)c.getAnnotation(MyAnnotation.class);<br>    System.out.println(ma);<br>    <span class="hljs-comment">// 获取注解对象的属性，和调接口没区别</span><br>    System.out.println(myAnnotation.value());<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java - Class Loader</title>
    <link href="/2022/07/11/Java%20-%20Class%20Loader/"/>
    <url>/2022/07/11/Java%20-%20Class%20Loader/</url>
    
    <content type="html"><![CDATA[<h1 id="关于-JDK-中自带的类加载器"><a href="#关于-JDK-中自带的类加载器" class="headerlink" title="关于 JDK 中自带的类加载器"></a>关于 JDK 中自带的类加载器</h1><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p><code>ClassLoader</code>：专门负责加载类的命令&#x2F;工具</p><h3 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h3><p>父加载器</p><p><code>%JAVA_HOME%\jre\lib\rt.jar</code></p><p>rt.jar 中都是 JDK 最核心的类库</p><h3 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h3><p>母加载器</p><p><code>%JAVA_HOME%\jre\lib\ext\*.jar</code></p><h3 id="应用类加载器"><a href="#应用类加载器" class="headerlink" title="应用类加载器"></a>应用类加载器</h3><p><code>classpath</code> 中的 jar 包（class 文件）</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>假设有这样一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br></code></pre></td></tr></table></figure><p>代码在开始执行之前，会将所需要类全部加载到 JVM 当中</p><p>通过<strong>类加载器</strong>加载，以上代码类加载器会找 String.class 文件</p><p>找到就加载，加载不到会通过<strong>扩展类加载器</strong>加载</p><p>若依旧没加载到，会通过<strong>应用类加载器</strong>加载</p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>父加载器和母加载器称为：双亲委派机制</p><ul><li>优先从<strong>启动类加载器</strong>中加载，否则从<strong>扩展类加载器</strong>加载，保证了类加载的安全</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Class Loader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note11 Reflect &amp; Path</title>
    <link href="/2022/07/11/JavaSE%20-%20Note11%20Reflect%20&amp;%20Path/"/>
    <url>/2022/07/11/JavaSE%20-%20Note11%20Reflect%20&amp;%20Path/</url>
    
    <content type="html"><![CDATA[<h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><p>通过 Java 语言中的反射机制，可以操作字节码文件、代码片段（class 文件），让程序更加灵活</p><p><code>java.lang.reflect.*</code></p><h2 id="相关重要类"><a href="#相关重要类" class="headerlink" title="相关重要类"></a>相关重要类</h2><h3 id="java-lang-Class"><a href="#java-lang-Class" class="headerlink" title="java.lang.Class"></a>java.lang.Class</h3><p>代表整个字节码（一个类型，整个类），要操作一个类的字节码，首先需要获取到<strong>这个类的字节码文件</strong>，有以下三种方式：</p><ol><li><p><strong>static</strong> Class<E> forName(String className)</p><ul><li>静态方法</li><li>方法参数是一个字符串（需要有包路径的完整类名）</li><li>方法会导致类加载，若<strong>只想执行</strong>类中 static 静态代码块，可以这么使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br><span class="hljs-comment">// 代表 java.lang.String.class 文件</span><br></code></pre></td></tr></table></figure></li><li><p>Class<E> getClass()</p><ul><li>Java 中任何一个对象都有 getClass 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">Class</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> s.getClass();<br><span class="hljs-comment">// x 代表 String.class 字节码文件、String 类型</span><br>System.out.println(c1 == x);<span class="hljs-comment">// true（内存地址）</span><br><span class="hljs-comment">// c1 与 x 同时指向方法区中的 String.class 字节码文件</span><br></code></pre></td></tr></table></figure></li><li><p>Java 语言中任何一种类型（包括基本数据类型），它都有 .class 属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-type">int</span>.class;<span class="hljs-comment">// z 代表 int 类型</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="获取字节文件作用"><a href="#获取字节文件作用" class="headerlink" title="获取字节文件作用"></a>获取字节文件作用</h4><p>反射机制获取 Class，通过 Class 的 <code>newInstance()</code> 方法来实例化对象</p><ul><li><p>newInstance() 方法后台调用了无参构造方法，需保证其存在</p></li><li><p>该方法在 JDK 9 之后已过时（此处为了演示），有替代方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;[package].[className]&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> c.newInstance();<br>System.out.println(o);<br></code></pre></td></tr></table></figure></li></ul><p>优点：更为灵活</p><p>通过 properties 配置文件配置 className，创建对应类时，只需要修改配置文件中的类名，然后通过 io 流读取，再通过反射机制创建类</p><p>Java 代码写一遍，在不改变 Java 源码的基础上，可以做到不同对象的实例化（符合 OCP 开放原则：对扩展开放，对修改关闭）</p><p>classInfo.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">className</span>=<span class="hljs-string">java.util.Date</span><br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.javase.reflect.flex;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-comment">// 验证反射机制的灵活性</span><br>        <span class="hljs-comment">// 创建 Properties 集合</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">// 通过 IO 流读取配置文件中的 className</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;classInfo.properties&quot;</span>);<br><br>        <span class="hljs-comment">// 将读取到的信息存入到 p 集合</span><br>        p.load(fr);<br><br>        <span class="hljs-comment">// 关闭流</span><br>        fr.close();<br><br>        <span class="hljs-comment">// 通过 key，获取到 className</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> p.getProperty(<span class="hljs-string">&quot;className&quot;</span>);<br>        <span class="hljs-comment">// 通过反射机制，将获取到的 className 用于实例化对象</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(className);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> c.newInstance();<br>        System.out.println(o);<span class="hljs-comment">// Mon Jul 11 12:12:00 CST 2022</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java-lang-reflect-Field"><a href="#java-lang-reflect-Field" class="headerlink" title="java.lang.reflect.Field"></a>java.lang.reflect.Field</h3><p>代表字节码中的属性字节码（类中成员变量）</p><ol><li><p>Field getField(String name)</p><p>返回一个 Field 对象（仅支持 public 修饰变量）</p></li><li><p>Field[] getFields()</p><p>返回一个 Field 数组（仅支持 public 修饰变量）</p><blockquote><p>若要获取所有类型权限符修饰的变量，使用</p><p><code>Field getDeclaredField()</code> 或</p><p><code>Field getDeclaredFields()</code></p></blockquote></li><li><p>String getName()</p><p>返回由此 Field 对象表示的字段的名称</p></li><li><p>Class<E> getType()</p><p>返回一个标识字段的类对象</p><p>转换成 Class 便能获取类名&#x2F;简单类名</p><blockquote><p>Class 对象支持以下两种方法：</p><ol><li><p>String getName()</p><p>返回类名</p></li><li><p>String getSimpleName()</p><p>返回简单的类名（不含包名）</p></li></ol></blockquote></li><li><p>int getModifiers()</p><p>返回修饰符（可能有多个，即为 int 类型，表示修饰符代号）</p><blockquote><p>通过 <code>java.lang.reflect.Modifier</code> 中的</p><p><code>static String toString(int mod)</code> 方法进行转换</p><blockquote><p>Class 中也有此方法</p></blockquote></blockquote></li></ol><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>实现成员变量反编译</p><p>Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.javase.reflect.decompilation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> sex;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">MATH_PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.wataaaame.github.javase.reflect.decompilation;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 获取反编译 Class 文件</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;io.wataaaame.github.javase.reflect.decompilation.Student&quot;</span>);<br>        <span class="hljs-comment">// 使用字符串拼接</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        sb.append(<span class="hljs-string">&quot;package &quot;</span> + c.getPackageName() + <span class="hljs-string">&quot;;\n\n&quot;</span>);<br>        sb.append(Modifier.toString(c.getModifiers()) +<br>                <span class="hljs-string">&quot; class &quot;</span> + c.getSimpleName() + <span class="hljs-string">&quot; &#123;\n&quot;</span>);<br><br>        <span class="hljs-comment">// 通过 Field，配合循环，获取属性信息</span><br>        Field[] fields = c.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>            sb.append(<span class="hljs-string">&quot;\t&quot;</span> + Modifier.toString(field.getModifiers()) + <span class="hljs-string">&quot; &quot;</span> +<br>                    field.getType().getSimpleName() + <span class="hljs-string">&quot; &quot;</span> +<br>                    field.getName() + <span class="hljs-string">&quot;;\n&quot;</span>);<br>        &#125;<br><br>        sb.append(<span class="hljs-string">&quot;&#125;&quot;</span>);<br><br>        System.out.println(sb);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取对象属性"><a href="#获取对象属性" class="headerlink" title="获取对象属性"></a>获取对象属性</h4><p>void set(Object obj, Object value)</p><p>将指定对象 obj 上的此 Field 赋一个值 value</p><p>Object get(Object obj)</p><p>获取指定对象的 Field 值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用反射机制创建一个 Class</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">studentClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;[path]&quot;</span>);<br><span class="hljs-comment">// 通过 Class 创建对象 obj</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> studentClass.newInstance();<br><span class="hljs-comment">// 获取 studentClass 中的 no 属性</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">noField</span> <span class="hljs-operator">=</span> studentClass.getDeclaredField(<span class="hljs-string">&quot;no&quot;</span>);<br><span class="hljs-comment">// 设置 no 值并赋给 obj 对象 中的 no</span><br>noField.set(obj, <span class="hljs-number">101</span>);<br><br><span class="hljs-comment">// 获取值</span><br>System.out.println(noField.get(obj));<span class="hljs-comment">// 101</span><br></code></pre></td></tr></table></figure><ul><li><p>打破封装（反射机制缺点，可能带来安全性问题）</p><p>通过 <code>Field.setAccessible(true)</code> 开启私有属性的访问权</p></li></ul><h3 id="java-lang-reflect-Method"><a href="#java-lang-reflect-Method" class="headerlink" title="java.lang.reflect.Method"></a>java.lang.reflect.Method</h3><p>代表字节码中的方法字节码（类中方法）</p><p>常用方法类似于 Field</p><ol><li><p>Class<E> getReturnType()</p><p>获取方法返回值类型，（调用 Class 的 <code>getSimpleName()</code>）</p></li><li><p>Class<E>[] getParameterTypes()</p><p>获取参数列表类型，（循环调用 Class 的 <code>getSimpleName()</code>）</p></li></ol><h4 id="调用对象方法"><a href="#调用对象方法" class="headerlink" title="调用对象方法"></a>调用对象方法</h4><p>方法 getDeclaredMethod(String name, Class<E>… parameterTypes)</p><p>获取对象：对象名；参数列表</p><p><strong>Object invoke(Object obj, Object… args)</strong></p><p>调用方法：对象；Method 方法名（调用函数）；实参列表；返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用反射机制创建一个 Class</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">studentClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;[path]&quot;</span>);<br><span class="hljs-comment">// 通过 Class 创建对象 obj</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> studentClass.newInstance();<br><span class="hljs-comment">// 获取 studentClass 中的 doSome() 方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">doSomeMethod</span> <span class="hljs-operator">=</span> studentClass.getDeclaredMethod(<span class="hljs-string">&quot;doSome&quot;</span>, String.class, String.class);<br><span class="hljs-comment">// 调用方法</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">retValue</span> <span class="hljs-operator">=</span> doSomeMethod.invoke(obj, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="可变长度参数"><a href="#可变长度参数" class="headerlink" title="*可变长度参数"></a>*可变长度参数</h4><p><code>类型... [name]</code></p><p>可传 0-n 个，且必须位于参数列表中最后一个（只能有一个）</p><p>可变长度参数可以当作一个数组来看待（有数组特征）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">m</span><span class="hljs-params">(<span class="hljs-type">int</span>... args)</span> &#123;&#125;;<br><br>m();<br>m(<span class="hljs-number">10</span>);<br>m(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><h3 id="java-lang-reflect-Constructor"><a href="#java-lang-reflect-Constructor" class="headerlink" title="java.lang.reflect.Constructor"></a>java.lang.reflect.Constructor</h3><p>代表字节码中的构造方法字节码（类中构造方法）</p><p>类似于 Method</p><h4 id="构造方法创建对象"><a href="#构造方法创建对象" class="headerlink" title="构造方法创建对象"></a>构造方法创建对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用反射机制创建一个 Class</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">studentClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;[path]&quot;</span>);<br><span class="hljs-comment">// 通过 Class 创建对象 obj</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> studentClass.newInstance();<br><span class="hljs-comment">// 获取 studentClass 中的构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> studentClass.getDeclaredConstructor(<span class="hljs-type">int</span>.class, String.class);<br><span class="hljs-comment">// 无参构造方法可以直接调用</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> studentClass.newInstance();<br><span class="hljs-comment">// 通过构造器调用 newInstance() 方法 new 对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">newObj</span> <span class="hljs-operator">=</span> c.newInstance(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;v&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="获取父类与接口"><a href="#获取父类与接口" class="headerlink" title="获取父类与接口"></a>获取父类与接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 Class 字节码</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br><br><span class="hljs-comment">// 获取父类</span><br>System.out.println(c.getSuperclass().getName());<br><span class="hljs-comment">// java.lang.Object</span><br><br><span class="hljs-comment">// 获取实现的接口（返回 Class 数组）</span><br>Class[] classes = c.getInterfaces();<br><span class="hljs-keyword">for</span> (Class temp : classes)<br>    System.out.println(temp.getSimpleName());<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Serializable</span><br><span class="hljs-comment"> * Comparable</span><br><span class="hljs-comment"> * CharSequence</span><br><span class="hljs-comment"> * Constable</span><br><span class="hljs-comment"> * ConstantDesc</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h1 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h1><h2 id="IDEA-路径"><a href="#IDEA-路径" class="headerlink" title="IDEA 路径"></a>IDEA 路径</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;chapter25/classInfo.properties&quot;</span>);<br></code></pre></td></tr></table></figure><p>缺点：移植性差，IDEA 中默认的当前路径是 project 的根，离开了 IDEA，路径便无效</p><h2 id="通用路径"><a href="#通用路径" class="headerlink" title="通用路径"></a>通用路径</h2><p>前提：文件必须在<strong>类路径</strong>下（src 是类的根路径）（仅等同于类路径，真正的类路径在 IDEA 的 out 中）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader().getResource(<span class="hljs-string">&quot;classInfo.proerties&quot;</span>).getPath();<br></code></pre></td></tr></table></figure><ul><li>Thread.currentThread()：当前线程对象</li><li>getContextClassLoader()：线程对象方法，可以获取当前线程的类加载器对象</li><li>getResource(“classInfo.proerties”)：类加载器对象方法，当前线程的类加载器默认从<strong>类的根路径</strong>下加载资源（此为根路径下的 classInfo.properties文件）</li><li>getPath()：获取路径</li></ul><p>还可以直接以<strong>流的形式</strong>返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InputStream</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> Thread.currentThread.getContextClassLoader().getResourceAsStream(<span class="hljs-string">&quot;classInfo.properties&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="资源绑定器"><a href="#资源绑定器" class="headerlink" title="资源绑定器"></a>资源绑定器</h2><p><code>java.util</code> 包下提供了一个<strong>资源绑定器</strong>，便于获取<strong>属性配置文件</strong>中的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ResourceBundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> ResourceBundle.getBundle(<span class="hljs-string">&quot;classInfo&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> bundle.getString(<span class="hljs-string">&quot;className&quot;</span>);<br>System.out.println(className);<br></code></pre></td></tr></table></figure><ul><li>只能绑定 <code>xxx.properties</code></li><li>必须放在<strong>类路径下</strong></li><li>路径忽略扩展名</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reflect</tag>
      
      <tag>Path</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note10 Multi-threading</title>
    <link href="/2022/07/08/JavaSE%20-%20Note10%20Multi-threading/"/>
    <url>/2022/07/08/JavaSE%20-%20Note10%20Multi-threading/</url>
    
    <content type="html"><![CDATA[<h1 id="Multi-threading-多线程"><a href="#Multi-threading-多线程" class="headerlink" title="Multi-threading 多线程"></a>Multi-threading 多线程</h1><h2 id="进程？线程？"><a href="#进程？线程？" class="headerlink" title="进程？线程？"></a>进程？线程？</h2><p>进程：是一个应用程序</p><p>线程：是一个进程中的执行场景&#x2F;单元</p><ul><li><p>一个进程可以启动多个线程</p></li><li><p>Java 语言中的资源共享：</p><p>进程之间内存独立不共享</p><p>线程之间：<strong>堆内存</strong>和<strong>方法区</strong>内存共享，但是<strong>栈内存</strong>独立，一个线程一个栈</p></li></ul><blockquote><p>对于一个 Java 程序来说，当在 DOS 命令窗口输入：java HelloWorld，执行后：</p><p>会启动 JVM，而 JVM 就是一个进程</p><p>JVM 先启动一个主线程调用 main 方法；再启动一个垃圾回收线程负责看护，并回收垃圾</p><p>最起码，现在至少有两个线程并发</p></blockquote><blockquote><p>对于单核 CPU，不能做到真正的多线程并发，但是可以给人一种多线程并发的感觉</p></blockquote><h2 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h2><p>Java 支持多线程机制，并且已经实现，可以直接继承</p><ol><li><p>继承 Thread 方式</p><p>编写一个类，直接继承 <code>java.lang.Thread</code>，且必须重写 run 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 这里是 main 方法，属于主线程，在主栈中运行</span><br><br>        <span class="hljs-comment">// 新建一个分支线程对象</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">mt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><br>        <span class="hljs-comment">// 启动线程</span><br>        <span class="hljs-comment">// start() 方法的作用是：启动一个分支线程</span><br>        <span class="hljs-comment">// 在 JVM 中开辟一个新的栈空间</span><br>        <span class="hljs-comment">// 这段代码完成后，瞬间就结束了，线程就启动成功</span><br>        <span class="hljs-comment">// 启动成功的线程会自动调用 rum 方法</span><br>        <span class="hljs-comment">// 并且 run 方法在分支栈的底部（压栈）（run、main 平级）</span><br>        mt.start();<br><br>        <span class="hljs-comment">// 直接调用 run 方法，并不会开辟新栈</span><br>        <span class="hljs-comment">// 而是在原线程中执行 run 方法</span><br>        <span class="hljs-comment">// mt.run()</span><br><br>        <span class="hljs-comment">// 这里的代码还是运行在主线程中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;main -&gt; &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 定义线程类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// run 方法必须重写</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 编写程序，这段代码运行在分支线程中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;branch -&gt; &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>封装接口方式</strong>（使用更多，单独的类还可以方便继承其他类）</p><p>编写一个类，实现 <code>java.lang.Runnable</code> 接口，实现 run 方法，并使用 <code>Thread()</code> 的构造方法封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 实例化一个可运行对象</span><br>        <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">mr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-comment">// 将 mr 通过 Thread 构造方法封装</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr);<br>        <span class="hljs-comment">// 代码合并</span><br>        <span class="hljs-comment">// Thread t = new Thread(new MyRunnable());</span><br><br>        <span class="hljs-comment">// 启动线程</span><br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;main -&gt; &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 此非线程类，是一个“可运行”类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">// 可运行类同样必须重写 run 方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;branch -&gt; &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>采用匿名内部类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 采用匿名内部类方式</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;Branch -&gt; &quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 启动线程</span><br>        t.start();<br><br>        <span class="hljs-comment">// 主线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;main -&gt; &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>FutureTask 方式，实现 Callable 接口</p><p><code>java.util.concurrent.FutureTask</code></p><p>JUC包下（并发包），为 JDK 8 新特性，老 JDK 中无此包</p><p>实现的线程可以<strong>获取返回值</strong></p><p>缺点：效率较低，获取返回值需要等到线程执行完</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureTaskTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-comment">// 第一步，创建一个“未来任务类”对象</span><br>        <span class="hljs-comment">// 参数非常重要，需要给一个 Callable 接口实现对象</span><br>        <span class="hljs-type">FutureTask</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">// call 相当于 run 方法，多了一个返回值</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-comment">// 线程执行一个任务，执行后可能返回一个结果</span><br>                System.out.println(<span class="hljs-string">&quot;call begin&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span> * <span class="hljs-number">10</span>);<br>                System.out.println(<span class="hljs-string">&quot;call over&quot;</span>);<br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>                <span class="hljs-comment">// 自动装箱变成300</span><br>                <span class="hljs-keyword">return</span> a + b;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">// 创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ft);<br><br>        <span class="hljs-comment">// 启动线程</span><br>        t.start();<br><br>        <span class="hljs-comment">// 通过 get 拿到 FutureTask 的返回结果</span><br>        <span class="hljs-comment">// main 方法会受阻，必须等到 t 线程执行完毕才能得到返回结果</span><br>        System.out.println(ft.get());<br><br>        System.out.println(<span class="hljs-string">&quot;After crowd&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    call begin</span><br><span class="hljs-comment">    call over</span><br><span class="hljs-comment">    300</span><br><span class="hljs-comment">    After crowd</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p>新建状态、就绪状态、运行状态、阻塞状态（锁池）、死亡状态</p><p><img src="/images/image-java/note10-01-%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="线程生命周期"></p><h2 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>();<br></code></pre></td></tr></table></figure><ol><li><p>void setName(String name)</p><p>设置线程名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">t.setName(<span class="hljs-string">&quot;vThread&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>String getName()</p><p>获取线程名称（默认线程名：Thread-0，依次排序）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(t.getName());<span class="hljs-comment">// vThread</span><br></code></pre></td></tr></table></figure></li><li><p><strong>static</strong> Thread currentThread()</p><p>返回对当前正在执行的线程对象的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(Thread.currentThread().getName());<br><span class="hljs-comment">// main</span><br></code></pre></td></tr></table></figure></li><li><p><strong>static</strong> void sleep(long millis)</p><p>使<strong>当前正在执行的线程</strong>以指定的<strong>毫秒数</strong>暂停（暂时停止执行），具体取决于系统定时器和调度程序的精度和准确性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread.sleep(<span class="hljs-number">1000</span> * <span class="hljs-number">5</span>);<span class="hljs-comment">// 间隔5秒</span><br></code></pre></td></tr></table></figure></li><li><p>public void interrupt()</p><p>中断这个线程（依靠了 Java 的异常处理机制，直接抛出异常，然后继续运行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">t.start();<br>t.interrupt();<br><span class="hljs-comment">// Exception infomation...</span><br></code></pre></td></tr></table></figure></li><li><p><del>void stop()</del></p><p>已弃用，强制杀死线程，可能造成数据损坏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">t.stop();<br></code></pre></td></tr></table></figure><p>改用 Runnable 类中定义一个 isRun 的 boolean，为 false 时关闭方法</p></li></ol><h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a><em>线程调度</em></h2><h3 id="常见的线程调度模型"><a href="#常见的线程调度模型" class="headerlink" title="常见的线程调度模型"></a>常见的线程调度模型</h3><h4 id="抢占式调度模型"><a href="#抢占式调度模型" class="headerlink" title="抢占式调度模型"></a>抢占式调度模型</h4><p>哪个线程的优先级比较高，抢到的 CPU 时间片的概率就高一些</p><blockquote><p>Java 采用的就是抢占式调度模型</p><p>其中：最低优先级1，默认优先级5，最高优先级10</p></blockquote><h4 id="均分式调度模型"><a href="#均分式调度模型" class="headerlink" title="均分式调度模型"></a>均分式调度模型</h4><p>平均分配 CPU 时间片，每个线程占有的 CPU 时间片时间长度一样</p><p>平均分配，众生平等</p><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><ol><li><p>void setPriority(int newPriority)</p><p>更改此线程的优先级</p></li><li><p>int getPriority()</p><p>返回此线程的优先级</p></li><li><p><strong>static</strong> void yield()</p><p>暂停当前正在执行的线程对象，并执行其他线程</p><ul><li>并非阻塞，当前线程让位，让给其他线程使用（回到就绪状态）</li></ul><blockquote><p>对调度程序的一个暗示，即当前线程愿意产生当前使用的处理器，调度程序可以自由地忽略这个提示</p></blockquote></li><li><p>void join()</p><p>合并线程，当前线程进入阻塞，直到 join 线程结束，当前线程才可以继续执行</p><blockquote><p>栈之间协调，并未消失</p></blockquote></li></ol><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="*线程安全"></a>*线程安全</h2><p>存在线程安全问题的三个条件：</p><ol><li>多线程并发</li><li>有共享数据</li><li>共享数据有修改行为</li></ol><h3 id="两大编程模型"><a href="#两大编程模型" class="headerlink" title="两大编程模型"></a>两大编程模型</h3><ol><li>异步编程模型：线程各自执行（多线程并发，效率较高）</li><li>同步编程模型：两个线程发生等待关系（线程排队执行，效率较低）</li></ol><h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><p>用排队执行解决线程安全问题（不能并发，且牺牲一部分效率）（排他锁）</p><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1. 同步代码块</span><br><span class="hljs-keyword">synchronized</span>(对象) &#123;<br><span class="hljs-comment">// 线程同步代码块</span><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">括号中的数据必须是多线程共享数据（包括类中引用，不包括局部变量），才能令对应线程排队</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 2. 实例方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span> &#123;&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">表示找对象锁</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 3. 静态方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doOther</span><span class="hljs-params">()</span> &#123;&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">表示找类锁</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li><p>对象锁：一个对象一把锁</p><p>类锁：永远只有一把锁</p></li><li><p>synchronized 用在实例方法上一定锁的是 this（不灵活；扩大了同步范围）</p></li><li><p>执行原理是：当线程遇到 <code>synchronized</code>，会自动查找并占有小括号中的“对象锁”，直到代码块执行完毕后才释放该锁，以便其他线程继续占用</p><p><img src="/images/image-java/note10-02-Lockpool.PNG" alt="Lockpool"></p></li><li><p><strong>局部变量&#x2F;常量</strong>永远不会存在线程安全问题，一个线程一个栈，局部变量不共享；局部变量字符串拼接，建议使用 StringBuilder（StringBuffer 线程安全，效率较低）</p></li><li><p>synchronized 线程同步代码块越小，效率越高</p></li><li><p>Vector、Hashtable、Properties 都是线程安全的</p></li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="银行取款"><a href="#银行取款" class="headerlink" title="银行取款"></a>银行取款</h4><p>模拟一个银行取款操作，若异步编程，则有可能两个账户同时取款而未能正确更新余额</p><p>Account.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread.threadsafe;<br><br><span class="hljs-comment">// 不使用线程同步机制，多线程对同一账户取款，出现线程安全问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String actNo;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String actNo, <span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.actNo = actNo;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getActNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> actNo;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBalance</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-comment">// 取款方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-comment">// 取款前余额</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">before</span> <span class="hljs-operator">=</span> getBalance();<br>        <span class="hljs-comment">// 取款后余额</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">after</span> <span class="hljs-operator">=</span> before - money;<br>        <span class="hljs-comment">// 取款操作</span><br>        <span class="hljs-comment">// 若 t1 执行到此，而 t2 同时到此</span><br>        <span class="hljs-comment">// 那么 t1 取款后余额还未更新，导致异步问题</span><br>        setBalance(after);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>WithdrawThread.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread.threadsafe;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WithdrawThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Account act;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WithdrawThread</span><span class="hljs-params">(Account act)</span> &#123;<br>        <span class="hljs-built_in">this</span>.act = act;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 取款5000</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;<br>        act.withdraw(money);<br><br>        <span class="hljs-comment">// 打印信息</span><br>        System.out.println(Thread.currentThread().getName() +<br>                <span class="hljs-string">&quot; get money from &quot;</span> + act.getActNo() +<br>                <span class="hljs-string">&quot; about &quot;</span> + money + <span class="hljs-string">&quot;, rest of: &quot;</span> + act.getBalance());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread.threadsafe;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1个银行账户，2个线程对同一个账户取款</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-number">10000</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WithdrawThread</span>(a);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WithdrawThread</span>(a);<br><br>        t1.setName(<span class="hljs-string">&quot;t1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;t2&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        <span class="hljs-comment">// t2 get money from 101 about 5000.0, rest of: 5000.0</span><br><span class="hljs-comment">// t1 get money from 101 about 5000.0, rest of: 5000.0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用线程同步代码块解决问题，只需修改 Account.java 中的取款方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 取款方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>    <span class="hljs-comment">// 使用 synchronized() &#123;&#125; 代码块解决线程安全问题</span><br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">before</span> <span class="hljs-operator">=</span> getBalance();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">after</span> <span class="hljs-operator">=</span> before - money;<br>        setBalance(after);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>t1 线程先锁 o1，再锁 o2；t2 线程先锁 o2，再锁 o1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLockTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadThread1</span>(o1, o2);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadThread2</span>(o2, o2);<br><br>        t1.start();<br>        t2.start();<br>        <span class="hljs-comment">// 两个线程互相僵持</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Object o1;<br>    Object o2;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeadThread1</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>        <span class="hljs-built_in">this</span>.o1 = o1;<br>        <span class="hljs-built_in">this</span>.o2 = o2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 先锁 o1</span><br>        <span class="hljs-keyword">synchronized</span> (o1) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">// o2 已被 t2 线程锁上</span><br>            <span class="hljs-keyword">synchronized</span> (o2) &#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    Object o1;<br>    Object o2;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeadThread2</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>        <span class="hljs-built_in">this</span>.o1 = o1;<br>        <span class="hljs-built_in">this</span>.o2 = o2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 先锁 o2</span><br>        <span class="hljs-keyword">synchronized</span> (o2) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">// o1 已被 t2 线程锁上</span><br>            <span class="hljs-keyword">synchronized</span> (o1) &#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="模拟抢票"><a href="#模拟抢票" class="headerlink" title="模拟抢票"></a>模拟抢票</h4><p>TicketGrabbing.java</p><p>负责多线程抢票</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread.Homework01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketGrabbing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Station s;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TicketGrabbing</span><span class="hljs-params">(Station s)</span> &#123;<br>        <span class="hljs-built_in">this</span>.s = s;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 模拟用户通过平台接口抢票</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            s.grabbing();<br>            <span class="hljs-keyword">try</span> &#123;<br>                sleep(<span class="hljs-number">10</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Station.java</p><p>负责提供票，若有票则售卖，无则显示为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread.Homework01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Station</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grabbing</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br>                ticket -= <span class="hljs-number">1</span>;<br>                System.out.println(Thread.currentThread().getName() +<br>                                   <span class="hljs-string">&quot; got, rest: &quot;</span> + ticket);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;rest 0&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread.Homework01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Station</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Station</span>();<br>        <span class="hljs-comment">// 创建3个线程抢票</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketGrabbing</span>(s).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>尽量使用<strong>局部变量</strong>代替实例变量和静态变量</li><li>如果必须是实例变量，那么可以考虑<strong>创建多个对象</strong>，这样实例变量的内存就不共享了（就是一个线程一个对象）</li><li>如果<strong>不能使用局部变量，对象也不能创建多个</strong>，才考虑使用 synchronized 线程同步机制</li></ol><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>Java 语言中，线程分为两大类：用户线程与守护线程</p><p>eg. 垃圾回收器（守护线程）</p><blockquote><p>主线程 main 方法是一个用户线程</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>一般守护线程是一个死循环，所有的用户线程结束，守护线程会自动结束</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>void setDaemon(boolean on)</code></p><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DaemonThreadTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DaemonThread</span>();<br><br>        <span class="hljs-comment">// 启动之前设置为守护线程</span><br>        t.setDaemon(<span class="hljs-literal">true</span>);<br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; -&gt; &quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    main -&gt; 0</span><br><span class="hljs-comment">    Thread-2 -&gt; 0</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">    main -&gt; 9</span><br><span class="hljs-comment">    Thread-2 -&gt; 9</span><br><span class="hljs-comment">    Thread-2 -&gt; 10</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Process finished with exit code 0</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DaemonThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 即使是死循环，守护线程依旧会在用户线程结束后自动结束</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; -&gt; &quot;</span> + i++);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p><code>java.util.Timer</code>（也很少用，目前高级框架支持定时器）</p><p>间隔特定时间执行特定程序</p><ol><li><p>void schedule(TimerTask task, Date firstTime, long period)</p><p>从 firstTime 指定的时间开始，对 task 指定的任务执行 period 重复的、固定延迟执行</p><ul><li>TimerTask 为抽象类，需要自定义继承类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimerTaskTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-comment">// 使用定时器指定任务</span><br>        <span class="hljs-comment">// 创建定时器对象</span><br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>        <span class="hljs-comment">// 守护线程的方式</span><br>        <span class="hljs-comment">// Timer t = new Timer(true);</span><br><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">firstTime</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2022-07-10 17:16:00&quot;</span>);<br><br>        <span class="hljs-comment">// 指定定时任务</span><br>        <span class="hljs-comment">// 第一个参数：任务对象；第二个参数：第一次运行时间；第三个参数：间隔时间</span><br>        t.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LogTimerTask</span>(), firstTime, <span class="hljs-number">1000</span> * <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 编写一个定时任务类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogTimerTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TimerTask</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        System.out.println(sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="生产者和消费者模式"><a href="#生产者和消费者模式" class="headerlink" title="生产者和消费者模式"></a>生产者和消费者模式</h2><h3 id="wait-amp-notify"><a href="#wait-amp-notify" class="headerlink" title="wait() &amp; notify()"></a>wait() &amp; notify()</h3><p>这两个方法不是线程对象的方法，是 Java 中任何一个对象都有的方法（Object 类中的方法）</p><p>并非使用线程对象调用，而是通过对象调用</p><ol><li><p>void wait()</p><p>让正在 o 对象上活动的线程进入等待状态（释放锁），直到被唤醒为止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>o.wait();<br></code></pre></td></tr></table></figure></li><li><p>void notify()</p><p>让正在 o 对象上等待的线程进入活动状态（不会释放锁）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">o.notify();<br></code></pre></td></tr></table></figure></li><li><p>void notifyAll()</p><p>唤醒 o 对象上处于等待的所有线程</p></li></ol><h3 id="生产者和消费者模式-1"><a href="#生产者和消费者模式-1" class="headerlink" title="生产者和消费者模式"></a>生产者和消费者模式</h3><p>生产线程负责生产，消费线程负责消费，二者需达到均衡</p><p><img src="/images/image-java/note10-03-%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt="生产者与消费者模式"></p><p>使用 wait() &amp; notify() 实现生产者消费者模式：</p><ul><li>二者的使用建立在线程同步的基础之上，因为多线程需要同时操作一个仓库，有线程安全问题</li><li>wait()：让正在 o 对象上活动的 t 线程进入等待状态，并释放之前占有的 o 对象的锁</li><li>notify()：让正在 o 对象上等待的线程被唤醒，只是通知，不会释放 o 对象之前占有的锁</li></ul><p>模拟这样的需求：</p><ol><li>仓库采用 List 集合，集合中假设只能存一个元素</li><li>1个元素表示仓库满，0个元素表示仓库空</li><li>保证 List 集合中永远都是最多存储一个元素（生产一个，消费一个）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerConsumerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建 List 仓库</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">// 创建生产线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(list));<br>        <span class="hljs-comment">// 创建消费线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(list));<br><br>        <span class="hljs-comment">// 设置线程名称</span><br>        p.setName(<span class="hljs-string">&quot;Producer&quot;</span>);<br>        c.setName(<span class="hljs-string">&quot;Consumer&quot;</span>);<br><br>        <span class="hljs-comment">// 开始生产和消费</span><br>        p.start();<br>        c.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 生产线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">// 仓库</span><br>    <span class="hljs-keyword">private</span> List list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producer</span><span class="hljs-params">(List list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 一直生产</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (list) &#123;<br>                <span class="hljs-comment">// 大于0，说明仓库已经有元素</span><br>                <span class="hljs-keyword">if</span> (list.size() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 当前线程进入等待状态，并且释放占有的 list 锁</span><br>                        list.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 若执行至此，说明仓库为空，开始生产</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>                list.add(o);<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;-&gt;&quot;</span> + o);<br>                <span class="hljs-comment">// 唤醒消费者继续消费</span><br>                list.notify();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 消费线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">// 仓库</span><br>    <span class="hljs-keyword">private</span> List list;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(List list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 一直消费</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (list) &#123;<br>                <span class="hljs-comment">// 如果 list 为0，说明仓库空</span><br>                <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// 当前线程进入等待状态，并且释放占有的 list 锁</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        list.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 执行到此处说明仓库不为空，开始消费</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;-&gt;&quot;</span> + list.remove(<span class="hljs-number">0</span>));<br>                <span class="hljs-comment">// 唤醒生产者继续生产</span><br>                list.notify();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h3><p>使用生产者和消费者模式实现，交替输出：</p><p>EvenNum-&gt;0<br>OddNum-&gt;1<br>EvenNum-&gt;2<br>OddNum-&gt;3</p><p>Num.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread.homework02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Num</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setI</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-built_in">this</span>.i = i;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>OddNum.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread.homework02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OddNum</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Num n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OddNum</span><span class="hljs-params">(Num n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (n) &#123;<br>                <span class="hljs-comment">// 如果 i+1 对2取模，结果不为0，说明 i 是偶数，则 wait</span><br>                <span class="hljs-keyword">if</span> (n.getI() % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        n.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 执行到此说明 i 为奇数，可以打印</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;-&gt;&quot;</span> + n.getI());<br>                n.setI(n.getI() + <span class="hljs-number">1</span>);<br>                <span class="hljs-comment">// i++ 后，i 为偶数，唤醒 EvenNum 线程</span><br>                n.notify();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>EvenNum.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread.homework02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvenNum</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Num n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EvenNum</span><span class="hljs-params">(Num n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (n) &#123;<br>                <span class="hljs-comment">// 如果 i+1 对2取模等于0，则 i 为奇数，需要 wait</span><br>                <span class="hljs-keyword">if</span> (n.getI() % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        n.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">//执行到此说明 i 为偶数，可以输出</span><br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;-&gt;&quot;</span> + n.getI());<br>                n.setI(n.getI() + <span class="hljs-number">1</span>);<br>                <span class="hljs-comment">// i++ 后 i 为奇数，需要唤醒 OddNum</span><br>                n.notify();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.thread.homework02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Num</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Num</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">on</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OddNum</span>(n);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">en</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EvenNum</span>(n);<br><br>        on.setName(<span class="hljs-string">&quot;OddNum&quot;</span>);<br>        en.setName(<span class="hljs-string">&quot;EvenNum&quot;</span>);<br><br>        on.start();<br>        en.start();<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    EvenNum-&gt;0</span><br><span class="hljs-comment">    OddNum-&gt;1</span><br><span class="hljs-comment">    EvenNum-&gt;2</span><br><span class="hljs-comment">    OddNum-&gt;3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Multi-threading</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note09 IO Stream, File, IO &amp; Properties</title>
    <link href="/2022/07/06/JavaSE%20-%20Note09%20IO%20Stream,%20File,%20IO%20&amp;%20Properties/"/>
    <url>/2022/07/06/JavaSE%20-%20Note09%20IO%20Stream,%20File,%20IO%20&amp;%20Properties/</url>
    
    <content type="html"><![CDATA[<h1 id="IO-Stream"><a href="#IO-Stream" class="headerlink" title="IO Stream"></a>IO Stream</h1><p><code>java.io.*</code></p><p>硬盘文件到内存的读（Input）和写（Output）</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li><p>流的方向（以内存为参照物）</p><p>往内存中去：输入流（读）；从内存中出：输出流（写）</p></li><li><p>读取数据方式</p><ul><li>字节方式（字节流）：一次读1个字节 byte，等同于一次读取8个二进制位（万能读取）</li><li>字符方式（字符流）：一次读取一个字符（方便读取纯文本文件）</li></ul></li></ol><h2 id="Stream-通用规则"><a href="#Stream-通用规则" class="headerlink" title="Stream 通用规则"></a>Stream 通用规则</h2><ul><li><p>类名以 Stream 结尾的都是<strong>字节流</strong></p></li><li><p>所有流都实现了 <code>java.io.Closeable</code> 接口，都有 close 方法，都是可关闭的<br>使用完流记得关闭以节约资源</p></li><li><p>所有<strong>输出流</strong>都实现了 <code>java.io.Flushable</code> 接口，都有 flush 方法，都是可刷新的</p><p>输出流在最终输出后，要记得 flush 刷新（清空流中未输出的数据），否则有可能丢失数据</p></li><li><p>文件路径：</p><p>支持相对路径或绝对路径</p><p>反斜杠 <code>\</code> 需要两个，否则会被识别为转义字符</p><p>可用正斜杠 <code>/</code> 代替</p><blockquote><p>IDEA 默认当前路径为工程 project 的根路径</p></blockquote></li></ul><h2 id="常用-Stream（16个）"><a href="#常用-Stream（16个）" class="headerlink" title="常用 Stream（16个）"></a>常用 Stream（16个）</h2><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p>文件流</p><ol><li><p><strong>java.io.FileInputStream</strong></p><p>文件字节输入流，万能输入，任何类型的文件都可以采用这个流读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建流引用</span><br><span class="hljs-comment">// 设置为 null 方便在 finally 中使用</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>    fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\vv\\code\\Java\\JavaSE\\chapter23\\src\\io\\github\\wataaaame\\javase\\io\\test.txt&quot;</span>);<br>    <span class="hljs-comment">// 读取数据 read 方法（IOException 异常包含掉第一个异常）</span><br>    <span class="hljs-comment">// 循环读取文件，返回-1代表读到末尾</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">readData</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// read() 方法返回读取到的数据</span><br>    <span class="hljs-keyword">while</span> ((readData = fis.read()) != -<span class="hljs-number">1</span>)<br>        System.out.println(readData);<br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123; <span class="hljs-comment">// 使用后一定记得关闭流</span><br>    <span class="hljs-comment">// 若流为空，则没必要关闭；也为了避免空指针异常</span><br>    <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fis.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缺点：一次读取一个字节 byte，内存和硬盘交互太频繁，资源都耗费在交互上（使用 byte[] 数组改进）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">int read(byte[] b)</span><br><span class="hljs-comment">一次最多往 byte[] 数组中读取 b.length 个字节</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// a b c d e f</span><br><br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br><span class="hljs-comment">// 此方法返回的是读取到的字节数量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">readCount</span> <span class="hljs-operator">=</span> fis.read(bytes);<br>System.out.println(readCount);<span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 数组转换成 String 输出</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">// a b c d</span><br><br>readCount = fis.read(bytes);<br>System.out.println(readCount);<span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 应该是读了多少个转多少个</span><br><span class="hljs-comment">//System.out.println(new String(bytes));// e f c d</span><br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, readCount));<span class="hljs-comment">// e f</span><br><br>System.out.println(fis.read(bytes));<span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure><p>最终版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br><span class="hljs-type">int</span> readCount;<br><br><span class="hljs-keyword">try</span> &#123;<br>    fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;chapter23/src/io/github/wataaaame/javase/io/test.txt&quot;</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    while (true) &#123;</span><br><span class="hljs-comment">        // 按照数组容量读取字节</span><br><span class="hljs-comment">        readCount = fis.read(bytes);</span><br><span class="hljs-comment">        // 如果无数据则退出</span><br><span class="hljs-comment">        if (readCount == -1)</span><br><span class="hljs-comment">            break;</span><br><span class="hljs-comment">        // 如果有数据则按读取量转换为数组输出</span><br><span class="hljs-comment">        System.out.print(new String(bytes, 0, readCount));// a b c d e f</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">while</span> ((readCount = fis.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>        System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span>, readCount));<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fis.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他常用方法：</p><ol><li><p>int available()</p><p>返回流中未读到的剩余字节数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// a b c d e f</span><br>fis.read();<br>System.out.println(fis.available());<span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><ul><li>可以直接通过该方法指定 byte[] 数组长度（不适合大文件，byte[] 数组不能太大）</li></ul></li><li><p>long skip(long n)</p><p>跳过 n 个字节不读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// a b c d e f</span><br>fis.skip(<span class="hljs-number">3</span>);<br>System.out.println(fis.read);<span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>java.io.FileOutputStream</strong></p><p>文件字节输出流，负责写</p><ul><li>输出路径文件不存在时会自动创建，若存在则自动追加，每次执行会<strong>清空源文件再重新写入</strong></li><li>追加写入只需在构造方法中路径之后加上 <code>true</code> 即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">86</span>, <span class="hljs-number">65</span>, <span class="hljs-number">89</span>&#125;;<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 追加写入：new FileOutputStream(&quot;path&quot;, true);</span><br>    fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;chapter23/src/io/github/wataaaame/javase/io/Output&quot;</span>);<br>    <span class="hljs-comment">// 将 byte[] 数组全部写出</span><br>    <span class="hljs-comment">// fos.write(byte[] b);</span><br>    <span class="hljs-comment">// 将 byte[] 数组全部写出</span><br>    <span class="hljs-comment">// fos.write(byte[] b, int off, int len);</span><br>    fos.write(bytes);<br><br>    <span class="hljs-comment">// 文件写完需要刷新</span><br>    fos.flush();<br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>可将 String 字符串，通过 <code>.getBytes()</code> 方法转换为 byte[] 数组传入输出流进行写入操作</p><p>通过 FileInputStream 与 FileOutputStream 流实现文件的拷贝：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.io;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 一次拷贝 10B</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-comment">// 每次读取计数</span><br>        <span class="hljs-type">int</span> readCount;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;chapter23/src/io/github/wataaaame/javase/io/Output&quot;</span>);<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;Z:/CopyTest&quot;</span>);<br><br>            <span class="hljs-comment">// 读多少，写多少</span><br>            <span class="hljs-keyword">while</span> ((readCount = fis.read(bytes)) != -<span class="hljs-number">1</span>)<br>                fos.write(bytes, <span class="hljs-number">0</span>, readCount);<br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 分别进行 try/catch，避免第一个抛出异常后第二个无法执行</span><br>            <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>java.io.FileReader</p><p>文件字符输入流，只能读取普通文本</p><p>通过 char[] 数组读取</p></li><li><p>java.io.FileWriter</p><p>文件字符输出流，只能输出普通文本</p><p>支持直接写入字符串</p></li></ol><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>转换流（将字节流转换成字符流）</p><ol><li><p>java.io.InputStreamReader</p><p>将 InputStream 输入字节流转换为 Reader 字符流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(fis);<br></code></pre></td></tr></table></figure></li><li><p>java.io.OutputStreamWriter</p><p>将 OutputStream 输出字节流转换为 Writer 字符流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OutputStreamReader</span> <span class="hljs-variable">osr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamReader</span>(fos);<br></code></pre></td></tr></table></figure></li></ol><h3 id="Buffered"><a href="#Buffered" class="headerlink" title="Buffered"></a>Buffered</h3><p>缓冲流</p><p>自带缓冲区的字符缓冲流，不需要指定数组</p><ol><li><p>java.io.BufferedReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">FileReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;chapter23/src/io/github/wataaaame/javase/io/test.txt&quot;</span>);<br>    <span class="hljs-comment">// 当一个流的构造方法中需要一个流的时候，被传进来的流叫做：节点流</span><br>    <span class="hljs-comment">// 外部负责包装的流叫做：包装流/处理流</span><br>    <span class="hljs-comment">// new BufferedReader(Reader in) 构造方法只能传递字符流</span><br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(reader);<br><br>    <span class="hljs-comment">// 该方法支持读取一行，读到末尾时返回 null</span><br>    <span class="hljs-comment">// 行尾不会自带换行符</span><br>    String s;<br>    <span class="hljs-keyword">while</span> ((s = br.readLine()) != <span class="hljs-literal">null</span>)<br>        System.out.println(s);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        abcdef</span><br><span class="hljs-comment">        ghijkl</span><br><span class="hljs-comment">        mnopqr</span><br><span class="hljs-comment">        stuvwx</span><br><span class="hljs-comment">        yzvvvv</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// 对于包装流，只需要关闭最外层流，里面的节点流会自动关闭</span><br>    br.close();<br>&#125;<br></code></pre></td></tr></table></figure><p> 将字节流通过转换流转换为字符流，再变成缓冲流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 字节流</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;chapter23/src/io/github/wataaaame/javase/io/test.txt&quot;</span>);<br><br>    <span class="hljs-comment">// 通过转换流转换为字符流</span><br>    <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(fis);<br><br>    <span class="hljs-comment">// 构造方法只能传递字符流</span><br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br><br>    <span class="hljs-comment">// 合并</span><br>    <span class="hljs-comment">// BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(&quot;path&quot;)));</span><br><br>    <span class="hljs-comment">// 读取一整行</span><br>    String line;<br>    <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>)<br>        System.out.println(line);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        abcdef</span><br><span class="hljs-comment">        ghijkl</span><br><span class="hljs-comment">        mnopqr</span><br><span class="hljs-comment">        stuvwx</span><br><span class="hljs-comment">        yzvvvv</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">// 关闭最外层流</span><br>    br.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>java.io.BufferedWriter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 合并字节输出流、字节输出流转字符输出流、字符输出流</span><br>    <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;test&quot;</span>)));<br>    <span class="hljs-comment">// 写入文档</span><br>    bw.write(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    bw.write(<span class="hljs-string">&quot;\n&quot;</span>);<br>    bw.write(<span class="hljs-string">&quot;World&quot;</span>);<br>    <span class="hljs-comment">// 记得刷新</span><br>    bw.flush();<br>    <span class="hljs-comment">// 记得关闭</span><br>    bw.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>java.io.BufferedInputStream</p></li><li><p>java.io.BufferedOutputStream</p></li></ol><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>数据流</p><p>将数据连同数据类型写入文件（非普通文档，无法用记事本打开）</p><ol><li><p>java.io.DataInputStream</p><p>读取 DataOutputStream 的文件时需提前知道写入的顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;output&quot;</span>));<br><br><span class="hljs-comment">// 开始读</span><br>System.out.println(dis.readByte());<br>System.out.println(dis.readShort());<br>System.out.println(dis.readInt());<br>System.out.println(dis.readLong());<br>System.out.println(dis.readFloat());<br>System.out.println(dis.readDouble());<br>System.out.println(dis.readBoolean());<br>System.out.println(dis.readChar());<br><br><span class="hljs-comment">// 关闭流</span><br>dis.close();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    99</span><br><span class="hljs-comment">    1</span><br><span class="hljs-comment">    2</span><br><span class="hljs-comment">    3</span><br><span class="hljs-comment">    4.4</span><br><span class="hljs-comment">    5.5</span><br><span class="hljs-comment">    false</span><br><span class="hljs-comment">    b</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>java.io.DataOutputStream</p><p>DataOutputStream 写的文件，只能通过 DataInputStream 去读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建数据专属的字节输出流</span><br><span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;output&quot;</span>));<br><br><span class="hljs-comment">// 创建数据</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>;<br><span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">4.4F</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">5.5</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">bl</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;b&#x27;</span>;<br><br><span class="hljs-comment">// 写入</span><br>dos.writeByte(b);<br>dos.writeShort(s);<br>dos.writeInt(i);<br>dos.writeLong(l);<br>dos.writeFloat(f);<br>dos.writeDouble(d);<br>dos.writeBoolean(bl);<br>dos.writeChar(c);<br><br><span class="hljs-comment">// 刷新流</span><br>dos.flush();<br><br><span class="hljs-comment">// 关闭流</span><br>dos.close();<br></code></pre></td></tr></table></figure></li></ol><h3 id="Print"><a href="#Print" class="headerlink" title="Print"></a>Print</h3><p>标准输出流</p><ol><li><p>java.io.PrintWriter</p></li><li><p><strong>java.io.PrintStream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 联合起来写</span><br>System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br><br><span class="hljs-comment">// 分开写</span><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> System.out;<br>ps.println(<span class="hljs-string">&quot;Hello vv&quot;</span>);<br>ps.println(<span class="hljs-string">&quot;Hello ee&quot;</span>);<br><br><span class="hljs-comment">// 标准输出流不需要手动关闭</span><br></code></pre></td></tr></table></figure><p>标准输出流可以改变输出方向：<code>System.setOut</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 设置节点流</span><br><span class="hljs-type">PrintStream</span> <span class="hljs-variable">psf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;log&quot;</span>));<br><span class="hljs-comment">// 更改输出方向</span><br><span class="hljs-comment">// 可设置为 System.out 更改回</span><br>System.setOut(psf);<br>System.out.println(<span class="hljs-string">&quot;hello vv&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;hello ee&quot;</span>);<br></code></pre></td></tr></table></figure><p>记录日志工具：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 记录日志工具，先将标准输出流导向 log 文件</span><br><span class="hljs-comment">// 再记录当前日期以及传来的日志文本</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String msg)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 设置一根指向一个日志文件的管子</span><br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;chapter23/src/io/github/wataaaame/javase/io/logger/log&quot;</span>, <span class="hljs-literal">true</span>));<br>        <span class="hljs-comment">// 改变输出器方向为该管</span><br>        System.setOut(ps);<br>        <span class="hljs-comment">// 可以理解为：第一步创建一根指向某文件的新管子，第二步将输出口指向该管子入口</span><br><br>        <span class="hljs-comment">// 获取当前日期</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">nowDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        <span class="hljs-comment">// 更改日期格式</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss sss&quot;</span>);<br>        <span class="hljs-comment">// 将更改格式后的日期转换为 String 类型</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strNowDate</span> <span class="hljs-operator">=</span> sdf.format(nowDate);<br><br>        <span class="hljs-comment">// 写入日志</span><br>        System.out.println(strNowDate + <span class="hljs-string">&quot;: &quot;</span> + msg);<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>对象流</p><ol><li><p><strong>java.io.ObjectInputStream</strong></p><p><strong>Deserialize 反序列化</strong></p><p>将硬盘数据恢复为 Java 对象的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.io;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInputStreamTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;student&quot;</span>));<br><br>        System.out.println(ois.readObject());<br>        <span class="hljs-comment">// Student&#123;no=101, name=&#x27;vv&#x27;&#125;</span><br><br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反序列化 ArrayList 集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInputTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;student&quot;</span>));<br><br><span class="hljs-comment">//        输出为 Object 集合，底层属于 List，需要强转为 List</span><br>System.out.println(ois.readObject() <span class="hljs-keyword">instanceof</span> List);<span class="hljs-comment">// true</span><br>        List&lt;Student&gt; studentList = (List&lt;Student&gt;)ois.readObject();<br>        <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>            System.out.println(student);<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        Student&#123;no=101, name=&#x27;vv&#x27;&#125;</span><br><span class="hljs-comment">            Student&#123;no=102, name=&#x27;ee&#x27;&#125;</span><br><span class="hljs-comment">            Student&#123;no=103, name=&#x27;xx&#x27;&#125;</span><br><span class="hljs-comment">            Student&#123;no=104, name=&#x27;yy&#x27;&#125;</span><br><span class="hljs-comment">        */</span><br><br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>java.io.ObjectOutputStream</strong></p><p><strong>Serialize 序列化</strong></p><p>将 Java 对象的状态保存下来的过程（对象拆成碎片从内存一块块传输到硬盘）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.io;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectOutputStreamTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">101</span>, <span class="hljs-string">&quot;vv&quot;</span>);<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;student&quot;</span>));<br><br>        oos.writeObject(s1);<br><br>        oos.flush();<br>        oos.close();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>存多个对象需序列化 ArrayList 集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectOutputTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;Student&gt; studentList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;student&quot;</span>));<br><br>        studentList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">101</span>, <span class="hljs-string">&quot;vv&quot;</span>));<br>        studentList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">102</span>, <span class="hljs-string">&quot;ee&quot;</span>));<br>        studentList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">103</span>, <span class="hljs-string">&quot;xx&quot;</span>));<br>        studentList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">104</span>, <span class="hljs-string">&quot;yy&quot;</span>));<br><br>        oos.writeObject(studentList);<br><br>        oos.flush();<br>        oos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="序列化版本号"><a href="#序列化版本号" class="headerlink" title="序列化版本号"></a>序列化版本号</h4><p>参与序列化的对象必须实现 <code>Serializable</code> 接口（标志接口，起到标识作用）</p><p>Java 虚拟机看到 Serializable 接口之后，会自动生成一个序列化版本号，用于区分相同类名的类</p><p>区分方式：</p><ol><li>首先通过类名比对，如果类名不一样，肯定不是同一个类</li><li>如果类名一样，靠实现序列化接口生成的版本号区分</li></ol><p>缺陷：一旦代码确定后不能进行后续的修改</p><p>结论：凡是一个类实现了 <code>Serializable</code> 接口，建议给该类提供一个固定不变的序列化版本号：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br></code></pre></td></tr></table></figure><h4 id="transient-关键字"><a href="#transient-关键字" class="headerlink" title="transient 关键字"></a>transient 关键字</h4><p>transient 关键字表示游离的，可以将某个属性不参与序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> String name;<span class="hljs-comment">// 不参与序列化</span><br>    <span class="hljs-comment">// Student&#123;no=101, name=&#x27;null&#x27;&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h1><p>File 对象代表文件和目录路径的抽象表示形式，可能是目录，也可能是文件</p><p>File 类不能完成读和写</p><h2 id="File-中常用的方法"><a href="#File-中常用的方法" class="headerlink" title="File 中常用的方法"></a>File 中常用的方法</h2><p><code>java.io.File</code></p><p>创建 File 对象（构造方法传入目录）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;Z:/vv&quot;</span>);<br></code></pre></td></tr></table></figure><ol><li><p>boolean exists()</p><p>判断该文件&#x2F;目录是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(f1.exists());<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p>boolean createNewFile()  </p><p>当且仅当该名称文件不存在时，创建一个由该抽象路径名命名的新空文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">f1.createNewFile();<br></code></pre></td></tr></table></figure></li><li><p>boolean mkdir()</p><p>创建由此抽象路径名命名的目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">f1.mkdir();<br></code></pre></td></tr></table></figure></li><li><p>boolean mkdirs()</p><p>以多重目录形式新建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;Z:/a/b/c&quot;</span>);<br>f2.mkdirs();<br></code></pre></td></tr></table></figure></li><li><p>String getParent()</p><p>获取当前文件的父路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;Z:\\Java\\src\\java.base\\java\\io\\File.java&quot;</span>);<br>System.out.println(f3.getParent());<br><span class="hljs-comment">// Z:\Java\src\java.base\java\io</span><br></code></pre></td></tr></table></figure></li><li><p>File getParentFile()</p><p>返回此抽象路径名的 File 对象</p><ol><li><p>public String getAbsolutePath()</p><p>返回此 File 对象抽象路径名的绝对路径名字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;Z:\\\\Java\\\\src\\\\java.base\\\\java\\\\io\\\\File.java&quot;</span>);<br><span class="hljs-type">File</span> <span class="hljs-variable">parentFile</span> <span class="hljs-operator">=</span> f4.getParentFile();<br>System.out.println(parentFile.getAbsolutePath());<br></code></pre></td></tr></table></figure></li></ol></li><li><p>String getName()</p><p>返回由此抽象路径名表示的文件或目录的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(f4.getName());<span class="hljs-comment">// File.java</span><br></code></pre></td></tr></table></figure></li><li><p>boolean isDirectory()</p><p>判断是否为目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(f4.isDirectory());<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>boolean isFile()</p><p>判断是否为文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(f4.isFile());<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>long lastModified()</p><p>获取最后一次修改的时间（1970年到现在的总毫秒数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(f4.lastModified());<span class="hljs-comment">// 1562023764000</span><br></code></pre></td></tr></table></figure><p>将毫秒数转换成日期：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(f4.lastModified());<br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>System.out.println(sdf.format(date));<span class="hljs-comment">// 2019-07-02 07:29:24</span><br></code></pre></td></tr></table></figure></li><li><p>long length()</p><p>获取文件大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(f4.length());<span class="hljs-comment">// 98503</span><br></code></pre></td></tr></table></figure></li><li><p>File[] listFiles()</p><p>获取当前目录下所有子文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">File[] files = f4.listFiles();<br><span class="hljs-keyword">for</span> (File file : files)<br>    System.out.println(file.getAbsoluteFile());<br></code></pre></td></tr></table></figure></li></ol><h2 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h2><p>拷贝目录所有文件到另一个目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.io.copydirectory;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyDirectory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyDir</span><span class="hljs-params">(File srcDir, File destDir)</span> &#123;<br>        <span class="hljs-comment">// 如果 file 是一个文件，则终止递归，并拷贝到目标目录</span><br>        <span class="hljs-keyword">if</span> (srcDir.isFile()) &#123;<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcDir);<br><br>                <span class="hljs-type">String</span> <span class="hljs-variable">strDestDir</span> <span class="hljs-operator">=</span> destDir + <span class="hljs-string">&quot;\\&quot;</span> + srcDir.getAbsolutePath().substring(<span class="hljs-number">3</span>);<br>                fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(strDestDir);<br><br>                <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-type">int</span> readCount;<br>                <span class="hljs-keyword">while</span> ((readCount = fis.read(bytes)) != -<span class="hljs-number">1</span>)<br>                    fos.write(bytes, <span class="hljs-number">0</span>, readCount);<br><br>                fos.flush();<br>            &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>) &#123;<br>                        fis.close();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>) &#123;<br>                        fos.close();<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 获取源文件当前路径所有 file</span><br>        File[] files = srcDir.listFiles();<br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>            <span class="hljs-comment">// 如果 file 是一个文件夹，则在目标目录新建对应文件夹</span><br>            <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">strSrcDir</span> <span class="hljs-operator">=</span> file.getAbsolutePath();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">strDestDir</span> <span class="hljs-operator">=</span> destDir + <span class="hljs-string">&quot;\\&quot;</span> + strSrcDir.substring(<span class="hljs-number">3</span>);<br>                <span class="hljs-type">File</span> <span class="hljs-variable">newFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(strDestDir);<br>                newFile.mkdirs();<br>            &#125;<br>            <span class="hljs-comment">// 递归，将当前 file 再通过 copyDir 方法遍历</span><br>            copyDir(file, destDir);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="IO-amp-Properties"><a href="#IO-amp-Properties" class="headerlink" title="IO &amp; Properties"></a>IO &amp; Properties</h1><p>IO流：文件的读和写</p><p>Properties：是一个 Map 集合，key 和 value 都是 String 类型</p><p>通过 <code>void load(InputStream inStream)</code> 方法，从输入字节流读取属性列表（键和元素对）到 Properties 集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 将 userinfo 中的数据加载到 Properties 对象中</span><br>    <span class="hljs-comment">// 新建一个输入流对象</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;chapter23/src/io/github/wataaaame/javase/io/properties/userinfo&quot;</span>);<br><br>    <span class="hljs-comment">// 新建一个 Map 集合</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>    <span class="hljs-comment">// 调用 Properties 对象的 load 方法将文件中的数据加载到 Map 集合中</span><br>    <span class="hljs-comment">// 文件中的数据顺着管道加载到 Map 集合中，其中等号左边做 key，右边做 value</span><br>    p.load(fis);<br><br>    System.out.println(p.getProperty(<span class="hljs-string">&quot;username&quot;</span>));<br>    System.out.println(p.getProperty(<span class="hljs-string">&quot;password&quot;</span>));<br>    <br>    fis.close();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>经常改变的信息可以放在文件当中，可使程序动态修改信息而代码无需改动或编译</p><p>类似于以上机制的文件称为配置文件，且内容格式为：key&#x3D;value 形式的叫做属性配置文件</p><p>Java 规范中要求：属性配置文件建议以 .properties 结尾，但这不是必须的（Properties 类便是专门存放属性配置文件的一个类）</p><p>属性配置文件重复时，value 会自动覆盖</p><p>建议：等号之间不要有空格；不用冒号代替等号</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO Stream</tag>
      
      <tag>File</tag>
      
      <tag>IO &amp; Properties</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note08 Set</title>
    <link href="/2022/06/29/JavaSE%20-%20Note08%20Set/"/>
    <url>/2022/06/29/JavaSE%20-%20Note08%20Set/</url>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p><code>java.util.*</code></p><p>集合实际上就是一种容器，可以容纳其他类型的数据</p><ul><li>集合不能直接存储基本数据类型（需装箱），也不能直接存储 Java 对象，存储引用数据类型</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li><p>单个方式</p><p>超级父接口：<code>java.util.Collection</code></p><p><img src="/images/image-java/note08-01-Collect%E9%9B%86%E5%90%88%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="Collect 集合继承结构图"></p></li><li><p>键值对方式</p><p>超级父接口：<code>java.util.Map</code></p><p><img src="/images/image-java/note08-02-Map%E9%9B%86%E5%90%88%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="Map 集合继承结构图"></p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="所有实现类"><a href="#所有实现类" class="headerlink" title="所有实现类"></a>所有实现类</h4><table><thead><tr><th>实现类</th><th>底层</th></tr></thead><tbody><tr><td>ArrayList</td><td>数组</td></tr><tr><td>LinkedList</td><td>双向链表</td></tr><tr><td>Vector</td><td>数组，线程安全，效率较低，使用较少</td></tr><tr><td>HashSet</td><td>HashMap，放到 HashSet 集合中的元素等同于放到 HashMap 集合 key 部分</td></tr><tr><td>TreeSet</td><td>TreeMap，放到 TreeMap 集合中的元素等同于放到 TreeMap 集合 key 部分</td></tr><tr><td>HashMap</td><td>哈希表</td></tr><tr><td>Hashtable</td><td>哈希表，线程安全，效率较低，使用较少</td></tr><tr><td>Properties</td><td>哈希表，线程安全，key 和 value 只能存储 String</td></tr><tr><td>TreeMap</td><td>二叉树，key 可自动按照大小排序</td></tr></tbody></table><h4 id="集合存储特点"><a href="#集合存储特点" class="headerlink" title="集合存储特点"></a>集合存储特点</h4><p>List：有序可重复</p><ul><li>有序：存入与取出顺序相同，每个元素都有下标</li><li>可重复：存储值可重复</li></ul><p>Set（Map）：无序不可重复</p><ul><li>无序：存入与取出顺序不一定相同，Set 集合中也没有下标</li><li>不可重复：存储值不可重复</li></ul><p>SortedSet（SortedMap）：无序不可重复，但集合中的元素可排序</p><ul><li>可排序：可以按照大小顺序排列</li></ul><blockquote><p>Map 集合的 key，就是一个 Set 集合</p><p>往 Set 集合中放数据，实际上放到了 Map 集合的 key 部分</p></blockquote><h2 id="Collection-集合"><a href="#Collection-集合" class="headerlink" title="Collection 集合"></a>Collection 集合</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p><code>java.util.Collection</code></p><p>创建 Collection 类型的集合（多态）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Collection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br></code></pre></td></tr></table></figure><ol><li><p>boolean add(Object e)</p><p>添加元素到集合末尾（支持<strong>自动装箱</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">c.add(<span class="hljs-number">1200</span>);<span class="hljs-comment">// 自动装箱</span><br>c.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br></code></pre></td></tr></table></figure></li><li><p>int size()</p><p>返回集合中的元素个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(c.size());<span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure></li><li><p>void clear()</p><p>清空集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">c.clean;<br>System.out.println(c.size());<span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure></li><li><p>boolean contains(Object o)</p><p>判断当前集合中是否包含元素 o</p><ul><li>放在集合中的元素，需重写 equals() 方法，否则默认使用 Object 中的 equals()，仅比较内存地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">c.add(<span class="hljs-string">&quot;a&quot;</span>);<br>c.add(<span class="hljs-string">&quot;b&quot;</span>);<br>c.add(<span class="hljs-string">&quot;c&quot;</span>);<br>System.out.println(c.contains(<span class="hljs-string">&quot;a&quot;</span>));<span class="hljs-comment">// true</span><br>System.out.println(c.contains(<span class="hljs-string">&quot;d&quot;</span>));<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p>boolean remove(Object o)<br>删除集合中某个元素</p><ul><li>同样调用了 equals() 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">c.remove(<span class="hljs-string">&quot;c&quot;</span>);<br>System.out.println(c.size());<span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure></li><li><p>boolean isEmpty()</p><p>判断集合是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(c.isEmpty());<span class="hljs-comment">// false</span><br>c.clear();<br>System.out.println(c.isEmpty());<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p><em>Object[] toArray()</em></p><p>将集合转换为数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">c.add(<span class="hljs-string">&quot;a&quot;</span>);<br>c.add(<span class="hljs-string">&quot;b&quot;</span>);<br>c.add(<span class="hljs-string">&quot;c&quot;</span>);<br><br>Object[] o = c.toArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; o.length; i++) &#123;<br>    System.out.print(o[i] + <span class="hljs-string">&quot; &quot;</span>);<span class="hljs-comment">// a b c</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="集合遍历-x2F-迭代器"><a href="#集合遍历-x2F-迭代器" class="headerlink" title="*集合遍历&#x2F;迭代器"></a>*集合遍历&#x2F;迭代器</h3><p>用于集合迭代</p><p>以下方法所有 Collection 通用，在 Map 中不能使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Collection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>c.add(<span class="hljs-string">&quot;a&quot;</span>);<br>c.add(<span class="hljs-string">&quot;b&quot;</span>);<br>c.add(<span class="hljs-number">100</span>);<br>c.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br></code></pre></td></tr></table></figure><p>对集合进行迭代</p><ol><li><p>获取集合对象的迭代器对象 Iterator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> c.iterator();<br></code></pre></td></tr></table></figure></li><li><p>通过以上获取的迭代器对象开始迭代&#x2F;遍历集合</p><p>Interator 迭代器中的方法：</p><ol><li><p>boolean hasNext()</p><p>如果仍有元素可以迭代，则返回 true</p></li><li><p>Object next()</p><p>返回迭代的下一个元素</p><blockquote><p>存入什么类型，取出什么类型，打印转换为 String</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>System.out.println(it.next());<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    a</span><br><span class="hljs-comment">    b</span><br><span class="hljs-comment">    100</span><br><span class="hljs-comment">    java.lang.Object@1489e44c</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>集合结构只要发生变化，迭代器必须<strong>重新获取</strong>，所以应使用迭代器删除方法</li></ul></li><li><p>default void remove()</p><p>从底层集合中删除此迭代器返回的最后一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> c.iterator();<br>it.remove();<br></code></pre></td></tr></table></figure></li></ol><h3 id="List-接口特有方法"><a href="#List-接口特有方法" class="headerlink" title="List 接口特有方法"></a>List 接口特有方法</h3><p>创建 List 类型的集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br></code></pre></td></tr></table></figure><ol><li><p>void add(int index, E element)</p><p>在列表 index 处插入元素 element</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">list.add(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;v&quot;</span>);<br><span class="hljs-comment">// a v b c d</span><br></code></pre></td></tr></table></figure><blockquote><p>使用不多，数组指定位置插入效率较低</p></blockquote></li><li><p>Object set(int index, Object element)</p><p>修改 index 处元素为 element</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">list.set(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;V&quot;</span>);<span class="hljs-comment">// a V b c d</span><br></code></pre></td></tr></table></figure></li><li><p>E get(int index)</p><p>根据下标获取元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(list.get(<span class="hljs-number">1</span>));<span class="hljs-comment">// v</span><br></code></pre></td></tr></table></figure><p>可以借此特有方式遍历集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>    System.out.println(list.get(i));<br>&#125;<span class="hljs-comment">// a v b c d</span><br></code></pre></td></tr></table></figure></li><li><p>int indexOf(Object o)</p><p>获取指定对象第一次出现处的索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(list.indexOf(<span class="hljs-string">&quot;v&quot;</span>));<span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></li><li><p>int lastIndexOf(Object o)</p><p>获取指定对象最后一次出现处的索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// a v b c d v</span><br>System.out.println(list.lastIndexOf(<span class="hljs-string">&quot;v&quot;</span>));<span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure></li><li><p>E remove(int index)</p><p>删除下标为 index 的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">list.remove(<span class="hljs-number">5</span>);<span class="hljs-comment">// a v b c d</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList 集合底层是 Object 类型的数组</p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<span class="hljs-comment">// 初始化容量为10</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">20</span>);<span class="hljs-comment">// 指定初始化容量为20</span><br><span class="hljs-type">Collection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(c);<span class="hljs-comment">// 将 HashSet 转换为 ArrayList</span><br></code></pre></td></tr></table></figure><blockquote><p>构造一个初始容量为10的空列表，先创建一个长度为0的数组，当添加第一个元素时初始化容量</p></blockquote><p>ArrayList 扩容是<strong>原容量的1.5倍</strong>（底层是数组，优化则尽可能少的扩容）</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>是一个双向列表，没有初始容量</p><p>随机增删效率较高，检索效率较低</p><p>在空间存储上，内存地址不连续</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>底层是一个数组</p><p>初始化容量为10，扩容之后是<strong>原容量的2倍</strong></p><p>所有方法线程安全，效率较低，使用较少</p><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><p><code>java.util.Collections</code></p><p>Collection 工具类</p><ol><li><p>Collections.synchronizedList(list)</p><p>将非线程安全的 ArrayList 转换为线程安全的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Collections.synchronizedList(ArrayList);<br></code></pre></td></tr></table></figure></li><li><p>Collections.sort(list)</p><p>排序（同样需实现 Comparable 接口）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Collections.sort(list)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>同样支持比较器</p><p>Collections.sort(list, Comparator())</p></li></ol><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>数据类型参数化</p><h3 id="JDK-5-0"><a href="#JDK-5-0" class="headerlink" title="JDK 5.0"></a>JDK 5.0</h3><p>新特性：泛型（Generic）</p><p>使用泛型 <code>List&lt;E&gt;</code> 之后，表示 List 集合中只允许存储 E 类型的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;E&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;E&gt;();<br></code></pre></td></tr></table></figure><p>迭代器也支持添加 <code>Iterator&lt;E&gt;</code>，返回的都是 E 类型的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator&lt;E&gt; it = c.iterator();<br></code></pre></td></tr></table></figure><p>这样在迭代器迭代时将返回 E 类型数据而不是默认的 Object</p><ul><li>集合中元素数据更加统一，不需要大量的“向下转型”</li><li>泛型属于编译阶段特性</li></ul><p>缺点：</p><ul><li>集合中存储元素缺乏多样性</li></ul><h3 id="JDK-8-0"><a href="#JDK-8-0" class="headerlink" title="JDK 8.0"></a>JDK 8.0</h3><p>引入了自动类型推断机制（钻石表达式），从而 new 对象时不用指定泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;E&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3><p>在类的名称后使用 <code>&lt;名称随意&gt;</code> 来标识泛型，类体中使用该标识符运用所选泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 一般使用 &lt;E&gt;（Element）或 &lt;T&gt;（Type）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericTest02</span>&lt;E&gt; &#123;<br>    <span class="hljs-comment">// 此处的 void 也可使用泛型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">(E e)</span> &#123;<br>        System.out.println(e);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建引用时选择泛型具体类型</span><br>        GenericTest02&lt;String&gt; gt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericTest02</span>&lt;&gt;();<br>        gt.doSome(<span class="hljs-string">&quot;E is String&quot;</span>);<span class="hljs-comment">// E is String</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用了泛型，创建对象时却未标识具体类型，则默认为 Object 类型</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>JDK 5.0 新特性，新增 foreach（增强 for 循环）</p><p><code>for (A B : C)</code></p><p>A：元素类型（数组&#x2F;集合&#x2F;泛型中的类型）</p><p>B：变量名（集合中的元素）</p><p>C：数组&#x2F;集合&#x2F;泛型名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (Integer i : list) &#123;<br>    System.out.println(i);<span class="hljs-comment">// 1 2 3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>缺点：没有下标</p><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h2><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>无序不可重复，集合是 HashMap 的 key 部分</p><p>若传入纯数字，则 key 部分会自动按大小排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 4 3 2 1</span><br>Set&lt;String&gt; str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (String s : str) &#123;<br>    System.out.println(s);<span class="hljs-comment">// 1 2 3 4</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>同 HashMap，初始化容量是16，加载因子是0.75，扩容后容量是原容量的两倍</li></ul><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>底层实际是一个 TreeMap（最底层是二叉树），集合是 TreeMap 的 key 部分</p><p>无序不可重复，但存储元素可自动按大小顺序排序（可排序集合）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// D C B A</span><br>Set&lt;String&gt; str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (String s : str) &#123;<br>    System.out.println(s);<span class="hljs-comment">// A B C D</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自动排序"><a href="#自动排序" class="headerlink" title="自动排序"></a>自动排序</h4><ol><li>默认无法对自定义类型排序，需实现 <code>java.lang.Comparable</code> 接口（equals 可以不必重写），并重写 <code>Comparable()</code> 方法。示例如下：</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Customer&gt; &#123;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Customer c)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        if (this.age == c.age) &#123;</span><br><span class="hljs-comment">        return 0;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        else if (this.age &gt; c.age) &#123;</span><br><span class="hljs-comment">        return 1;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        else</span><br><span class="hljs-comment">        return -1;</span><br><span class="hljs-comment">        */</span><br>        <br>        <span class="hljs-comment">// 可一行实现</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - c.age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>使用 <code>java.util.Comparator</code> 比较器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;E&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(E e1, E e2)</span> &#123;<br>        <span class="hljs-keyword">return</span> e1.age - e2.age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>比较器需要通过构造方法传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet&lt;E&gt; es = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyComparator</span>());<br></code></pre></td></tr></table></figure><p>比较器支持匿名内部类的方式（没有名字，直接 new 接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet&lt;E&gt; es = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyComparator</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(E e1, E e2)</span> &#123;<br>        <span class="hljs-keyword">return</span> e1.age - e2.age;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ol><p>比较规则固定时，建议实现 Comparable 接口</p><p>比较规则有多个，并且需要频繁切换时，建议使用 Comparator 接口</p><h2 id="Map-集合"><a href="#Map-集合" class="headerlink" title="Map 集合"></a>Map 集合</h2><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><p><code>java.util.Map</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><ol><li><p>V put(K key, V value)</p><p>向 Map 集合中添加键值对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">map.put(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;vv&quot;</span>);<span class="hljs-comment">// 自动装箱</span><br>map.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;ee&quot;</span>);<br>map.put(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;xx&quot;</span>);<br>map.put(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;yy&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>V get(Object key)</p><p>通过 key 获取 value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(map.get(<span class="hljs-number">2</span>));<span class="hljs-comment">// ee</span><br></code></pre></td></tr></table></figure></li><li><p>void clear()</p><p>清空 Map 集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">map.clear();<br>System.out.println(map.size());<span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure></li><li><p>boolean containsKey(Object key)</p><p>判断 Map 中是否包含某个 key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">System.out.println(map.containsKey(<span class="hljs-number">1</span>));<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>boolean containsValue(Object value)</p><p>判断 Map 中是否包含某个 value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(map.containsValue(<span class="hljs-string">&quot;e&quot;</span>));<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><blockquote><p>contains 底层调用 equalse() 方法</p></blockquote></li><li><p>boolean isEmpty()</p><p>判断 Map 集合中元素个数是否为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(map.isEmpty());<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>Set<K> keySet()</p><p>获取 Map 集合中所有的 key（所有的键是一个 set 集合）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Integer&gt; keys = map.keySet();<br></code></pre></td></tr></table></figure></li><li><p>V remove(Object key)</p><p>通过 key 删除键值对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">map.remove(<span class="hljs-number">3</span>);<br>System.out.println(map.size());<br></code></pre></td></tr></table></figure></li><li><p>int size()</p><p>获取 Map 集合中键值对的个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(map.size());<span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure></li><li><p>Collection<V> values()</p><p>获取 Map 集合中所有的 value，返回一个 Collection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; values = map.values();<br><span class="hljs-keyword">for</span> (String s : values) &#123;<br>    System.out.println(s);<span class="hljs-comment">// vv ee yy</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</p><p>将 Map 集合转换为 Set 集合（源码中元素存储为一个 <strong>Node 类型</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Map.Entry&lt;Integer, String&gt;&gt; set = map.entryMap();<br></code></pre></td></tr></table></figure><blockquote><p><code>Map.Entry</code> 是一种元素类型（1&#x3D;vv），这种类型是 Map 中的静态内部类</p><p>静态内部类示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.map;<br><br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticInnerClassTest01</span> &#123;<br>    <span class="hljs-comment">// 静态内部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span> &#123;<br>        <span class="hljs-comment">// 静态方法 m1</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;m1&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 静态实例方法 m2</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;m2&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        StaticInnerClassTest01.InnerClass.m1();<br><br>        StaticInnerClassTest01.<span class="hljs-type">InnerClass</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticInnerClassTest01</span>.InnerClass();<br>        sc.m2();<br><br>        <span class="hljs-comment">// set 集合中示例泛型，类见上</span><br>        Set&lt;StaticInnerClassTest01.InnerClass&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>        <span class="hljs-comment">// Map 集合中示例泛型，类见下</span><br>        Set&lt;MyMap.MyEntry&lt;Integer, String&gt;&gt; set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMap</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyEntry</span>&lt;K, V&gt; &#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></blockquote></li></ol><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ol><li><p>keySet() 方法获取所有的 Key，通过 Key 遍历键值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Integer&gt; keys = map.keySet();<br><br><span class="hljs-comment">// 使用迭代器遍历 keys</span><br>Iterator&lt;Integer&gt; it = keys.iterator();<br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>    System.out.println(map.get(it.next()));<span class="hljs-comment">// vv ee xx yy</span><br>&#125;<br><br><span class="hljs-comment">// 使用 foreach 遍历 keys</span><br><span class="hljs-keyword">for</span> (Integer key : keys) &#123;<br>    System.out.println(map.get(key));<span class="hljs-comment">// vv ee xx yy</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将 Map 集合转换为 Set 集合，直接遍历 Set 集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Map.Entry&lt;Integer, String&gt;&gt; set = map.entrySet();<br><br><span class="hljs-comment">// 使用迭代器遍历</span><br>Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; it2 = set.iterator();<br><span class="hljs-keyword">while</span> (it2.hasNext()) &#123;<br>    <span class="hljs-comment">// Map.Entry&lt;Iteger, String&gt; node = it2.next();</span><br>    <span class="hljs-comment">// System.out.println(node.getKey() + &quot;=&quot; + node.getValue);</span><br>    System.out.println(it2.next());<span class="hljs-comment">// 1=vv 2=ee 3=xx 4=yy</span><br>&#125;<br><br><span class="hljs-comment">// *使用 foreach 遍历</span><br><span class="hljs-comment">// （效率高，适合大数据量）</span><br><span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, String&gt; node : set) &#123;<br>    <span class="hljs-comment">// System.out.println(node.getKey() + &quot;=&quot; + node.getValue);</span><br>    System.out.println(me);<span class="hljs-comment">// // 1=vv 2=ee 3=xx 4=yy</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>底层是 哈希表&#x2F;散列表 的数据结构</p><h4 id="哈希表-x2F-散列表"><a href="#哈希表-x2F-散列表" class="headerlink" title="哈希表&#x2F;散列表"></a>哈希表&#x2F;散列表</h4><p>一维数组，数组中每个元素是一个单向链表</p><p>数组和单向链表的结合体，充分发挥二者的特点</p><p>源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMap</span> &#123;<br><span class="hljs-comment">// HashMap 底层就是一个一维数组</span><br>    Node&lt;K, V&gt;[] table;<br>    <br>    <span class="hljs-comment">// 静态内部类 HashMap.Node</span><br>    <span class="hljs-keyword">static</span> vlass Node&lt;K, V&gt; &#123;<br>        <span class="hljs-comment">// 哈希值(key 的 hashCode() 方法的执行结果，hash 值通过哈希函数/算法转换为数组的下标)</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;<span class="hljs-comment">// 转换数组下标</span><br>        <span class="hljs-keyword">final</span> K key;<span class="hljs-comment">// 比较同一数组链表</span><br>        V value;<span class="hljs-comment">// 存储值</span><br>        Node&lt;K, V&gt; next<span class="hljs-comment">// 下一链表地址</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>同一个单向链表上</strong>，因数组下标一致，<strong>所有节点的 hash 相同</strong>，但 <strong>k 的 equals 方法一定不相同</strong></p></li><li><p>HashMap 集合的默认初始化容量是16（官方推荐<strong>2的倍数</strong>，也是提高 HashMap 集合的存取效率，以达到散列均匀所必需的），默认加载因子是0.75（当底层数组容量达到75%时开始扩容），扩容后容量是原容量的两倍</p></li><li><p>对于哈希表数据结构来说</p><p>如果 o1 和 o2 的 hash 值相同，一定放到同一个单向链表</p><p>如果不同，由于哈希算法结束后转换的数组下标也可能相同（取模运算），发生“哈希碰撞”</p></li></ul><h4 id="存取原理"><a href="#存取原理" class="headerlink" title="存取原理"></a>存取原理</h4><ol><li><p>map.put(k, v)</p><ol><li><p>先将 k、v 封装到 Node 对象中</p></li><li><p>底层调用 k 的 hashCode() 方法（Object 自带），得出 hash 值</p></li><li><p>通过哈希函数&#x2F;算法，将 hash 值转换为数组下标</p><p>若下标处无元素，便把 Node 添加到这个位置上；若下标处有元素，则将 k 与该下标对应的所有节点 k 进行 equals</p><p>若都返回 false，则添加至链表末尾；若返回 true，则将该节点覆盖</p></li></ol></li><li><p>map.get(k)</p><ol><li><p>先调用 k 的 hashCode() 方法，得出 hash 值</p></li><li><p>通过哈希算法转换成数组下标，通过数组下标快速定位</p><p>若下标处无元素，放回 null；若有，则将 k 与单向链表每一个 k 进行 equals<br>若全为 false，则返回 null；否则 get 返回结果为 true 的 value</p></li></ol></li></ol><h4 id="Key-特点"><a href="#Key-特点" class="headerlink" title="Key 特点"></a>Key 特点</h4><p>无序、不可重复</p><p>无序：不能保证挂在哪一个单向链表</p><p>不可重复：equals 方法保证 HashMap 集合的 Key 不可重复</p><ul><li><p>HashMap 集合中的 key 元素，会先后调用 hashCode() 与 equals() 方法，这两个方法都需要重写</p><p>由于 HashSet 本质就是 HashMap 集合 Key 部分，所以同样需要重写 hashCode() 与 equals() 方法</p></li></ul><blockquote><p>散列分布不均匀问题：假设所有 hashCode() 方法返回固定值，会导致哈希表变成纯单向列表；所有 hashCode() 方法返回不同值，会导致哈希表变成一维数组</p><p>key 与集合都允许为 null</p></blockquote><h4 id="重写-hashCode-与-equalse"><a href="#重写-hashCode-与-equalse" class="headerlink" title="重写 hashCode() 与 equalse()"></a>重写 hashCode() 与 equalse()</h4><p>放在 HashMap 集合 key 部分，以及放在 HashSet 集合中的元素，需要同时重写 hashCode() 方法与 equals() 方法</p><p>向 Map 集合中存取，都是先调用 key 的 hashCode 方法，再调用 equals 方法（数组下标上元素为 null 则 equals 都不执行）</p><p>如果一个类的 equals 方法重写，那么 hashCode 方法必须重写；且 equals 返回 true，hashCode 方法返回值必须相同</p><blockquote><p>IDEA 工具支持自动生成</p></blockquote><h4 id="JDK-8"><a href="#JDK-8" class="headerlink" title="JDK 8"></a>JDK 8</h4><p>在 JDK 8 后，若哈希表单向链表中元素超过8个，单向链表数据结构就会变成红黑树数据结构，当红黑树上的节点数量小于6时，会重新退回单向链表数据结构</p><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>底层为哈希表数据结构，线程安全，目前使用较少</p><ul><li>初始化容量为11，默认加载因子是0.75，扩容是原容量两倍加一</li></ul><blockquote><p>HashTable 中的键值不能为 null（NullPointerException）</p></blockquote><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>是一个 Map 集合，线程安全，继承 HashTable，key 和 value 都是 String 类型</p><h4 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>()<br></code></pre></td></tr></table></figure><ol><li><p>String setProperty(String K, String V)</p><p>底层调用 HashTable 中的 put 方法进行数据的存储</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">pro.<span class="hljs-built_in">set</span>Property(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;www&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>String getProperty(String key)</p><p>通过 key 取出对应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(pro.getProperty(<span class="hljs-string">&quot;a&quot;</span>));<span class="hljs-comment">// www</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>TreeSet 集合与 TreeMap 集合采用的是<strong>中序遍历</strong>（即 Iterator 采用的遍历方式）</p><h4 id="自平衡二叉树"><a href="#自平衡二叉树" class="headerlink" title="自平衡二叉树"></a>自平衡二叉树</h4><p>遵循左小右大原则存放</p><h5 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h5><ol><li>前序遍历：根左右</li><li>中序遍历：左根右</li><li>后序遍历：左右根</li></ol><blockquote><p>前中后说的是根的位置，如前序遍历根在最前面</p><p>遍历时若根有子树，则向下延伸，最后回溯</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Set</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note07 Exception</title>
    <link href="/2022/06/26/JavaSE%20-%20Note07%20Exception/"/>
    <url>/2022/06/26/JavaSE%20-%20Note07%20Exception/</url>
    
    <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>程序执行过程中的不正常情况</p><p>作用：增强程序的健壮性</p><p>存在形式：以类的形式存在，每一个异常类都可以创建异常对象</p><p>创建一个空指针异常对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NullPointerException</span> <span class="hljs-variable">npe</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>System.out.println(npe);<br><span class="hljs-comment">// java.lang.NullPointerException</span><br></code></pre></td></tr></table></figure><blockquote><p>JVM 运行中发现异常会自动创建异常对象，然后抛出，打印信息到控制台</p></blockquote><p><img src="/images/image-java/note07-01-%E5%BC%82%E5%B8%B8%E7%9A%84%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="异常的继承结构图"></p><ul><li><strong>编译时异常</strong>（受检&#x2F;受控异常）必须在编写程序的时候，<strong>预先</strong>对这种异常进行处理，否则编译器就会报错</li><li><strong>运行时异常</strong>（未受检&#x2F;受控异常）在编写程序阶段，可以选择处理或不处理</li><li>所有异常都是发生在<strong>运行阶段</strong>（异常的发生就是 new 对象），编译阶段异常不会发生</li></ul><h2 id="编译-x2F-运行异常区别"><a href="#编译-x2F-运行异常区别" class="headerlink" title="编译&#x2F;运行异常区别"></a>编译&#x2F;运行异常区别</h2><p>编译时异常，异常发生的概率一般比较高，需要在运行前进行预处理</p><p>运行时异常，异常发生的概率一般比较低，没必要运行前进行预处理</p><ul><li>如果不对异常进行划分，虽然安全，但是程序更加繁琐</li></ul><h2 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h2><blockquote><p>只有一个问题，什么时候应该向上抛出</p><ol><li>传递一个危险信号，需要让调用方知道</li><li>本方法没有能力处理的异常，调用方有能力处理</li><li>抛出是框架层面的选择</li></ol><p>打个比方，小孩摔倒了，伤口流血</p><ol><li>告诉爸妈是一个危险信号</li><li>告诉医生是他们有能力处理</li><li>告诉身体，是框架层面的，自动去调节身体免疫系统。</li></ol><blockquote><p>异常还是一个绝妙的 goto</p></blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// Unhandled exception: java.lang.ClassNotFoundException</span><br>    <span class="hljs-comment">// 因为 doSome() 方法声明时抛出了 ClassNotFoundException</span><br>    <span class="hljs-comment">// 且为编译时异常，调用方法时没有处理，就会报错</span><br>    doSome();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    System.out.println(<span class="hljs-string">&quot;doSome&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>在方法声明的位置上，使用 <code>throws</code> 关键字，抛给上一级</p><p>可持续上抛，若 main() 方法抛给了 JVM，则终止程序运行</p><blockquote><p>类似于推卸责任，继续把异常传给调用者</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抛给上级 main() 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    doSome();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>try...catch</code> 语句进行异常的捕捉</p><blockquote><p>类似于把异常拦下，真正解决，调用者不知道</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        doSome();<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        <span class="hljs-comment">// 分支可以使用 e 引用，指向的是异常对象</span><br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li>只要异常没有捕捉，采用上报的方式，后续代码不会执行（类似于直接 return）</li><li>try 语句块中某一行出现问题，问题后的代码不会执行（catch 语句后代码继续执行）</li></ul><blockquote><p>如果需要告诉调用者，则使用 <code>throws</code> 上抛</p></blockquote><h2 id="try…catch-深入"><a href="#try…catch-深入" class="headerlink" title="try…catch 深入"></a>try…catch 深入</h2><ol><li>catch 中可以写具体的异常类型，也可以写该异常的父类型（多态机制）</li><li>catch 可以写多个，建议精确地一个一个处理，有利于程序调试</li><li>多个 catch 时，从上到下必须遵循从小到大的原则（子类异常靠上，父类异常靠下）</li></ol><blockquote><p>JDK 8 中支持：<code>catch (A | B | C e)</code> 这种写法</p></blockquote><h2 id="异常对象两个重要方法"><a href="#异常对象两个重要方法" class="headerlink" title="异常对象两个重要方法"></a>异常对象两个重要方法</h2><ol><li><p>（String）exception.getMessage()</p><p>获取简单的描述信息（构造方法传递的参数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NullPointerException</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;空指针异常&quot;</span>);<br>System.out.println(e.getMessage());<br><span class="hljs-comment">// 空指针异常</span><br></code></pre></td></tr></table></figure></li><li><p><strong>exception.printStackTrace()</strong><br>打印异常堆栈追踪信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">e.printStackTrace();<br>System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br><span class="hljs-comment">// java.lang.NullPointerException: 空指针异常...</span><br><span class="hljs-comment">// Hello World</span><br></code></pre></td></tr></table></figure><ul><li>建议实际开发中使用 <code>exception.printStackTrace</code></li></ul></li></ol><blockquote><p>异常信息是异步线程处理，最终顺序可能会不一</p></blockquote><h2 id="异常信息处理方法"><a href="#异常信息处理方法" class="headerlink" title="异常信息处理方法"></a>异常信息处理方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        m1();<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>    m2();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>    m3();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>    <span class="hljs-comment">// 文件路径缺少盘符</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;\\Users\\vv\\Desktop\\jdk api 1.8_google.CHM&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">at java.base/java.io.FileInputStream.open0(Native Method)</span><br><span class="hljs-comment">at java.base/java.io.FileInputStream.open(FileInputStream.java:213)</span><br><span class="hljs-comment">at java.base/java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:155)</span><br><span class="hljs-comment">at java.base/java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:110)</span><br><span class="hljs-comment">at io.github.wataaaame.javase.Exception.ExceptionTest04.m3(ExceptionTest04.java:24)</span><br><span class="hljs-comment">at io.github.wataaaame.javase.Exception.ExceptionTest04.m2(ExceptionTest04.java:20)</span><br><span class="hljs-comment">at io.github.wataaaame.javase.Exception.ExceptionTest04.m1(ExceptionTest04.java:16)</span><br><span class="hljs-comment">at io.github.wataaaame.javase.Exception.ExceptionTest04.main(ExceptionTest04.java:9)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>异常追踪信息，从上往下一行一行看</p><p>通过包名判断，跳过 SUN 的代码错误（30 - 33）</p><p>主要问题出现在自己代码上（34 - 37）</p><ul><li>上面行数的代码出问题导致下面行数的代码有误</li></ul><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>与 try 语句一起出现</p><p>finally 子句中的代码最后执行，并且<strong>一定会执行</strong>，即使 try 语句块中的代码出现了异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;try&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 退出 JVM 语句可以强制逃过 finally</span><br>    <span class="hljs-comment">// System.exit(0);</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    System.out.pritnln(<span class="hljs-string">&quot;finally&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 执行顺序：try -&gt; finally -&gt; return</span><br></code></pre></td></tr></table></figure><ul><li>通常在 finally 中完成资源的释放&#x2F;关闭</li><li>try 不能单独使用，但可以仅与 finally 联用</li></ul><h3 id="finally-面试题"><a href="#finally-面试题" class="headerlink" title="finally 面试题"></a>finally 面试题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(m());<span class="hljs-comment">// 100</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 这行代码出现在 int i = 100; 的下面，所以最终结果必须返回100</span><br>        <span class="hljs-comment">// return 语句必须保证最后执行，一旦执行，整个方法结束</span><br>        <span class="hljs-keyword">return</span> i;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        i++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java 中语法规则：</p><ol><li>方法体中的代码必须遵循自上而下的顺序依次逐行执行</li><li>return 语句一旦执行，整个方法必须结束</li></ol><p>反编译后的效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>    i++;<br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以理解为：finally 中的 i++ 只能算是回光返照，结局注定还是要 return 原本的 i</p><h3 id="final、finally、finalize"><a href="#final、finally、finalize" class="headerlink" title="final、finally、finalize"></a>final、finally、finalize</h3><p><code>final</code> 是一个关键字，表示最终的、不变的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p><code>finally</code> 也是一个关键字，和 try 联用，使用在异常处理机制中，finally 语句块中的代码一定执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;finally&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>finalize()</code> 是 Object 类中的一个方法名，是一个标识符，GC 负责调用</p><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>实际业务中，JDK 内置异常类不够用，所以需要自定义异常类</p><p>自定义：</p><ol><li>编写一个类继承 Exception&#x2F;RuntimeException</li><li>提供两个构造方法，一个无参，一个带有 String 参数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(String s )</span> &#123;<br>        <span class="hljs-built_in">super</span>(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义异常代替 return 终止，通过 <code>throw new Exception(&quot;&quot;);</code> 向外手动抛出，让方法调用者 try…catch</p><h2 id="异常方法覆盖"><a href="#异常方法覆盖" class="headerlink" title="异常方法覆盖"></a>异常方法覆盖</h2><p>父类的方法，子类在重写时不能抛出更宽泛的异常</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Exception</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note06 Array &amp; Algorithm</title>
    <link href="/2022/06/10/JavaSE%20-%20Note06%20Array%20&amp;%20Algorithm/"/>
    <url>/2022/06/10/JavaSE%20-%20Note06%20Array%20&amp;%20Algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><p>数组实际上是一个容器，一个数据的集合，可以容纳多个元素</p><p>Java 语言中的数组是一种<strong>引用数据类型</strong>，不属于基本数据类型</p><p>数组中可以存储基本数据类型的数据，也可以存储引用数据类型的数据</p><p>因为是<strong>引用类型</strong>，所以数组存储在堆内存中</p><p>数组中如果存储 Java 对象，实际上则是存储 Java 内存地址</p><p>数组一旦创建，在 Java 中长度不可变</p><p>数组的分类：<strong>一维数组、二维数组</strong>、三维数组…</p><p>所有的数组对象都有 length <strong>属性</strong>（Java 自带，并非方法），用来获取数组中元素的个数</p><p>Java 数组要求数组中元素统一，比如 int 类型数组只放 int 类型数据</p><p>数组中首元素的内存地址作为数组对象的地址</p><p>数组中每一个元素都有下标，第一个元素为0，最后一个为 n-1</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>查询&#x2F;查找&#x2F;检索某个下标上的元素时效率极高，可以说是查询效率最高的一种数据结构</p><blockquote><ol><li>数组在内存方面存储时，数组中的元素内存地址是连续的</li><li>每一个元素类型相同，所占用空间大小一样</li><li>知道第一个元素内存地址，知道每一个元素占用空间的大小，又知道下标，所以通过一个数学表达式就可以计算出下标元素上的内存地址，直接通过内存地址定位元素</li></ol></blockquote><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>由于为了保证数组中每个元素内存地址连续，所以在数组上随机删除或增加元素的时候效率较低随机增删元素会涉及到后面元素统一向前或向后位移的操作</li><li>数组不能存储大数据，很难在内存空间上找到一块特别大的连续的内存空间</li></ol><blockquote><p>最后一个元素的增删没有影响</p></blockquote><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><p><code>int[] array1;</code></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h4><p><code>int[] array = &#123;100, 200, 300&#125;;</code></p><p>静态数组直接传递：</p><p><code>new int[] &#123;1, 2, 3&#125;</code></p><p>其中，中括号中不能有数字</p><h4 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h4><p><code>int[] array = new int[5];</code></p><p>这里的 5 表示数组的元素个数，初始化 5 个长度为 int 类型数组，每个元素默认值为 0</p><p><code>String[] array = new String[6];</code></p><p>初始化 6 个长度的 String 类型数组，每个元素默认值为 null</p><blockquote><p>创建数组时，确定存储哪些具体元素，采用静态初始化方式</p><p>创建数组时，不确定存储哪些数据，采用动态初始化方式，后期赋值</p></blockquote><h2 id="main-方法"><a href="#main-方法" class="headerlink" title="main 方法"></a><em>main 方法</em></h2><p><code>public static void main(String[] args) &#123;&#125;</code></p><p>其中 <code>main(String[] args)</code> JVM调用 main 方法时，会自动传入一个 String 数组</p><p>这个数组是留给用户的，用户可以在控制台上输入参数，这个参数会被自动转换为 “String args” 数组</p><p>例如这样运行程序：</p><ul><li><p>cmd 窗口</p><p><code>java ArrayTest05 abc def xyz</code></p></li><li><p>IDEA</p><p><code>菜单栏 -&gt; run -&gt; Edit Configuration -&gt; Program arguments</code></p></li></ul><p>JVM 会自动将 <code>abc def xyz</code> 通过空格的方式进行分离，然后放到 “String[] args” 数组</p><h1 id="一维数组深入"><a href="#一维数组深入" class="headerlink" title="一维数组深入"></a>一维数组深入</h1><h2 id="数组存储引用数据类型"><a href="#数组存储引用数据类型" class="headerlink" title="数组存储引用数据类型"></a>数组存储引用数据类型</h2><p>父类数组可以存放子类引用，若要调用子类特有方法，需要向下转型</p><h2 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h2><p>Java 开发中，数组长度一旦确定即不可变，需要扩容</p><h3 id="扩容思路"><a href="#扩容思路" class="headerlink" title="扩容思路"></a>扩容思路</h3><p>先新建一个大容量数组，然后将小容量数组中的数据一个一个拷贝到大数组中</p><blockquote><p>涉及到拷贝问题，数组扩容效率较低，以后的开发尽可能预估准确，少的进行扩容</p></blockquote><h3 id="扩容语法"><a href="#扩容语法" class="headerlink" title="扩容语法"></a>扩容语法</h3><p><code>arraycopy(Object array1, int start1, Object array2, int start2, int length);</code></p><p>Object array1：拷贝源数组</p><p>int start1：拷贝源数组开始下标</p><p>Object array2：拷贝目标数组</p><p>int start2：目标数组开始下标</p><p>int length：拷贝长度</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[] a2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>System.arraycopy(a1, <span class="hljs-number">0</span>, a2, <span class="hljs-number">0</span>, a1.length);<br></code></pre></td></tr></table></figure><h1 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h1><p>二维数组其实就是一个特殊的一维数组，特殊在这个一维数组当中的每个元素是一个一维数组</p><blockquote><p>实际开发中最多就是一维数组，二维数组很少使用，三维数组几乎不用</p></blockquote><h2 id="声明语法"><a href="#声明语法" class="headerlink" title="声明语法"></a>声明语法</h2><h3 id="静态初始化-1"><a href="#静态初始化-1" class="headerlink" title="静态初始化"></a>静态初始化</h3><p><code>int[][] array = &#123;&#123;1, 2&#125;, &#123;3, 4&#125;&#125;</code></p><h3 id="动态初始化-1"><a href="#动态初始化-1" class="headerlink" title="动态初始化"></a>动态初始化</h3><p><code>int[][] array = new int[2][2]</code></p><h2 id="访问二维数组"><a href="#访问二维数组" class="headerlink" title="访问二维数组"></a>访问二维数组</h2><p><code>a[二维数组中一维数组下标][一维数组中元素下标]</code></p><h2 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 控制二维数组中一维数组下标</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; m &lt; array.length; m++) &#123;<br>    <span class="hljs-comment">// 控制一维数组中元素下标</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; n &lt; array[m].length; n++) &#123;<br>        <span class="hljs-comment">// 打印第 m 个数组中的所有元素</span><br>System.out.print(array[m][n] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>    <span class="hljs-comment">// 换行</span><br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h1><p>Java 中封装了很多算法，例如：数组工具类 <code>java.util.Arrays</code></p><p>其中有一个 sort() 方法，可以实现排序</p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p> 水中同一维度的气泡，体积越大，上升到水面的速度越快</p><ol><li>每一次循环结束之后，找出最大的数据，放到参与比较这堆数据的最右边（冒出最大的气泡）</li><li>用左边的数字与右边比对，当<strong>左边&gt;右边</strong>的时候，交换位置</li></ol><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dns">原始数据：<br><span class="hljs-number">9，8，7，6</span><br><br>第一次循环（最大的换到右边）<br><span class="hljs-number">8，9，7，6</span>（<span class="hljs-number">9</span>和<span class="hljs-number">8</span>比较，<span class="hljs-number">9</span>&gt;<span class="hljs-number">8</span>交换位置）<br><span class="hljs-number">8，7，9，6</span>（<span class="hljs-number">9</span>和<span class="hljs-number">7</span>比较，<span class="hljs-number">9</span>&gt;<span class="hljs-number">7</span>交换位置）<br><span class="hljs-number">8，7，6，9</span>（<span class="hljs-number">9</span>和<span class="hljs-number">6</span>比较，<span class="hljs-number">9</span>&gt;<span class="hljs-number">6</span>交换位置）<br><br>第二次循环（剩余<span class="hljs-number">8</span>，<span class="hljs-number">7</span>，<span class="hljs-number">6</span>）<br><span class="hljs-number">7，8，6（8</span>和<span class="hljs-number">7</span>比较，<span class="hljs-number">8</span>&gt;<span class="hljs-number">7</span>交换位置）<br><span class="hljs-number">7，6，8（8</span>和<span class="hljs-number">6</span>比较，<span class="hljs-number">8</span>&gt;<span class="hljs-number">6</span>交换位置）<br><br>第三次循环（剩余<span class="hljs-number">7</span>，<span class="hljs-number">6</span>）<br><span class="hljs-number">6，7（7和6</span>比较，<span class="hljs-number">7</span>&gt;<span class="hljs-number">6</span>交换位置）<br><br>排序后位置：<br><span class="hljs-number">6，7，8，9</span><br></code></pre></td></tr></table></figure><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> a.length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>        <span class="hljs-keyword">if</span> (a[j] &gt; a[j+<span class="hljs-number">1</span>]) &#123;<br>            temp = a[j];<br>            a[j] = a[j+<span class="hljs-number">1</span>];<br>            a[j + <span class="hljs-number">1</span>] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>每一次从这堆参与比较的数据中找出最小值，用这个最小值与前面元素交换位置</p><p>选择排序的好处是，每一次的交换都有意义</p><h4 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h4><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dns">原始数据：<br><span class="hljs-number">4，5，3，6</span><br><br>第一次循环（最小的换到左边）<br><span class="hljs-number">4，5，3，6</span>（<span class="hljs-number">4</span>和<span class="hljs-number">5</span>比较，<span class="hljs-number">4</span>&lt;<span class="hljs-number">5</span>位置不变）<br><span class="hljs-number">3，5，4，6</span>（<span class="hljs-number">4</span>和<span class="hljs-number">3</span>比较，<span class="hljs-number">4</span>&gt;<span class="hljs-number">3</span>位置交换）<br><span class="hljs-number">3，5，4，6</span>（<span class="hljs-number">3</span>和<span class="hljs-number">6</span>比较，<span class="hljs-number">3</span>&lt;<span class="hljs-number">6</span>位置不变）<br><br>第二次循环（剩余<span class="hljs-number">5</span>，<span class="hljs-number">4</span>，<span class="hljs-number">6</span>）<br><span class="hljs-number">4，5，6（5</span>和<span class="hljs-number">4</span>比较，<span class="hljs-number">5</span>&gt;<span class="hljs-number">4</span>位置交换）<br><span class="hljs-number">4，5，6（4</span>和<span class="hljs-number">6</span>比较，<span class="hljs-number">4</span>&lt;<span class="hljs-number">6</span>位置不变）<br><br>第三次循环（剩余<span class="hljs-number">5</span>，<span class="hljs-number">6</span>）<br><span class="hljs-number">5，6（5和6</span>比较，<span class="hljs-number">5</span>&lt;<span class="hljs-number">6</span>位置不变）<br><br>排序后：<br><span class="hljs-number">3，4，5，6</span><br></code></pre></td></tr></table></figure><h4 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; a.length; j++) &#123;<br><span class="hljs-keyword">if</span> (a[j] &lt; a[i]) &#123;<br>            temp = a[j];<br>            a[j] = a[i];<br>            a[i] = temp;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><p>最简单的就是一个一个挨着找，直到找到为止</p><h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3><p>基于排序基础之上，没有排序的数据无法查找</p><h4 id="实现过程-2"><a href="#实现过程-2" class="headerlink" title="实现过程"></a>实现过程</h4><p><code>arr：10（下标0），11，12，13，14，15，16，17，18，19，20（下标10）</code> 查找18</p><ol><li><p>找出中间元素的下标：</p><p>（0 + 10） &#x2F; 2 &#x3D; 5</p></li><li><p>将中间元素和目标元素进行对比：</p><p>中间元素：arr[5] &#x3D; 15 &lt; 18（被查找的元素），且在中间元素右边</p></li><li><p>重新计算中间元素下标：</p><p>开始下标：5 + 1</p><p>结束下标：10</p><p>找出中间元素的下标：（6+10） &#x2F; 2 &#x3D; 8</p></li><li><p>arr[8]对应是18，完成</p></li></ol><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (min &lt;= max) &#123;<br>    mid = (min+max) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (a[mid] == e) &#123;<br>        <span class="hljs-keyword">return</span> mid;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[mid] &lt; e) &#123;<br>        min = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        max = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h1 id="Arrays-工具类"><a href="#Arrays-工具类" class="headerlink" title="Arrays 工具类"></a>Arrays 工具类</h1><p>Java内置 <code>java.util.Arrays</code> 工具类，提供数组处理的常用算法</p><p>排序：<code>Arrays.sort(array)</code></p><p>二分法查找：<code>Arrays.binarySearch(array, key)</code></p>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Array</tag>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java - API &amp; JDK</title>
    <link href="/2022/06/09/Java%20-%20API%20&amp;%20JDK/"/>
    <url>/2022/06/09/Java%20-%20API%20&amp;%20JDK/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是-API"><a href="#什么是-API" class="headerlink" title="什么是 API"></a>什么是 API</h1><p>Application Program Interface 应用程序编程接口</p><p>整个 JKD 类库就是一个 JavaSE 的 API</p><p>每一个 API 都会配置一套 API 帮助文档</p><h2 id="获取途径"><a href="#获取途径" class="headerlink" title="获取途径"></a>获取途径</h2><ol><li>源代码中（API，比较麻烦，也比较难）</li><li>查阅 Java 类库帮助文档</li></ol><h1 id="Object-JDK-类库的根类"><a href="#Object-JDK-类库的根类" class="headerlink" title="Object - JDK 类库的根类"></a>Object - JDK 类库的根类</h1><p>Object 类中方法所有子类通用，任何一个类默认继承 Object 类</p><h2 id="String-toString"><a href="#String-toString" class="headerlink" title="String toString()"></a>String toString()</h2><p>将对象转换成字符串形式</p><p><code>类名@对象的内存地址转换为16进制形式</code></p><blockquote><p>toString() 方法应该是一个简洁的、详实的、易阅读的</p><p>建议所有子类都重写 toString() 方法</p><p>输出对象时可以自动调用 toString() 方法</p></blockquote><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Answers a string containing a concise, human-readable</span><br><span class="hljs-comment"> * description of the receiver.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>String</span><br><span class="hljs-comment"> *a printable representation for the receiver.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span> <span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getClass().getName() + <span class="hljs-string">&#x27;@&#x27;</span> + Integer.toHexString(<span class="hljs-built_in">this</span>.hashCode());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="boolean-equals-Object-obj"><a href="#boolean-equals-Object-obj" class="headerlink" title="boolean equals(Object obj)"></a>boolean equals(Object obj)</h2><p>判断两个对象是否相等</p><blockquote><p>“&#x3D;&#x3D;” 比较的是两对象内存地址，无法比较对象是否相等</p></blockquote><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Compares the argument to the receiver, and answers true</span><br><span class="hljs-comment"> * if they represent the &lt;em&gt;same&lt;/em&gt; object using a class</span><br><span class="hljs-comment"> * specific comparison. The implementation in Object answers</span><br><span class="hljs-comment"> * true only if the argument is the exact same object as the</span><br><span class="hljs-comment"> * receiver (==).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span>o Object</span><br><span class="hljs-comment"> *the object to compare with this object.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>boolean</span><br><span class="hljs-comment"> *&lt;code&gt;true&lt;/code&gt;</span><br><span class="hljs-comment"> *if the object is the same as this object</span><br><span class="hljs-comment"> *&lt;code&gt;false&lt;/code&gt;</span><br><span class="hljs-comment"> *if it is different from this object.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span>#hashCode</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span> <span class="hljs-params">(Object o)</span> &#123;<br><span class="hljs-type">return</span> <span class="hljs-variable">this</span> <span class="hljs-operator">=</span>= o;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码重写"><a href="#代码重写" class="headerlink" title="代码重写"></a>代码重写</h3><p>源代码中的 <code>equals(Object o)</code> 默认使用 “&#x3D;&#x3D;” 比较，无法作用于对象，所以需要重写</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>大部分情况下采用以下方法创建字符串对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>这种情况，作为 String 变量，支持使用“&#x3D;&#x3D;”比较</li></ul><p>String 是一个类，也可以采用构造方法创建字符串对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;world&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>字符串也属于类，这里作为 String 引用，所以无法使用“&#x3D;&#x3D;”来比较，需要调用 equals() 方法比较</li></ul><blockquote><p>如果不知道 String 变量创建方法，建议直接使用 equals()</p></blockquote><p>由于 String 类中已经重写过 equals() 与 toString()，所以可以直接调用使用</p><blockquote><p>调用 equals() 时，可以优先调用字符串常量以避免空指针异常，例如</p><p><code>&quot;notnull&quot;.equals(str)</code></p></blockquote><h3 id="String-equals-源代码"><a href="#String-equals-源代码" class="headerlink" title="String equals() 源代码"></a>String equals() 源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Compares the specified object to this String and answer if they are equal. The object must be an instance of String with the same characters in</span><br><span class="hljs-comment"> * the same order.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> object</span><br><span class="hljs-comment"> *          the object to compare</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true if the specified object is equal to this String, false otherwise</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #hashCode()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object object)</span> &#123;<br><span class="hljs-keyword">if</span> (object == <span class="hljs-built_in">this</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> String) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> (String) object;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">s1len</span> <span class="hljs-operator">=</span> s1.lengthInternal();<br><span class="hljs-type">int</span> <span class="hljs-variable">s2len</span> <span class="hljs-operator">=</span> s2.lengthInternal();<br><br><span class="hljs-keyword">if</span> (s1len != s2len) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">byte</span>[] s1Value = s1.value;<br><span class="hljs-type">byte</span>[] s2Value = s2.value;<br><br><span class="hljs-keyword">if</span> (s1Value == s2Value) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// There was a time hole between first read of s.hashCode and second read if another thread does hashcode</span><br><span class="hljs-comment">// computing for incoming string object</span><br><span class="hljs-type">int</span> <span class="hljs-variable">s1hash</span> <span class="hljs-operator">=</span> s1.hashCode;<br><span class="hljs-type">int</span> <span class="hljs-variable">s2hash</span> <span class="hljs-operator">=</span> s2.hashCode;<br><br><span class="hljs-keyword">if</span> (s1hash != <span class="hljs-number">0</span> &amp;&amp; s2hash != <span class="hljs-number">0</span> &amp;&amp; s1hash != s2hash) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!regionMatchesInternal(s1, s2, s1Value, s2Value, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, s1len)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (com.ibm.oti.vm.VM.J9_JIT_STRING_DEDUP_POLICY != com.ibm.oti.vm.VM.J9_JIT_STRING_DEDUP_POLICY_DISABLED) &#123;<br>deduplicateStrings(s1, s1Value, s2, s2Value);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String-toString-源代码"><a href="#String-toString-源代码" class="headerlink" title="String toString() 源代码"></a>String toString() 源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Answers a string containing a concise, human-readable description of the receiver.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> this String</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="protected-void-finalize"><a href="#protected-void-finalize" class="headerlink" title="protected void finalize()"></a>protected void finalize()</h2><p>protected 修饰，只有方法体没有代码，不需要手动调用，垃圾回收器负责调用的方法</p><h3 id="执行时机"><a href="#执行时机" class="headerlink" title="执行时机"></a>执行时机</h3><p>当一个 Java 对象即将被垃圾回收器回收时，垃圾回收器负责调用</p><p>该方法实际上是 SUN 公司为 Java 程序员准备的一个时机——垃圾销毁时机</p><p>如果希望在对象销毁时执行一段代码，这段代码要写到 finalize() 方法中</p><blockquote><p>建议 GC 启动 <code>System.gc();</code></p></blockquote><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Called by the virtual machine when there are no longer any (non-weak)</span><br><span class="hljs-comment"> * references to the receiver. Subclasses can use this facility to</span><br><span class="hljs-comment"> * guarantee that any associated resources are cleaned up before</span><br><span class="hljs-comment"> * the receiver is garbage collected. Uncaught exceptions which are</span><br><span class="hljs-comment"> * thrown during the running of the method cause it to terminate</span><br><span class="hljs-comment"> * immediately, but are otherwise ignored.</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Note: The virtual machine assumes that the implementation</span><br><span class="hljs-comment"> * in class Object is empty.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@exception</span>Throwable</span><br><span class="hljs-comment"> *The virtual machine ignores any exceptions</span><br><span class="hljs-comment"> *which are thrown during finalization.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@deprecated</span>  May cause performance issues, deadlocks and hangs. </span><br><span class="hljs-comment"> *              Errors in  finalizers can lead to resource leaks.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Deprecated(forRemoval=false, since=&quot;9&quot;)</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="int-hashCode"><a href="#int-hashCode" class="headerlink" title="int hashCode()"></a>int hashCode()</h2><p>获取对象哈希值（内存地址），返回一个 int 类型</p><p>实际上就是一个 Java 对象的内存地址，经过哈希算法得出一个值</p><h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Answers an integer hash code for the receiver. Any two </span><br><span class="hljs-comment"> * objects which answer &lt;code&gt;true&lt;/code&gt; when passed to </span><br><span class="hljs-comment"> * &lt;code&gt;.equals&lt;/code&gt; must answer the same value for this</span><br><span class="hljs-comment"> * method.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>the receiver&#x27;s hash.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span>#equals</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> J9VMInternals.fastIdentityHashCode(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="protected-Object-clone"><a href="#protected-Object-clone" class="headerlink" title="protected Object clone()"></a>protected Object clone()</h2><p>对象克隆</p><h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Answers a new instance of the same class as the receiver,</span><br><span class="hljs-comment"> * whose slots have been filled in with the values in the</span><br><span class="hljs-comment"> * slots of the receiver.</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Classes which wish to support cloning must specify that</span><br><span class="hljs-comment"> * they implement the Cloneable interface, since the native</span><br><span class="hljs-comment"> * implementation checks for this.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span>Object</span><br><span class="hljs-comment"> *a shallow copy of this object.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@exception</span>CloneNotSupportedException</span><br><span class="hljs-comment"> *if the receiver&#x27;s class does not implement</span><br><span class="hljs-comment"> *the interface Cloneable.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException<br>&#123;<br><span class="hljs-keyword">return</span> J9VMInternals.primitiveClone(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h1><p><code>java.lang.String</code></p><ol><li>String 表示字符串类型，属于引用数据类型</li><li>Java 中使用双引号括起来的都是 String 对象</li><li>Java 中规定，双引号括起来的字符串，是不可变的</li><li>在 JDK 中双引号括起来的字符串，都是直接存储在方法区的<strong>字符串常量池</strong>当中的</li></ol><blockquote><p>字符串在实际开发中使用太频繁，为了执行效率，所以放到了字符串常量池当中</p><p>字符串常量池不会被垃圾回收器回收</p><p>字符串常量池中同一个 String 的不同引用，使用 “&#x3D;&#x3D;” 比较时返回 true，是因为双引号括起来的字符串不可变，引用的同一个字符串（new String 对象时，对象指向同一字符串，变量指向不同对象，所以使用 “&#x3D;&#x3D;”时，前者为 true，后者为 false）</p></blockquote><h2 id="String-的构造方法"><a href="#String-的构造方法" class="headerlink" title="String 的构造方法"></a>String 的构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">byte</span>数组, 起始下标, 长度);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>数组);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-type">char</span>数组, 起始下标, 长度);<br></code></pre></td></tr></table></figure><h2 id="String-类当中常用方法"><a href="#String-类当中常用方法" class="headerlink" title="String 类当中常用方法"></a>String 类当中常用方法</h2><ol><li><p><strong>char charAt(int index)</strong></p><p>获取字符串中下标为 index 的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;vay&quot;</span>.charAt(<span class="hljs-number">1</span>));<span class="hljs-comment">// a</span><br></code></pre></td></tr></table></figure></li><li><p>int compareTo(String anotherString)</p><p>比较两个字符串第一个不同元素 ASCII 码大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.compareTo(<span class="hljs-string">&quot;abd&quot;</span>));<span class="hljs-comment">// 前小后大</span><br><span class="hljs-comment">// -1</span><br><br>System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.compareTo(<span class="hljs-string">&quot;abc&quot;</span>));<span class="hljs-comment">// 前后一致</span><br><span class="hljs-comment">// 0</span><br><br>System.out.println(<span class="hljs-string">&quot;abd&quot;</span>.compareTo(<span class="hljs-string">&quot;abc&quot;</span>));<span class="hljs-comment">// 前大后小</span><br><span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></li><li><p><strong>boolean contains(CharSequence s)</strong></p><p>判断前面的字符串中是否包含后面的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;HelloWorld&quot;</span>.contains(<span class="hljs-string">&quot;Hello&quot;</span>));<span class="hljs-comment">// true</span><br>System.out.println(<span class="hljs-string">&quot;HelloWorld&quot;</span>.contains(<span class="hljs-string">&quot;Hellow&quot;</span>));<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p><strong>boolean endsWith(String suffix)</strong></p><p>判断当前字符串是否以某个字符串结尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;test.java&quot;</span>.endsWith(<span class="hljs-string">&quot;.java&quot;</span>));<span class="hljs-comment">// true</span><br>System.out.println(<span class="hljs-string">&quot;text.java&quot;</span>.endsWith(<span class="hljs-string">&quot;.class&quot;</span>));<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p><strong>boolean equals(Object anObject)</strong></p><p>比较两个字符串或引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.equals(<span class="hljs-string">&quot;abc&quot;</span>));<span class="hljs-comment">// ture</span><br></code></pre></td></tr></table></figure></li><li><p><strong>boolean equalsIgnoreCase(String anotherString)</strong></p><p>判断两个字符串是否相等，并且同时忽略大小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;Abc&quot;</span>.equalsIgnoreCase(<span class="hljs-string">&quot;abc&quot;</span>));<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p><strong>byte[] getBytes()</strong></p><p>将字符串对象转换成字节数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] b = <span class="hljs-string">&quot;abcdef&quot;</span>.getBytes();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; b.length; i++) &#123;<br>    System.out.println(b[i]);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    97</span><br><span class="hljs-comment">    98</span><br><span class="hljs-comment">    99</span><br><span class="hljs-comment">    100</span><br><span class="hljs-comment">    101</span><br><span class="hljs-comment">    102</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p><strong>int indexOf(String str)</strong></p><p>判断某个子字符串在当前字符串中第一次出现的索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;test.java&quot;</span>.indexOf(<span class="hljs-string">&quot;java&quot;</span>));<span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure></li><li><p><strong>boolean isEmpty()</strong></p><p>判断某个字符串是否为空字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;&quot;</span>.isEmpty());<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p><strong>int length()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.length());<span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><blockquote><p>判断数组长度是属性，判断字符串长度是方法</p></blockquote></li><li><p><strong>int lastIndexOf(String str)</strong></p><p>判断某个子字符串在当前字符串最后一次出现的索引（区分大小写）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;learningJava.Java&quot;</span>.lastIndexOf(<span class="hljs-string">&quot;Java&quot;</span>));<span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure></li><li><p><strong>String replace(charSequence target, charSequence replacement)</strong></p><p>将字符串中的 target（目标字符串）替换成 replacement（欲替换字符串）</p><blockquote><p>String 的父接口就是 charSequence</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;http://wataaaame.github.io&quot;</span>.replace(<span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;https&quot;</span>));<br><span class="hljs-comment">// https://wataaaame.github.io</span><br></code></pre></td></tr></table></figure></li><li><p><strong>String[] split(String regex)</strong></p><p>以 “regex” 字符作为分隔符拆分字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] str = <span class="hljs-string">&quot;2022-12-26&quot;</span>.split(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>    System.out.println(str[i]);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">2022</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">26</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p><strong>boolean startsWith(String prefix)</strong></p><p>判断字符串是否以 prefix（字符串）开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;https://wataaaame.github.io&quot;</span>.startsWith(<span class="hljs-string">&quot;https&quot;</span>));<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p><strong>String substring(int beginIndex)</strong></p><p>从 beginIndex（起始下标）处截取字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;https://wataaaame.github.io&quot;</span>.substring(<span class="hljs-number">8</span>));<br><span class="hljs-comment">// wataaaame.github.io</span><br></code></pre></td></tr></table></figure></li><li><p>**String substring(int beginIndex, int endIndex)**（方法重写）</p><p>从 beginIndex（起始下标）截取到 endIndex（结束下标）</p><blockquote><p>左闭右开，可理解为光标</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;https://wataaaame.github.io&quot;</span>.substring(<span class="hljs-number">8</span>, <span class="hljs-number">17</span>));<br><span class="hljs-comment">// wataaaame</span><br></code></pre></td></tr></table></figure></li><li><p><strong>char[] toCharArray()</strong></p><p>将字符串转换成 char 数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span>[] ch = <span class="hljs-string">&quot;keep on do it!!!&quot;</span>.toCharArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ch.length; i++) &#123;<br>    System.out.print(ch[i] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-comment">// k e e p   o n   d o   i t ! ! ! </span><br></code></pre></td></tr></table></figure></li><li><p><strong>String toLowerCase()</strong></p><p>转换为小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;FOR ALL THE TIME.&quot;</span>.toLowerCase());<br><span class="hljs-comment">// for all the time.</span><br></code></pre></td></tr></table></figure></li><li><p><strong>String toUpperCase()</strong></p><p>转换为大写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;wuwuwu&quot;</span>.toUpperCase());<br><span class="hljs-comment">// WUWUWU</span><br></code></pre></td></tr></table></figure></li><li><p><strong>String trim()</strong></p><p>去除字符串<strong>前后</strong>空白</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot; space around &quot;</span>.trim());<br><span class="hljs-comment">// space around</span><br></code></pre></td></tr></table></figure></li><li><p><strong>String valueOf()</strong><br>将非字符串转换为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(String.valueOf(<span class="hljs-number">3.14</span>));<br></code></pre></td></tr></table></figure><blockquote><p>String 中唯一的 static 方法，不需要 new 对象，使用 类名. 调用</p><p>处理对象时调用 toString 方法转换为字符串形式的内存地址</p><p>print 对象会自动调用 toString，因为 println 中会先调用 valueOf()</p><p>控制台打印的内容全都是字符串</p></blockquote></li></ol><h1 id="StringBuffer-amp-StringBuilder"><a href="#StringBuffer-amp-StringBuilder" class="headerlink" title="StringBuffer &amp; StringBuilder"></a>StringBuffer &amp; StringBuilder</h1><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>Java 中的字符串是不可变的，每一次拼接都会产生新字符串，这样会占用大量的方法区内存，造成内存空间浪费</p><p>所以需要进行大量字符换拼接操作，建议使用 JDK 中自带的：</p><p><code>java.lang.StringBuffer</code></p><p><code>java.lang.StringBuilder</code></p><ul><li>创建 StringBuffer 时最好给定一个合适的初始化容量，以减少底层数组的扩容次数，优化性能</li></ul><blockquote><p>String 底层就是一个 private final 修饰的 byte[] 数组，所以一经创建无法改变</p><p>而 StringBuffer 底层是一个普通的 byte[] 数组，可以任意扩容</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建一个初始化容量为16个 byte[] 数组（字符串缓冲区对象）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br></code></pre></td></tr></table></figure><p>拼接字符串统一调用 append 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">stringBuffer.append(<span class="hljs-string">&quot;a&quot;</span>);<br>stringBuffer.append(<span class="hljs-number">3.14</span>);<br>stringBuffer.append(<span class="hljs-literal">true</span>);<br>stringBuffer.append(<span class="hljs-number">100L</span>);<br>System.out.println(stringBuffer.toString());<br></code></pre></td></tr></table></figure><p>指定初始化容量的 StringBuffer 对象（字符串缓冲区对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>与 StringBuffer 类似，区别如下：</p><table><thead><tr><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>有 synchronized 关键字修饰，表示多线程安全</td><td>无 synchronized 关键字修饰，多线程不安全</td></tr></tbody></table><h1 id="基础类型对应的8个包装类"><a href="#基础类型对应的8个包装类" class="headerlink" title="基础类型对应的8个包装类"></a>基础类型对应的8个包装类</h1><p>Java 中为8中<strong>基本数据类型</strong>对应准备了8种<strong>包装类型</strong>，属于<strong>引用数据类型</strong>，父类是 Object</p><blockquote><p>调用方法需要传递一个数字，可是方法参数类型是 Object，无法接收基本数据类型的数字，此时就需要传递一个<strong>数字对应的包装类</strong>进去</p></blockquote><h2 id="对应的包装类型名"><a href="#对应的包装类型名" class="headerlink" title="对应的包装类型名"></a>对应的包装类型名</h2><table><thead><tr><th>基本数据类型</th><th>包装类型</th><th>父类</th></tr></thead><tbody><tr><td>byte</td><td>java.lang.Byte</td><td>Number</td></tr><tr><td>short</td><td>java.lang.Short</td><td>Number</td></tr><tr><td>int</td><td>java.lang.<strong>Integer</strong></td><td>Number</td></tr><tr><td>long</td><td>java.lang.Long</td><td>Number</td></tr><tr><td>float</td><td>java.lang.Float</td><td>Number</td></tr><tr><td>double</td><td>java.lang.Double</td><td>Number</td></tr><tr><td>boolean</td><td>java.lang.Boolean</td><td>Object</td></tr><tr><td>char</td><td>java.lang.<strong>Character</strong></td><td>Object</td></tr></tbody></table><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>是一个抽象类，无法实例化对象</p><p>将引用数据类型转换为基本数据类型<strong>（负责拆箱）</strong>的公共方法：<code>[数据类型]Value()</code></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>Integer 的构造方法有两个（其他的也如此）：</p><p><code>Integer(int)</code></p><p><code>Integer(String)</code></p><blockquote><p>此为 JDK 9 过时语法<strong>（手动装箱）</strong></p></blockquote><p>基本数据类型 -（转换为）-&gt; 引用数据类型<strong>（装箱）</strong>： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">123</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-string">&quot;123&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>123这个基本的数据类型，进行构造方法的包装达到了：<strong>基本数据类型</strong>向<strong>引用数据类型</strong>的转换</li><li>非数字的字符串包装成 Integer，运行会报错</li></ul><p>引用数据类型 -（转换为）-&gt; 基本数据类型<strong>（拆箱）</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> i.floatValue();<br>System.out.println(f);<span class="hljs-comment">// 123.0</span><br></code></pre></td></tr></table></figure><ul><li>默认重写了 toString() 方法</li></ul><p>通过访问包类常量，获取数据类型的最大值与最小值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;max int: &quot;</span> + Integer.MAX_VALUE);<span class="hljs-comment">// max int: 2147483647</span><br>System.out.println(<span class="hljs-string">&quot;min int: &quot;</span> + Integer.MIN_VALUE);<span class="hljs-comment">// min int: -2147483648</span><br></code></pre></td></tr></table></figure><h3 id="自动装箱-amp-自动拆箱"><a href="#自动装箱-amp-自动拆箱" class="headerlink" title="自动装箱 &amp; 自动拆箱"></a>自动装箱 &amp; 自动拆箱</h3><p>Java 5 之后，支持自动拆箱和自动装箱，Number 类中的方法就用不着了</p><p>自动装箱：基本数据类型自动转换成包装类</p><p><code>Integer x = 100;</code></p><p>自动拆箱：包装类自动转换成基本数据类型</p><p><code>int y = x;</code></p><p>分析以下代码为何没有报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>System.out.println(z + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><ul><li>加号两边要求是基本数据类型的数组，z 是包装类，不属于基本数据类型，这里会自动进行拆箱，将 z 转换成基本类型数据</li></ul><blockquote><p>“&#x3D;&#x3D;” 不会触发自动拆箱机制，只有参与运算时才会触发</p></blockquote><p>重要的 Integer 面试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>System.out.println(a == b);<span class="hljs-comment">// false</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>System.out.println(x == y);<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ul><li>Java 中为了提高程序的执行效率，将 [-128, 127] 之间所有的包装对象提前创建好，放到了一个方法区的“整数型常量池”中，目的是只要用了这个区间的数据不需要再 new，直接从整数型常量池当中取出来</li><li>原理：x 与 y 中保存的对象内存地址相同</li></ul><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li><p>static int parseInt(String s)</p><p>静态方法，传参 String，返回 int</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">retValue</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;123&quot;</span>);<br>System.out.println(retValue + <span class="hljs-number">100</span>);<span class="hljs-comment">// 223</span><br></code></pre></td></tr></table></figure><ul><li>非数字字符串无法转换</li></ul><blockquote><p>类比 <code>Double.parseDouble(&quot;3.14&quot;)</code></p></blockquote></li><li><p>Integer.valueOf([int&#x2F;String])</p><p>将 int&#x2F;String 数字转换成 Integer</p></li></ol><p><img src="/images/image-java/API&JDK-01-String%E3%80%81Integer%E3%80%81Int%E3%80%81%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2.png" alt="String Integer Int 三种类型互相转换"></p><h1 id="日期相关类"><a href="#日期相关类" class="headerlink" title="日期相关类"></a>日期相关类</h1><p><code>java.util.Date</code></p><ol><li><p>Date()</p><p>获取系统当前时间（精确到毫秒）</p><p>直接调用无参数构造方法</p><blockquote><p>toString() 方法已被重写（国际时间格式）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">nowDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>System.out.println(nowDate);<br><span class="hljs-comment">// Sun Jun 26 09:21:41 CST 2022</span><br></code></pre></td></tr></table></figure></li><li><p>Date(long)</p><p>表示纪元时间以后累计的时间（传入毫秒）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1000</span>);<br>System.out.println(d);<br><span class="hljs-comment">// Thu Jan 01 08:00:01 CST 1970</span><br></code></pre></td></tr></table></figure><blockquote><p>北京是东8区，所以早8个小时</p></blockquote></li><li><p>SimpleDateFormat()</p><p><code>java.text</code> 包下，负责日期格式化</p><p>直接调用构造方法，参数列表指定日期格式</p><table><thead><tr><th>日期格式</th><th>含义</th></tr></thead><tbody><tr><td>yyyy</td><td>年</td></tr><tr><td>MM</td><td>月</td></tr><tr><td>dd</td><td>日</td></tr><tr><td>HH</td><td>时</td></tr><tr><td>mm</td><td>分</td></tr><tr><td>ss</td><td>秒</td></tr><tr><td>SSS</td><td>毫秒</td></tr></tbody></table><ul><li>除了日期格式字母不能随便写以外，其他字符可以自定义</li><li>日期格式字母个数可更改</li></ul><p>调用 SimpleDateFormat 对象的 <code>.format(Date)</code> 来以指定格式输出 String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss:SSS&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">formatDate</span> <span class="hljs-operator">=</span> sdf.format(nowDate);<br>System.out.println(formatDate);<br><span class="hljs-comment">// 2022-06-26 09:33:51:786</span><br></code></pre></td></tr></table></figure><p>日期字符串如 String 如何转换成 Date 类型？</p><p>使用 SimpleDateFormat 对象的 <code>.parse(String)</code> 方法输出 Date</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2004-04-04 04:04:44:444&quot;</span>;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-mm-dd HH:mm:ss:SSS&quot;</span>);<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf2.parse(time);<br>    System.out.println(d);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>需要在方法中抛出异常</li><li>字符串日期格式和 SimpleDateFormat 指定的日期格式需要相同</li></ul></li><li><p>System.currentTimeMillis();</p><p>获取自 1970年1月1日 0时0分0秒 000毫秒 到当前系统时间的的总毫秒数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">nowTimeMillis</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(nowTimeMillis);<br><span class="hljs-comment">// 1656208105060</span><br></code></pre></td></tr></table></figure><p>可用来计算程序运行时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 统计当前系统 for 循环1000次耗费的时间</span><br><span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;Using &quot;</span> + (endTime-startTime) + <span class="hljs-string">&quot;ms&quot;</span>);<br><span class="hljs-comment">// Using 72ms</span><br></code></pre></td></tr></table></figure><ul><li>打印结果会大量耗费时间</li></ul></li></ol><h1 id="数字相关类"><a href="#数字相关类" class="headerlink" title="数字相关类"></a>数字相关类</h1><p><code>java.text.DecimalFormat</code></p><ol><li><p><em>java.text.DecimalFormat()</em></p><p>专门负责数字格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;数字格式&quot;</span>)<br></code></pre></td></tr></table></figure><table><thead><tr><th>数字符号</th><th>数字格式</th></tr></thead><tbody><tr><td>#</td><td>任意数字</td></tr><tr><td>,</td><td>千分位</td></tr><tr><td>.</td><td>小数点</td></tr><tr><td>0</td><td>不够时补0</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DecimalFormat</span> <span class="hljs-variable">df</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecimalFormat</span>(<span class="hljs-string">&quot;###,###.0000&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> df.format(<span class="hljs-number">1234567.891</span>);<br>System.out.println(s);<br><span class="hljs-comment">// 1,234,567.8910</span><br></code></pre></td></tr></table></figure></li><li><p>BigDecimal</p><p><code>java.math.BigDecimal</code></p><p>属于大数据，精度极高，属于 Java 对象（引用数据类型），是 SUN 提供的一个类，主要用于财务软件中（Double 精度不够）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>);<br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">200</span>);<br></code></pre></td></tr></table></figure><p>引用不可使用运算符运算，需调用 <code>.add()</code> 进行求和：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">v3</span> <span class="hljs-operator">=</span> v1.add(v2);<br>System.out.println(v3);<br><span class="hljs-comment">// 300</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h1><p><code>java.util.Random</code></p><p>随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>System.out.println(r.nextInt());<br><span class="hljs-comment">// -822415571</span><br></code></pre></td></tr></table></figure><p><code>r.nextInt(bound)</code>：产生 [0, bound) 之间的随机数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(r.nextInt(<span class="hljs-number">100</span>));<br><span class="hljs-comment">// 86</span><br></code></pre></td></tr></table></figure><h2 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h2><p>生成5个不重复的随机数，放到数组中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.random;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomTest02_Plus</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>        <span class="hljs-comment">// 数组默认值-1，以免与生成的0混淆</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            a[i] = -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; ) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">5</span>);<br>            <span class="hljs-keyword">if</span> (!contains(a, num)) &#123;<br>                a[i++] = num;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 打印结果</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            System.out.print(a[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a 数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n 元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 若数组包含元素返回 true，否则 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (a[i] == n)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 2 4 1 3 0</span><br></code></pre></td></tr></table></figure><h1 id="Enum（枚举）"><a href="#Enum（枚举）" class="headerlink" title="Enum（枚举）"></a>Enum（枚举）</h1><p>返回值多于两种时，可以使用枚举类型（2种可使用 boolean）</p><ul><li>枚举也是一种引用数据类型</li><li>一枚一枚可以列举出来的，才建议使用枚举类型</li><li>枚举编译后也是生成 class 文件</li><li>枚举中的每一个值可以看作是<strong>常量</strong></li></ul><blockquote><p>例如：四级、星期等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> [枚举类型名] &#123;<br>    枚举值<span class="hljs-number">1</span>, 枚举值<span class="hljs-number">2</span>, ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>随机返回周一到周日</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.enum2;<br><br><span class="hljs-comment">// 一周七天</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Weekdays</span> &#123;<br>    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, NULL<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> io.github.wataaaame.javase.enum2;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><br>        System.out.println(Weekdays(r.nextInt(<span class="hljs-number">7</span>)));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Weekdays <span class="hljs-title function_">Weekdays</span><span class="hljs-params">(<span class="hljs-type">int</span> d)</span> &#123;<br>        <span class="hljs-comment">// 输入一个随机 int，返回对应的枚举</span><br>        <span class="hljs-keyword">switch</span> (d) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> Weekdays.SUNDAY;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> Weekdays.MONDAY;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-keyword">return</span> Weekdays.TUESDAY;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-keyword">return</span> Weekdays.WEDNESDAY;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-keyword">return</span> Weekdays.THURSDAY;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <span class="hljs-keyword">return</span> Weekdays.FRIDAY;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <span class="hljs-keyword">return</span> Weekdays.SATURDAY;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Weekdays.NULL;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>高版本 switch 参数列表中支持：String，<strong>枚举</strong>（老版本仅支持 int）</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java API</tag>
      
      <tag>JDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note05 Object-Oriented PART II</title>
    <link href="/2022/06/06/JavaSE%20-%20Note05%20Object-Oriented%20PART%20II/"/>
    <url>/2022/06/06/JavaSE%20-%20Note05%20Object-Oriented%20PART%20II/</url>
    
    <content type="html"><![CDATA[<h1 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h1><p>是一个关键字，表示<strong>最终的、不可变的</strong>，可以修饰变量、方法、类</p><h2 id="Final-修饰类"><a href="#Final-修饰类" class="headerlink" title="Final 修饰类"></a>Final 修饰类</h2><p>final 修饰的类无法被继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><br><span class="hljs-comment">// 错误: 无法从最终A进行继承</span><br></code></pre></td></tr></table></figure><h2 id="Final-修饰方法"><a href="#Final-修饰方法" class="headerlink" title="Final 修饰方法"></a>Final 修饰方法</h2><p>final 修饰的方法无法被覆盖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;C do some&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">C</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;D do some&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 错误: B中的doSome()无法覆盖C中的doSome()</span><br></code></pre></td></tr></table></figure><h2 id="Final-修饰变量"><a href="#Final-修饰变量" class="headerlink" title="Final 修饰变量"></a>Final 修饰变量</h2><p>final 修饰的变量只能<strong>赋一次值</strong></p><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TS01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>j = <span class="hljs-number">200</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 错误: 无法为最终变量j分配值</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TS01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> k;<br>k = <span class="hljs-number">100</span>;<br>        k = <span class="hljs-number">200</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 错误: 可能已分配变量k</span><br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>final 修饰引用，该引用只能且永远指向一个对象，但可以修改对象内部数据</p><p>该对象不会被 GC 回收，直到当前方法结束，才会释放空间</p><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><p>final 修饰的实例变量，系统不会赋默认值，必须手动赋值</p><p>定义实例变量时赋值，赋值的时机是执行构造方法时（也就是 new 一个对象时），所以有两个赋值方法：</p><ol><li>定义实例变量时赋值</li><li>构造方法中赋值</li></ol><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><code>static final</code> 联合修饰的变量称为常量</p><p>区别于静态变量，常量值不可改变。相同的是都存储在方法区，且在类加载时初始化</p><blockquote><p>既然 final 修饰的实例变量不可被改变，所以<strong>一般加上 static</strong> 得以节省空间</p><p>因为无法修改，所以常量一般可以公开</p><p>常量名建议全部大写，每个单词之间使用下划线衔接</p><p>记忆方法：常量是静止（static）不变的（final）</p></blockquote><h1 id="抽象类-amp-接口"><a href="#抽象类-amp-接口" class="headerlink" title="抽象类 &amp; 接口"></a>抽象类 &amp; 接口</h1><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>类与类之间的共同特征进一步提取形成<strong>抽象类</strong>，属于引用数据类型</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>[修饰符列表] abstract class [类名] &#123;类体&#125;</code></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>由于类本身不存在，所以抽象类无法创建对象</p></li><li><p>抽象类无法实例化，所以一般用来继承，且有构造方法</p></li></ol><blockquote><p>抽象类与抽象类还可以继续抽象</p><p>不能联合 final 使用，否则矛盾</p></blockquote><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>抽象方法表示没有实现的方法、没有方法体的方法</p><p><code>public abstract void doSome();</code></p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ol><li>没有方法体，以分号结尾</li><li>用 abstract 关键字修饰</li><li>抽象类中不一定有抽象方法，但<strong>抽象方法必须出现在抽象类中</strong></li><li>一个<strong>非抽象类继承抽象类</strong>，必须<strong>将抽象类中的抽象方法实现</strong>（抽象类继承抽象类无需实现）</li></ol><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>面试题：Java 语言中凡是没有方法体的方法都是抽象方法。</p><ul><li><p>错，Object 类中就有很多方法没有方法体，都是以“；”结尾，但它们都不是抽象方法，例如：</p><p><code>public native int hashCode()</code></p><p>这个方法底层调用了 C++ 动态链接库程序，且修饰符列表中没有 abstract，使用的是 native 调用 JVM 本地程序</p></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>一种引用数据类型，编译之后也是一个 “.class” 文件</p><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ol><li>完全抽象（抽象类是半抽象的），或者说是一种特殊的抽象类</li><li>支持多继承，一个接口可以继承多个接口</li><li>接口中所有元素都是 public 修饰的</li><li>类和类之间叫做<strong>继承</strong>，类和接口之间叫做<strong>实现</strong>（可以看作继承）</li><li>当一个非抽象的类实现接口的话，<strong>必须将接口中所有的抽象方法全都实现</strong>（覆盖、重写）</li><li>一个类可以实现多个接口，这种机制弥补了 Java 中类与类之间的单继承带来的缺陷</li><li>接口与接口之间强制类型转换时无需继承关系（编译不报错，区别于类的强转），但运行时会出现 ClassCastException 异常</li><li>接口无构造方法</li></ol><blockquote><p>接口通常提取（抽象）的是行为动作（如：飞翔、游泳）</p></blockquote><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p><code>[修饰符列表] interface 接口名 &#123;&#125;</code></p><p>接口中只包含两部分：</p><ol><li>常量（static、final 修饰符可省略）</li><li>抽象方法（abstract 修饰符可省略）</li></ol><p>接口的实现使用关键字：<code>implements</code></p><blockquote><p>public 修饰符可省略</p><p>接口都是抽象方法，所以不能有方法体</p><p>接口支持多态</p><p>与 extends 并存的话，extends 在前，implements 在后</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 特殊的抽象类，完全抽象，叫做接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyMath</span> &#123;<br>    <span class="hljs-comment">// public static final double PI = 3.1415926;</span><br>    <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926</span>;<br>    <br>    <span class="hljs-comment">// public abstract int sum(int a, int b);</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br><span class="hljs-comment">// 非抽象类，名字随意，使用 implements</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMathImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyMath</span> &#123;<br>    <span class="hljs-comment">// 重写、覆盖、实现 接口中的方法（通常叫做实现）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a - b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="开发中的作用"><a href="#开发中的作用" class="headerlink" title="开发中的作用"></a>开发中的作用</h3><p>面向接口编程，类似于多态在开发中的作用，接口的使用离不开多态机制，能够降低调用者与使用者之间的耦合</p><blockquote><p>多态：面向抽象编程，不要面向具体编程，降低程序耦合度，提高程序扩展力</p></blockquote><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>餐厅吃饭</p><ul><li>菜单是一个接口</li><li>顾客负责调用接口</li><li>厨师负责实现这个接口（implements）</li></ul><p>餐厅的“菜单”，让“顾客”与“厨师”解耦合，他们之间通过菜单沟通</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TS01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 厨师准备好</span><br><span class="hljs-type">FoodMenu</span> <span class="hljs-variable">cc1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChinaChef</span>();<br><span class="hljs-type">FoodMenu</span> <span class="hljs-variable">wc1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WesternChef</span>();<br><br>        <span class="hljs-comment">// 顾客选择中国厨师</span><br><span class="hljs-type">Customer</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(cc1);<br>c1.order();<br><br>        <span class="hljs-comment">// 顾客选择西餐厨师</span><br><span class="hljs-type">Customer</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(wc1);<br>c2.order();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    Yummy Tomato Omelet</span><br><span class="hljs-comment">    Not bad Steak</span><br><span class="hljs-comment">    Can&#x27;t do this...</span><br><span class="hljs-comment">    Yummy Steak</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">FoodMenu</span> &#123;<br>    <span class="hljs-comment">// 菜单菜品（厨师负责实现）</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">tomatoOmelet</span><span class="hljs-params">()</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">steak</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-comment">// 顾客拥有菜单</span><br><span class="hljs-keyword">private</span> FoodMenu fm;<br><br>    <span class="hljs-comment">// 顾客选择不同厨师</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">()</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(FoodMenu fm)</span> &#123;<br><span class="hljs-built_in">this</span>.fm = fm;<br>&#125;<br><br>    <span class="hljs-comment">// 顾客点单</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">order</span><span class="hljs-params">()</span> &#123;<br>fm.tomatoOmelet();<br>fm.steak();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 中国厨师做菜</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChinaChef</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FoodMenu</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tomatoOmelet</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Yummy Tomato Omelet&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">steak</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Not bad Steak&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 西餐厨师做菜</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WesternChef</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FoodMenu</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tomatoOmelet</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Can&#x27;t do this...&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">steak</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Yummy Steak&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><table><thead><tr><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>半抽象</td><td>完全抽象</td></tr><tr><td>有构造方法</td><td>无构造方法</td></tr><tr><td>类与类之间仅单继承</td><td>接口与接口之间可多继承</td></tr><tr><td>一个抽象类只能继承一个类</td><td>一个类可以同时实现多个接口</td></tr></tbody></table><blockquote><p>以后接口使用的比抽象类多</p></blockquote><h1 id="Package-amp-Import"><a href="#Package-amp-Import" class="headerlink" title="Package &amp; Import"></a>Package &amp; Import</h1><h2 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h2><p>Java 中的包机制，作用是方便程序的管理</p><p>不同的功能类分别存放在不同的包下（按照功能划分）</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p><code>package [包名]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> code.Java.JavaSE.chapter17;<br></code></pre></td></tr></table></figure><ul><li>package 语句只允许出现在 java 源代码第一行</li></ul><h3 id="包名命名规范"><a href="#包名命名规范" class="headerlink" title="包名命名规范"></a>包名命名规范</h3><p>一般采用公司域名倒序（具有全球唯一性）</p><p><code>公司域名倒序 + 项目名 + 模块名 + 功能名</code></p><blockquote><p>带包名则称完整类名，否则为简类名</p></blockquote><h3 id="编译方法"><a href="#编译方法" class="headerlink" title="编译方法"></a>编译方法</h3><p>采用之前的编译&#x2F;运行方法无法通过</p><p>类名变成：<code>[包名].[类名]</code></p><ul><li><p>编译（带包生成）</p><p><code>javac -d . [类名].java</code></p><p>其中：</p><ul><li>javac 负责编译</li><li>-d 带包编译</li><li>. 代表编译后生成的文件放在当前目录</li><li>[类名].java 被编译的 java 文件名</li></ul></li><li><p>运行</p><p>将编译后的 class 文件放在包目录中，然后执行 <code>java [包名].[类名]</code></p></li></ul><blockquote><p>同一包下包名可省略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TS01.java</span><br><span class="hljs-keyword">package</span> code.java.javase.chapter17;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TS01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// TS02.java</span><br><span class="hljs-keyword">package</span> code.java.javase.chapter17;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TS02</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 创建 Hello World 对象</span><br>code.java.javase.chapter17.<span class="hljs-type">TS01</span> <span class="hljs-variable">ts01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">code</span>.java.javase.chapter17.TS01();<br>System.out.println(ts01);<br>        <br>        <span class="hljs-type">TS01</span> <span class="hljs-variable">ts02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TS01</span>();<br>        System.out.println(ts02);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h2><p>可以导入不同包中的类</p><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><p><code>import [包名].[类名];</code></p><ul><li><p>只能写在 package 之下，class 声明之上</p></li><li><p>还可以采用星号的方式，代表包下所有类</p></li></ul><blockquote><p>星号只能代表类，不能代表包名</p><p>星号效率不低，编译器在编译时，会自动根据需要，将星号转换为具体类名</p></blockquote><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p>Scanner 书写方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(System.in);<br></code></pre></td></tr></table></figure><p>其中：<code>java.util</code> 是包名，<code>Scanner</code> 是类名</p><p>可以使用 <code>import</code> 导入包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">// import java.util.*;</span><br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br></code></pre></td></tr></table></figure><h3 id="省略-import-的情形"><a href="#省略-import-的情形" class="headerlink" title="省略 import 的情形"></a>省略 import 的情形</h3><p>java.lang.* 包下的直接子类无需导入</p><p>同包下无需导入</p><p>其余一律需要</p><blockquote><p>import包路径：根据 <code>CLASSPATH</code> 配置搜索</p></blockquote><h1 id="访问控制权限符"><a href="#访问控制权限符" class="headerlink" title="访问控制权限符"></a>访问控制权限符</h1><p>用于限制访问权限，一共有4种</p><table><thead><tr><th>关键字</th><th>访问控制权限符</th><th>范围</th></tr></thead><tbody><tr><td>private</td><td>私有的</td><td>只能在本类中访问</td></tr><tr><td>protected</td><td>受保护的</td><td>只能在本类、同包、子类下访问</td></tr><tr><td>public</td><td>公开的</td><td>任何位置都可访问</td></tr><tr><td></td><td>默认</td><td>只能在本类、同包下访问</td></tr></tbody></table><h2 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h2><table><thead><tr><th>访问控制修饰符</th><th>本类</th><th>同包</th><th>子类</th><th>任意位置</th></tr></thead><tbody><tr><td>public</td><td>可以</td><td>可以</td><td>可以</td><td>可以</td></tr><tr><td>protected</td><td>可以</td><td>可以</td><td>可以</td><td>不行</td></tr><tr><td>默认</td><td>可以</td><td>可以</td><td>不行</td><td>不行</td></tr><tr><td>private</td><td>可以</td><td>不行</td><td>不行</td><td>不行</td></tr></tbody></table><h2 id="修饰范围"><a href="#修饰范围" class="headerlink" title="修饰范围"></a>修饰范围</h2><p>属性（4个都能用）</p><p>方法（4个都能用）</p><p>类（只有 public 与默认）</p><p>接口（只有 public 与默认）</p><p>……</p><blockquote><ol><li>每个编译单元（文件）都只能有一个 public 类，这表示，每个编译单元都有单一的公共接口，用 public 类来表现。该接口可以按要求包含众多的支持包访问权限的类。如果在某个编译单元内有一个以上的 public 类，编译器就会给出错误信息</li><li>public 类的名称必须完全与含有该编译单元的文件名相同，包含大小写。如果不匹配，同样将得到编译错误</li><li>虽然不是很常用，但编译单元内完全不带 public 类也是可能的。在这种情况下，可以随意对文件命名</li></ol><p>《Java编程思想（第四版）》6.4 类的访问权限</p></blockquote><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>在一个类的内部定义的类，成为内部类，主要分为：</p><ol><li>实例内部类：类似于实例变量</li><li>局部内部类：类似于局部变量<ul><li><strong>匿名内部类</strong></li></ul></li><li>静态内部类：类似于静态变量</li></ol><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>局部内部类的一种，因为这个类没有名字而得名</p><p>使用匿名内部类，可以不用写接口的实现类，直接在大括号内实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Compute为接口</span><br><span class="hljs-comment">// 大括号内为功能实现</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Compute</span>() &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>不建议使用，无法重复使用，且可读性太差</p><p>学习这个主要为了看懂别人代码 Orz</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Object-Oriented</tag>
      
      <tag>Advance</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java - IntelliJ IDEA</title>
    <link href="/2022/06/06/Java%20-%20IntelliJ%20IDEA/"/>
    <url>/2022/06/06/Java%20-%20IntelliJ%20IDEA/</url>
    
    <content type="html"><![CDATA[<h1 id="Before-Start"><a href="#Before-Start" class="headerlink" title="Before Start"></a>Before Start</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="软件本体"><a href="#软件本体" class="headerlink" title="软件本体"></a>软件本体</h3><p>软件本体下载：<a href="https://www.jetbrains.com/idea/">IDEA 官网下载地址</a></p><blockquote><p>如果打不开 Jetbrains 官网的话，可能是之前破解 Jetbrains 全家桶时，修改过本地的hosts文件，将 <code>0.0.0.0 account.jetbrains.com</code> 这句话删除即可</p></blockquote><h3 id="破解补丁"><a href="#破解补丁" class="headerlink" title="破解补丁"></a>破解补丁</h3><p>破解文件下载：<a href="**https://www.idzd.top/usr/uploads/2020/01/2368964038.rar**">IDEA 破解文件友链</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>Create Desktop Shortcut</strong>：选择电脑系统位数（32&#x2F;64）创建桌面快捷方式。</p><p><strong>Update PATH variable</strong>（restart needed）：添加环境变量（需要重启）。</p><p>Update context menu：在右键菜单中添加open folder as project选项。– 用处不大</p><p>Create Associations：文件关联（关联后该种文件会默认IDEA打开）。</p><p>Download and install JRE x86 by JetBrains：下载JRE （JetBrains运行时是一个运行时环境，用于在Windows，Mac OS X和Linux上运行基于IntelliJ平台的产品。） – 用不到</p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><ol><li><p>将破解文件 <strong>JetbrainsCrack.jar 放到一个目录</strong>（随意目录即可），<strong>记下目录的绝对路径</strong>。</p></li><li><p>选择试用30天，先打开IDEA</p></li><li><p><strong>修改 IDEA 配置文件</strong></p><p>如果你是第一次打开IDEA，<strong>选择 Configure – Edit Custom VM Options</strong></p><p>否则在 <strong>IDEA 里面打开：Help  –  Edit Custom VM Options</strong></p><p>在文件末尾加上破解jar包的绝对路径：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-javaagent:[file_path]\JetbrainsCrack.jar</span><br></code></pre></td></tr></table></figure></li><li><p><strong>修改本地hosts文件</strong></p><p><strong>打开 hosts 文件</strong>，<strong>末尾添加一行代码</strong>：</p><p>（Windows 下路径为：<code>C:\Windows\System32\drivers\etc\hosts</code>）</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">0.0.0.0</span> account.jetbrains.com<br></code></pre></td></tr></table></figure></li><li><p>重启IDEA，<strong>选择 Help – Register</strong></p><p>激活方式为 License server，激活地址填：<code>http://fls.jetbrains-agent.com</code></p></li></ol><h1 id="Using"><a href="#Using" class="headerlink" title="Using"></a>Using</h1><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>设置字体：<code>File -&gt; Settings -&gt; Editor -&gt; Font</code></p><p>设置主题：<code>File -&gt; Settings -&gt; Editor -&gt; Color Scheme</code></p><p>IDEA 会自动保存</p><p>运行：</p><ol><li>代码上右键</li><li>代码行左侧绿色箭头</li><li>菜单栏绿色箭头</li></ol><p>左侧目录窗口：</p><ol><li>上下键移动光标</li><li>左键折叠目录</li><li>右键展开目录</li></ol><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p>快速生成 main 方法：<code>psvm</code></p><p>快速生成 System.out.println()：<code>sout</code></p><h2 id="Shortcut"><a href="#Shortcut" class="headerlink" title="Shortcut"></a>Shortcut</h2><p>任何新建：<code>Alt + Insert</code>（包括文件、构造方法）</p><p>删除一行：<code>Ctrl + Y</code></p><p>折叠目录栏：<code>Ctrl + Shift + F12</code></p><p>切换文件：<code>Alt + 左右箭头</code></p><p>运行：<code>Shift + F10</code></p><p>打开功能栏：<code>Alt + 数字键</code></p><p>查看传入参数：<code>Ctrl + P</code>（光标移入括号内）</p><p>注释：</p><ol><li>单行注释：<code>Ctrl + /</code></li><li>多行注释：<code>Ctrl + Shift + /</code></li></ol><p>定位方法&#x2F;属性&#x2F;变量：<code>Ctrl + 选中点击</code></p><p>复制一行：<code>Ctrl + D</code></p><p>纠正错误：<code>Alt + Enter</code></p><p>搜索类：<code>双击 Shift</code></p><p>快速定位属性或方法：<code>Ctrl + F12</code></p><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><h2 id="关闭右上角-Git，切换为-VCS"><a href="#关闭右上角-Git，切换为-VCS" class="headerlink" title="关闭右上角 Git，切换为 VCS"></a>关闭右上角 Git，切换为 VCS</h2><p><code>File -&gt; Setting -&gt; Version Control</code></p><p>VCS 中 Git 切换为 none</p><h2 id="Unable-to-open-debugger-port"><a href="#Unable-to-open-debugger-port" class="headerlink" title="Unable to open debugger port"></a>Unable to open debugger port</h2><ol><li><p>修改服务器端口</p></li><li><p>cmd 搜索端口进程</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">netstat -ano|<span class="hljs-built_in">findstr</span> &quot;[errorMsg port]&quot;<br></code></pre></td></tr></table></figure><p>根据 pid 强制关闭该进程</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">taskkill</span> -f -pid [pid]<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
      <tag>Crack</tag>
      
      <tag>Tip</tag>
      
      <tag>Command</tag>
      
      <tag>Shortcut</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note00 Mechanism</title>
    <link href="/2022/05/26/JavaSE%20-%20Note00%20Mechanism/"/>
    <url>/2022/05/26/JavaSE%20-%20Note00%20Mechanism/</url>
    
    <content type="html"><![CDATA[<h1 id="cmd-命令行编译方法"><a href="#cmd-命令行编译方法" class="headerlink" title="cmd 命令行编译方法"></a>cmd 命令行编译方法</h1><ul><li><p>第一种方式</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javac </span>Student.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">javac </span>StudentTest.<span class="hljs-keyword">java</span><br></code></pre></td></tr></table></figure></li><li><p>第二种方式</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javac </span>StudentTest.<span class="hljs-keyword">java</span><br></code></pre></td></tr></table></figure></li><li><p>第三种方式</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">javac</span> <span class="hljs-regexp">*.java</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="关于垃圾回收器（GC）"><a href="#关于垃圾回收器（GC）" class="headerlink" title="关于垃圾回收器（GC）"></a>关于垃圾回收器（GC）</h1><p>在 Java 语言中，垃圾回收器主要针对的是堆内存，当一个 Java 对象没有任何引用指向该对象时，GC 会考虑将该垃圾数据释放回收掉</p><h1 id="JVM-内存中存储类型"><a href="#JVM-内存中存储类型" class="headerlink" title="JVM 内存中存储类型"></a>JVM 内存中存储类型</h1><p>Java 中的三大变量</p><p><img src="/images/image-java/note04-03-java%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%8F%98%E9%87%8F.png" alt="Java 中的三大变量"></p><h1 id="退出-JVM"><a href="#退出-JVM" class="headerlink" title="退出 JVM"></a>退出 JVM</h1><p><code>System.exit(0);</code></p><p>其中：</p><ul><li>0 代表正常退出</li><li>任意数字（例如 -1）代表异常状态退出</li></ul><h1 id="x3D-x3D-amp-amp-equals"><a href="#x3D-x3D-amp-amp-equals" class="headerlink" title="&#x3D;&#x3D; &amp;&amp; equals"></a>&#x3D;&#x3D; &amp;&amp; equals</h1><p>基本数据类型使用 <code>==</code>比较是否相等</p><p>引用数据类型统一使用 <code>equals()</code> 方法比较是否相等</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mechanism</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note04 Static, This &amp; Super</title>
    <link href="/2022/05/12/JavaSE%20-%20Note04%20Static,%20This%20&amp;%20Super/"/>
    <url>/2022/05/12/JavaSE%20-%20Note04%20Static,%20This%20&amp;%20Super/</url>
    
    <content type="html"><![CDATA[<h1 id="Static（静态）"><a href="#Static（静态）" class="headerlink" title="Static（静态）"></a>Static（静态）</h1><p>static 修饰的变量：静态变量</p><p>static 修饰的方法：静态方法</p><ul><li><p>所有 static 修饰的都是类相关的，类级别的</p></li><li><p>类加载时便初始化，无需 <code>new</code> 存储在方法区</p></li></ul><blockquote><p>静态变量不会出现空指针异常，因为静态变量不需要对象的存在（实际上运行中 <code>引用.</code> 会自动转换为 <code>类名.</code></p></blockquote><h2 id="引用规则"><a href="#引用规则" class="headerlink" title="*引用规则"></a>*引用规则</h2><p><strong>实例一定要使用 <code>引用.</code> 来访问，静态建议使用 <code>类名.</code> 来访问</strong></p><blockquote><p>如果类中所有对象某个属性值都一样，建议定义为静态变量，在方法区中只保留一份，节省内存开销</p></blockquote><h2 id="参考标准"><a href="#参考标准" class="headerlink" title="参考标准"></a>参考标准</h2><p>当方法体中访问了实例变量，那么这个方法一定是实例方法</p><blockquote><p>一般工具类为了方便使用静态</p><p>多个对象时采用实例</p></blockquote><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TS01_Static.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TS01_Static</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(Chinese.contry);<br><br><span class="hljs-type">Chinese</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(<span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-string">&quot;vv&quot;</span>);<br><span class="hljs-type">Chinese</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(<span class="hljs-string">&quot;102&quot;</span>, <span class="hljs-string">&quot;yy&quot;</span>);<br><br>System.out.println(c1.idCard);<br>System.out.println(c1.name);<br>System.out.println(Chinese.contry);<br><br>System.out.println(c2.idCard);<br>System.out.println(c2.name);<br>System.out.println(Chinese.contry);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chinese</span> &#123;<br>String idCard;<br>String name;<br><span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">contry</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;China&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Chinese</span><span class="hljs-params">()</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Chinese</span><span class="hljs-params">(String i, String n)</span> &#123;<br>idCard = i;<br>name = n;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Computational Results:</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    China</span><br><span class="hljs-comment">    101</span><br><span class="hljs-comment">    vv</span><br><span class="hljs-comment">    China</span><br><span class="hljs-comment">    102</span><br><span class="hljs-comment">    yy</span><br><span class="hljs-comment">    China</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="/images/image-java/note04-01-static%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="static 静态变量内存图"></p><table><thead><tr><th></th><th>栈</th><th>堆</th><th>方法区</th></tr></thead><tbody><tr><td>存储类型</td><td>局部变量</td><td>实例变量</td><td>静态变量</td></tr><tr><td>级别</td><td>方法级别</td><td>对象级别</td><td>类级别</td></tr></tbody></table><h2 id="Static-Block（静态代码块）"><a href="#Static-Block（静态代码块）" class="headerlink" title="Static Block（静态代码块）"></a>Static Block（静态代码块）</h2><p>执行优先级高于非静态的初始化块，<strong>它会在类初始化的时候执行一次</strong>，执行完成便销毁，它仅能初始化类变量，即 static 修饰的数据成员</p><ul><li>在 <code>main()</code> 方法前执行</li><li>自上而下执行</li><li>一个类中可以编写多个静态代码块</li></ul><blockquote><p>不常用，是一个类加载时机。例如可以存放类加载日志信息</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    java code...;<br>    java code...;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TS02_StaticBlock.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TS02_StaticBlock</span> &#123;<br><span class="hljs-keyword">static</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">static</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;main() Start!&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">static</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Computational Result:</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    A</span><br><span class="hljs-comment">    B</span><br><span class="hljs-comment">    C</span><br><span class="hljs-comment">    main Strat!</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ul><li><p><code>static</code> 静态变量和静态代码块加载时机相同，靠代码先后次序决定执行顺序</p></li><li><p>目前为止的所有 Java 程序，哪些部分是由顺序要求的？</p></li></ul><ol><li>方法体中的代码，遵循自上而下的原则</li><li>静态变量和静态代码块之间</li><li>静态代码块彼此之间</li></ol><h2 id="Instance-Block（实例代码块）"><a href="#Instance-Block（实例代码块）" class="headerlink" title="Instance Block（实例代码块）"></a><em>Instance Block（实例代码块）</em></h2><p>实例语句块，是在构造方法前执行的代码（对象构建时机）</p><blockquote><p>可以将构造方法中重复的代码放在实例代码块中</p></blockquote><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a><em>语法</em></h3><p><code>&#123;java code...;&#125;</code></p><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a><em>执行顺序</em></h3><p>实例语句块在类加载时没有执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TS04_InstanceBlock.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TS04_InstanceBlock</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;main() go&quot;</span>);<br>&#125;<br><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;实例语句块 go&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TS04_InstanceBlock</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;无参数实例构造方法 go&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    main() go</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>实例化对象，调用无参构造方法后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TS04_InstanceBlock.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TS04_InstanceBlock</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;main() go&quot;</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">TS04_InstanceBlock</span>();<br>&#125;<br><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;实例语句块 go&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TS04_InstanceBlock</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;无参数实例构造方法 go&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    main() go</span><br><span class="hljs-comment">    实例语句块 go</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="Code-Order-Quiz"><a href="#Code-Order-Quiz" class="headerlink" title="Code Order Quiz"></a>Code Order Quiz</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 判断以下程序的执行顺序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TS05_CodeOrder</span> &#123;<br><span class="hljs-keyword">static</span> &#123;<br>System.out.println(<span class="hljs-string">&#x27;A&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;main() go&quot;</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">TS05_CodeOrder</span>();<br>System.out.println(<span class="hljs-string">&quot;main() stop&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">TS05_CodeOrder</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&#x27;B&#x27;</span>);<br>&#125;<br><br>&#123;<br>System.out.println(<span class="hljs-string">&#x27;C&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">static</span> &#123;<br>System.out.println(<span class="hljs-string">&#x27;x&#x27;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">A</span><br><span class="hljs-comment">X</span><br><span class="hljs-comment">main() go</span><br><span class="hljs-comment">C</span><br><span class="hljs-comment">B</span><br><span class="hljs-comment">main() stop</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="This"><a href="#This" class="headerlink" title="This"></a>This</h1><p>this 是一个关键字，保存着当前对象的内存地址，指向自身</p><ul><li>this 是一个变量，一个引用</li><li>一个对象一个 this</li><li>存储在堆内存的对象当中</li></ul><blockquote><p>谁调用这个实例方法，this 就是谁（代表当前对象）</p><p>访问自身类中实例变量，<code>this.</code> 可省略（大部分）</p><p>静态变量无法使用 this</p></blockquote><p><img src="/images/image-java/note04-02-this%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="this 内存图"></p><h2 id="this-何时不可省略？"><a href="#this-何时不可省略？" class="headerlink" title="this 何时不可省略？"></a>this 何时不可省略？</h2><p>在实例方法中，或者构造方法中，为了区分实例变量和局部变量，<code>this.</code> 不可省略</p><p>根据就近原则，实例方法中局部变量命名重复：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>    no = no;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>this.</code> 来区分实例变量和局部变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>    <span class="hljs-built_in">this</span>.no = no;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="构造方法调用构造方法"><a href="#构造方法调用构造方法" class="headerlink" title="构造方法调用构造方法"></a>构造方法调用构造方法</h2><p>构造方法中可以通过 <code>this()</code> 来调用另一个构造方法</p><ul><li>构造方法1和构造方法2需要在同一个类中</li><li><code>this()</code> 必须是构造方法中的第一行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Date</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    this.year = year;</span><br><span class="hljs-comment">    this.month = month;</span><br><span class="hljs-comment">    this.day = day;</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">this</span>(<span class="hljs-number">1970</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Date</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> &#123;<br>    <span class="hljs-built_in">this</span>.year = year;<br>    <span class="hljs-built_in">this</span>.month = month;<br>    <span class="hljs-built_in">this</span>.day = day;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Super"><a href="#Super" class="headerlink" title="Super"></a>Super</h1><p>是一个关键字，表示通过子类的构造方法调用父类的构造方法，代表了当前对象父类型特征</p><blockquote><p>模拟现实中：要想有儿子，需要先有父亲</p><p>父类构造方法连续调用，实际上对象只创建了一个</p></blockquote><p><img src="/images/image-java/note04-04-super%E7%9A%84%E5%8E%9F%E7%90%86.png" alt="super 的原理"></p><h2 id="Super-的使用"><a href="#Super-的使用" class="headerlink" title="Super 的使用"></a>Super 的使用</h2><p><code>super.属性名</code>【访问父类的属性】</p><p><code>super.方法名(实参)</code>【访问父类的方法】</p><p><code>super(实参)</code>【调用父类的构造方法】</p><h2 id="this-amp-super"><a href="#this-amp-super" class="headerlink" title="this &amp; super"></a>this &amp; super</h2><table><thead><tr><th>this</th><th>super</th></tr></thead><tbody><tr><td>出现在实例方法和构造方法中</td><td>出现在实例方法和构造方法中</td></tr><tr><td>语法是：<code>this.</code>、<code>this()</code></td><td>语法是：<code>super.</code>、<code>super()</code></td></tr><tr><td>不能使用在静态方法中</td><td>不能使用在静态方法中</td></tr><tr><td><code>this.</code> 大部分情况可以省略</td><td><code>super.</code> 大部分情况可以省略</td></tr><tr><td><code>this.</code> 在区分同名局部变量和实例变量时不能省略</td><td><code>super.</code> 在区分子类和父类同名属性时不能省略</td></tr><tr><td><code>this()</code> 只能出现在构造方法第一行，通过当前构造方法调用“本类”中其他构造方法，目的是“代码复用”</td><td><code>this()</code> 只能出现在构造方法第一行，通过当前构造方法调用“父类”中其他构造方法，目的是“代码复用”</td></tr><tr><td><code>this</code> 可以单独输出，默认调用  <code>toString()</code> 打印引用地址</td><td><code>super</code> 不能单独输出，不是引用，不保存内存地址，不指向任何对象，只代表当前对象内部父类型特征</td></tr></tbody></table><h2 id="重要结论"><a href="#重要结论" class="headerlink" title="重要结论"></a>重要结论</h2><p>当一个构造方法第一行既没有 this() 也没有 super()，默认会有一个 super()，表示通过当前子类的构造方法调用父类的无参数构造方法，所以<strong>必须保证父类中无参构造方法是存在的</strong></p><blockquote><p>this() 和 super() 不能共存，都只能出现在构造方法第一行</p><p>无论如何，父类的构造方法都会先执行</p><p>不管 new 什么对象，最终都会执行 Object 无参构造方法</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Static</tag>
      
      <tag>This</tag>
      
      <tag>Super</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note03 Characteristics of OO</title>
    <link href="/2022/05/12/JavaSE%20-%20Note03%20Characteristics%20of%20OO/"/>
    <url>/2022/05/12/JavaSE%20-%20Note03%20Characteristics%20of%20OO/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h1><p>封装（Encapsulation）</p><p>继承（Inheritance）</p><p>多态（Mixins）</p><blockquote><p>封装 -&gt; 继承 -&gt; 多态</p></blockquote><h1 id="封装（面向对象的首要特征）"><a href="#封装（面向对象的首要特征）" class="headerlink" title="封装（面向对象的首要特征）"></a>封装（面向对象的首要特征）</h1><ol><li>保证内部结构安全</li><li>屏蔽复杂，暴露简单</li></ol><blockquote><p>在代码级别上，一个类体中的数据，对于调用者来说，不需要关心代码的复杂实现，只需要通过一个简单的入口就可以访问。另外类体中安全级别较高的数据封装起来，外部人员不能随意访问，以保证数据的安全性</p></blockquote><h2 id="封装实现"><a href="#封装实现" class="headerlink" title="封装实现"></a>封装实现</h2><ol><li>属性私有化（使用 <code>private</code> 关键字进行修饰）</li><li>对外提供简单的操作入口（都不带 <code>static</code>，都是实例方法&#x2F;对象方法）</li></ol><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><ol><li><p>带有 static 的方法</p><p>通过“类名.”的方式访问</p></li><li><p>没有 static 的方法（实例方法&#x2F;对象方法，对象级别的方法）</p><p>先 <code>new</code> 对象，通过“引用.”的方式去访问</p></li></ol><blockquote><p>对象被称为实例</p><p>实例相关的有：实例变量、实例方法</p><p>实例变量是对象变量，实例方法是对象方法</p></blockquote><h1 id="继承-Extends"><a href="#继承-Extends" class="headerlink" title="继承 Extends"></a>继承 Extends</h1><p>基本作用：子类继承父类，代码可以得到复用</p><p>主要作用：有了继承关系，才有了后期的方法覆盖和多态机制</p><h2 id="继承语法"><a href="#继承语法" class="headerlink" title="继承语法"></a>继承语法</h2><p><code>class B extends A</code></p><p>A 为父类，B 为子类，A 类继承给 B 类，B 类继承 A 类</p><h2 id="继承的相关特性"><a href="#继承的相关特性" class="headerlink" title="继承的相关特性"></a>继承的相关特性</h2><ol><li><p>B 类继承 A 类，则 A 类称为超类（superclass）、父类、基类</p><p>B 类则称为子类（subclass）、派生类、扩展类</p></li><li><p>Java 中只支持单继承，而 C++ 中才支持多继承（体现简单性）</p><p>eg. <code>class C extend A, B &#123;&#125;</code></p></li><li><p>虽然 Java 不支持多继承，但是可以采用间接继承的效果，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>其中：B 直接继承 A，C 直接继承 B、间接继承 A</p></li><li><p>子类继承父类，仅构造方法无法继承，且父类私有属性无法在子类中直接访问</p></li><li><p>Java 中的类没有显式继承任何类，则默认继承 Object 类，这是 Java 语言提供的根类，一个对象与生俱来就有 Object 类型中所有特征</p></li><li><p>继承缺点：代码耦合度高，父类修改，子类受牵连</p></li></ol><h2 id="继承使用时机"><a href="#继承使用时机" class="headerlink" title="继承使用时机"></a>继承使用时机</h2><p>凡是能用 “is a” 描述的，都可以继承</p><p>eg. Cat is a Animal</p><blockquote><p>凡是能用 “have&#x2F;has a” 描述的，属于关联关系，统一以属性的方式存在</p><p>eg. Customer has a food menu</p><p>凡是能用 “like a” 描述的，表示实现关系，通常是类实现接口</p><p>eg. Chef like a menu</p></blockquote><h2 id="Object-class"><a href="#Object-class" class="headerlink" title="Object.class"></a>Object.class</h2><p>目录：<code>%JAVA_HOME%/lib/src.zip</code></p><ul><li><p><code>toString()</code></p><p>将“Java 对象”转换成“字符串”的形式，返回 <code>[class_name]@[hash_address]</code></p><p>eg. <code>System.out.println(引用.toString);</code></p><blockquote><p>当直接输出一个“引用”时，println() 方法会自动调用 <code>.toString()</code></p><p>可以进行方法覆盖，类名可以直接返回想要结果</p></blockquote></li></ul><h1 id="方法覆盖-amp-多态"><a href="#方法覆盖-amp-多态" class="headerlink" title="方法覆盖 &amp; 多态"></a>方法覆盖 &amp; 多态</h1><h2 id="方法覆盖-x2F-方法重写（Override-x2F-Overwrite）"><a href="#方法覆盖-x2F-方法重写（Override-x2F-Overwrite）" class="headerlink" title="方法覆盖&#x2F;方法重写（Override&#x2F;Overwrite）"></a>方法覆盖&#x2F;方法重写（Override&#x2F;Overwrite）</h2><p>子类继承父类之后，当继承过来的方法无法满足当前子类的业务需求时，有必要进行“方法覆盖”</p><p>当子类对父类继承过来的方法进行“方法覆盖“之后，子类对象调用该方法的时候，<strong>一定执行覆盖之后的方法</strong></p><h3 id="构成条件"><a href="#构成条件" class="headerlink" title="构成条件"></a>构成条件</h3><ol><li>两个类必须有继承关系</li><li>重写之后的方法与之前的方法具有相同的<strong>返回值类型、方法名、参数列表</strong></li><li>访问权限不能更低，只能更高（public &gt; protected） </li><li>重写之后的方法不能比之前的方法抛出更多的异常，可以更少</li></ol><blockquote><p>注意事项：</p><ol><li>方法覆盖只针对方法，和属性无关</li><li>私有方法无法覆盖</li><li>构造方法不能被继承（也不能被覆盖）</li><li>方法覆盖只针对实例方法，静态方法覆盖无意义</li><li>基本返回值类型必须相同，应用返回值类型可以更小（子类）</li></ol></blockquote><h3 id="方法重载与方法覆盖区别"><a href="#方法重载与方法覆盖区别" class="headerlink" title="方法重载与方法覆盖区别"></a>方法重载与方法覆盖区别</h3><ul><li>重载发生在同一类中；覆盖发生在具有继承关系的父子类中</li><li>重载方法名相同，参数列表不同；覆盖除方法体外皆相同</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="*多态"></a>*多态</h2><p>多种形态，多种状态</p><p>父类型引用指向子类型对象，过程包括编译阶段和运行阶段</p><ul><li>编译阶段：绑定父类的方法</li><li>运行阶段：动态绑定子类型对象的方法</li></ul><blockquote><p>编译的时候一种形态，运行的时候另一种形态</p></blockquote><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ol><li><p>向上转型（upcasting）</p><p><code>Animal a1 = new Cat();</code></p><p>子 转 父 （自动类型转换）</p></li><li><p>向下转型（downcasting）</p><p><code>Cat c1 = (Cat)a1;</code></p><p>父 转 子 （强制类型转换，需要加强制类型转换符）</p><blockquote><p>当需要访问子类对象中特有的方法时才需要向下转型</p><p>向下转型（强制）存在风险</p></blockquote></li></ol><p>*<strong>大前提是有继承关系</strong></p><blockquote><p>多态转型使用向上&#x2F;向下类型转换术语，自动&#x2F;强制类型转换使用于基本数据类型</p></blockquote><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>父类 Animal，拥有 move() 方法；子类 Cat，拥有 move() 方法、catchMouse() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 向上转型（自动）</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>a1.move();<br><br><span class="hljs-comment">// 向下转型（强制）</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><span class="hljs-type">Cat</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> (Cat)a2;<br>c1.catchMouse()<br></code></pre></td></tr></table></figure><p>Java 程序分为编译阶段和运行阶段</p><h4 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h4><p>对于编译器而言，编译器只知道 a1 的类型是 Animal，所以编译器在检查语法的时候，会去 Animal.class 字节码文件中找 move() 方法，找到后绑定上 move() 方法，编译通过，静态绑定成功（编译器阶段属于静态绑定）</p><h4 id="运行阶段"><a href="#运行阶段" class="headerlink" title="运行阶段"></a>运行阶段</h4><p>运行阶段的时候，实际上在堆内存中创建的 Java 对象是 Cat 对象，所以 move 的时候，真正参与 move 的对象是一只猫，所以运行阶段会动态执行 cat 对象的 move 方法，这个过程属于运行阶段绑定（运行阶段绑定属于动态绑定）</p><h3 id="类型转换异常"><a href="#类型转换异常" class="headerlink" title="类型转换异常"></a>类型转换异常</h3><p>java.lang.ClassCastException</p><p>父类 Animal，子类 Cat 与 Bird</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Bird 向上转型为 Animal a1</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bird</span>;<br><span class="hljs-comment">// a1 向下转型为 Cat c1</span><br><span class="hljs-type">Cat</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> (Cat)a1;<br>c1.catchMouse();<br><br><span class="hljs-comment">// 编译通过，运行报错</span><br></code></pre></td></tr></table></figure><p>编译器检测 a6 这个引用是 Animal 类型，与 Cat 存在继承关系，可以通过</p><p>而运行阶段，堆内存中 a1 实际创建的是 Bird 对象，Bird 向下转换为 Cat 时，由于无继承关系，导致出现类型转换异常</p><h4 id="如何避免？"><a href="#如何避免？" class="headerlink" title="如何避免？"></a>如何避免？</h4><p>使用 <code>instanceof</code> 运算符，可以在<strong>运行阶段动态判断</strong>引用指向的对象类型</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p><code>引用 instanceof 类型</code></p><h5 id="运算结果"><a href="#运算结果" class="headerlink" title="运算结果"></a>运算结果</h5><p>只能是：true&#x2F;false</p><p>假设 <code>a1 instanceof Cat</code></p><ul><li>true：a1 引用指向的堆内存中的 Java 对象是一个 Cat</li><li>false：a1 引用指向的堆内存中的 Java 对象不是一个 Cat</li></ul><p>以上代码可修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果 a1 是一只 Cat，则进行向下转换</span><br><span class="hljs-keyword">if</span> (a1 <span class="hljs-keyword">instanceof</span> Cat) &#123;<br>    <span class="hljs-type">Cat</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> (Cat)a1;<br>    a1.catchMouse();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Java 规范中要求：凡是对类型进行向下转型，一定要使用 <code>instanceof</code> 运算符进行判断</p></blockquote><h3 id="开发中的作用"><a href="#开发中的作用" class="headerlink" title="*开发中的作用"></a>*开发中的作用</h3><p>降低程序的耦合度，提高程序的扩展力（面向父类型编程、面向更加抽象进行编程）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Dog d1)</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Cat c1)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中 Master 与 Dog 及 Cat 关系很紧密（耦合度高），导致扩展力差</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">(Pet p1)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中 Master 与 Dog 及 Cat 关系就脱离了，Master 关注 Pet 类，这样就降低了耦合度，提高扩展性</p><blockquote><p>软件开发有七大原则，其中 OCP（开闭原则）：对扩展开放，对修改关闭</p><p>软件扩展过程中，修改的越少越好</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>封装、继承、多态一环扣一环</p><p>有了封装后，对象和对象之间产生了继承</p><p>有了继承后，才有方法的覆盖和多态</p><blockquote><p>私有方法不能覆盖</p><p>静态方法不考虑覆盖</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Encapsulation</tag>
      
      <tag>Inheritance</tag>
      
      <tag>Mixins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL - Note03 Storage Engine, Transaction, Index and View</title>
    <link href="/2022/05/11/MySQL%20-%20Note03%20Storage%20Engine,%20Transaction,%20Index%20and%20View/"/>
    <url>/2022/05/11/MySQL%20-%20Note03%20Storage%20Engine,%20Transaction,%20Index%20and%20View/</url>
    
    <content type="html"><![CDATA[<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a><em>存储引擎</em></h1><p>MySQL特有（Oracle对应的机制就叫”存储方式“），描述的是底层表的存储方式</p><p>通过 <code>show create table [table_name]</code> 查看表的存储引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查看表的存储引擎<br>show create table emp;<br>/*<br>...<br>ENGINE=InnoDB DEFAULT CHARSET=utf8<br>*/<br></code></pre></td></tr></table></figure><h2 id="完整的建表语句"><a href="#完整的建表语句" class="headerlink" title="完整的建表语句"></a>完整的建表语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `[table_name]` (<br>`id` int(11) DEFAULT NULL<br>) ENGINE=InnoDB DEFAULT CHARSET=utf-8;<br># 在MySQL当中，凡是标识符都可以用飘号“`”括起来（不通用）<br># 建表时可以指定存储引擎，也可以指定字符集<br># 默认引擎是 InnoDB，默认字符集是 utf-8<br></code></pre></td></tr></table></figure><h2 id="查看-MySQL-当前版本支持的存储引擎"><a href="#查看-MySQL-当前版本支持的存储引擎" class="headerlink" title="查看 MySQL 当前版本支持的存储引擎"></a>查看 MySQL 当前版本支持的存储引擎</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查看当前版本<br>select version();<br>/*<br>    +-----------+<br>    | version() |<br>    +-----------+<br>    | 5.5.28    |<br>    +-----------+<br>    1 row in set (0.01 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查看存储引擎<br>show engines \G;<br>/*<br>    *************************** 1. row ***************************<br>          Engine: FEDERATED<br>         Support: NO<br>         Comment: Federated MySQL storage engine<br>    Transactions: NULL<br>              XA: NULL<br>      Savepoints: NULL<br>    *************************** 2. row ***************************<br>          Engine: MRG_MYISAM<br>         Support: YES<br>         Comment: Collection of identical MyISAM tables<br>    Transactions: NO<br>              XA: NO<br>      Savepoints: NO<br>    *************************** 3. row ***************************<br>          Engine: MyISAM<br>         Support: YES<br>         Comment: MyISAM storage engine<br>    Transactions: NO<br>              XA: NO<br>      Savepoints: NO<br>    *************************** 4. row ***************************<br>          Engine: BLACKHOLE<br>         Support: YES<br>         Comment: /dev/null storage engine (anything you write to it disappears)<br>    Transactions: NO<br>              XA: NO<br>      Savepoints: NO<br>    *************************** 5. row ***************************<br>          Engine: CSV<br>         Support: YES<br>         Comment: CSV storage engine<br>    Transactions: NO<br>              XA: NO<br>      Savepoints: NO<br>    *************************** 6. row ***************************<br>          Engine: MEMORY<br>         Support: YES<br>         Comment: Hash based, stored in memory, useful for temporary tables<br>    Transactions: NO<br>              XA: NO<br>      Savepoints: NO<br>    *************************** 7. row ***************************<br>          Engine: ARCHIVE<br>         Support: YES<br>         Comment: Archive storage engine<br>    Transactions: NO<br>              XA: NO<br>      Savepoints: NO<br>    *************************** 8. row ***************************<br>          Engine: InnoDB<br>         Support: DEFAULT<br>         Comment: Supports transactions, row-level locking, and foreign keys<br>    Transactions: YES<br>              XA: YES<br>      Savepoints: YES<br>    *************************** 9. row ***************************<br>          Engine: PERFORMANCE_SCHEMA<br>         Support: YES<br>         Comment: Performance Schema<br>    Transactions: NO<br>              XA: NO<br>      Savepoints: NO<br>    9 rows in set (0.01 sec)<br>*/<br></code></pre></td></tr></table></figure><h2 id="常见的存储引擎"><a href="#常见的存储引擎" class="headerlink" title="常见的存储引擎"></a>常见的存储引擎</h2><h3 id="MyISAM-引擎"><a href="#MyISAM-引擎" class="headerlink" title="MyISAM 引擎"></a>MyISAM 引擎</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml">      <span class="hljs-attr">Engine:</span> <span class="hljs-string">MyISAM</span><br>     <span class="hljs-attr">Support:</span> <span class="hljs-literal">YES</span><br>     <span class="hljs-attr">Comment:</span> <span class="hljs-string">MyISAM</span> <span class="hljs-string">storage</span> <span class="hljs-string">engine</span><br><span class="hljs-attr">Transactions:</span> <span class="hljs-literal">NO</span><span class="hljs-string">//</span> <span class="hljs-string">不支持事务</span><br>          <span class="hljs-attr">XA:</span> <span class="hljs-literal">NO</span><br>  <span class="hljs-attr">Savepoints:</span> <span class="hljs-literal">NO</span><br></code></pre></td></tr></table></figure><ul><li>最常用的存储引擎，但不是默认的</li><li>具有以下特征：<ul><li>使用三个文件表示每个表<ol><li>格式文件 - 存储表结构的定义（[table].frm）</li><li>数据文件 - 存储表行的内容（[table].MYD）</li><li>索引文件 - 存储表上的索引（[table].MYI）</li></ol></li><li>灵活的 AUTO_INCREMENT 字段处理</li><li>可被转换为压缩、只读表来节省空间</li></ul></li></ul><h3 id="InnoDB-引擎"><a href="#InnoDB-引擎" class="headerlink" title="InnoDB 引擎"></a>InnoDB 引擎</h3><pre><code class="hljs">      Engine: InnoDB     Support: DEFAULT     Comment: Supports transactions, row-level locking, and foreign keys// 支持事务、行级锁、外键Transactions: YES          XA: YES  Savepoints: YES</code></pre><ul><li>MySQL 中缺省引擎，安全得到保障</li><li>具有以下特征：<ul><li>每个 InnoDB 表在数据库目录中以 .frm 格式文件表示</li><li>InnoDB 表空间 tablespace 被用于存储表内容</li><li>提供一组用来记录事务性活动的日志文件</li><li>用 COMMIT（提交）、SAVEPOINT、ROLLBACK（回滚）支持事务处理</li><li>提供全 ACID 兼容</li><li>在 MySQL 数据库崩溃后提供自动恢复</li><li>多版本（MVCC）和行级锁定</li><li>支持外键及引用的完整性，包括级联删除和更新</li></ul></li></ul><h3 id="MEMORY-引擎"><a href="#MEMORY-引擎" class="headerlink" title="MEMORY 引擎"></a>MEMORY 引擎</h3><pre><code class="hljs">      Engine: MEMORY     Support: YES     Comment: Hash based, stored in memory, useful for temporary tablesTransactions: NO          XA: NO  Savepoints: NO</code></pre><ul><li>缺点：不支持事务、数据容易丢失（所有数据和索引存储在内存）</li><li>优点：查询速度最快</li><li>具有以下特征：<ul><li>在数据库目录内，每个表均以 .frm 格式的文件表示</li><li><strong>表数据及索引</strong>被存在<strong>内存</strong>中</li><li>表级锁机制</li><li>不能包含 TEXT 或 BLOB 字段</li></ul></li></ul><blockquote><p>以前叫做 HEAP 引擎</p></blockquote><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>一个事务是一个完整的业务逻辑单元，不可再分</p><blockquote><p>多条 DML 语句捆绑一起，同时成功&#x2F;同时失败</p></blockquote><p>例如：银行账户转账，从 A 账户向 B 账户转账10000，需要执行两条 update 语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update t_act set balance = balance - 10000 where actno = &#x27;act-01&#x27;;<br>update t_act set balance = balance + 10000 where actno = &#x27;act-02&#x27;;<br></code></pre></td></tr></table></figure><p>以上两条 DML 语句必须同时成功或同时失败</p><ul><li>和事务相关的语句只有 DML 语句（insert delete updat）</li><li>事务的存在是为了保证数据的完整性、安全性</li></ul><p>原理：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">开启事务机制（开始）<br><br>执行 insert 语句：执行成功后，将执行记录到数据库的操作历史中，并不会向文件中保存一条数据，不会真正地修改硬盘上的数据<br>执行 <span class="hljs-string">...</span> 语句<br><span class="hljs-string">...</span><br><br>提交事务或回滚事务（结束）<br></code></pre></td></tr></table></figure><ul><li>提交事务：将历史操作同步到硬盘文件中，然后清空历史记录</li><li>回滚事务：直接清空历史记录</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>事务包括四大特性：ACID</p><p>A 原子性：事务是最小的工作单元，不可再分</p><p>C 一致性：事务必须保证多条 DML 语句同时成功&#x2F;失败</p><p>I 隔离性：事务 A 与事务 B 之间具有隔离性</p><p>D 持久性：最终数据必须持久化到硬盘文件才算成功结束</p><h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><p>事务隔离性存在隔离级别，理论上隔离级别包括4个：</p><ol><li><p>读未提交（read uncommitted）</p><p>对方事务还没有提交，当前事务可以读取到对方未提交的数据</p><ul><li>问题：存在脏读（Dirty Read）现象：表示读到了脏的数据</li></ul></li><li><p>读已提交（read committed）</p><p>对方事务提交之后的数据我方可读取到</p><ul><li><p>解决：脏读现象</p></li><li><p>问题：不可重复读</p></li></ul></li><li><p>可重复读（repeatable read）</p><p>可以重复读取我方当前事务的数据</p><ul><li>解决：不可重复读问题</li><li>问题：读取到的数据是幻象</li></ul></li><li><p>序列化读&#x2F;串行化读</p><p>事务同步提交，必须排队</p><ul><li>解决：所有问题</li><li>问题：效率低下</li></ul></li></ol><p>Oracle 数据库默认的隔离级别是：第二级 读已提交</p><p>MySQL 数据默认的隔离级别是：第三级 可重复读</p><h2 id="演示事务"><a href="#演示事务" class="headerlink" title="演示事务"></a>演示事务</h2><p>MySQL 事务默认自动提交（只要执行一条 DML 语句则提交一次）</p><p>commit&#x2F;rollback 演示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 关闭自动提交/开启事务<br>start transaction;<br><br># DML 语句<br># ...<br># 这里可以创建保存点<br>savepoint a1;<br><br># 提交<br>commit;<br><br># 或回滚<br>rollback;<br># 回滚到保存点<br>rollback a1;<br></code></pre></td></tr></table></figure><h3 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h3><p>设置事物的隔离级别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global transaction isolation level read uncommitted;<br></code></pre></td></tr></table></figure><p>查看事物的全局隔离级别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select @@tx_global isolation;<br>/*<br>    +-----------------+<br>    | @@tx_isolation  |<br>    +-----------------+<br>    | REPEATABLE-READ |<br>    +-----------------+<br>*/<br></code></pre></td></tr></table></figure><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>相当于一本书的目录，通过目录可以快速找到对应资源</p><p>数据库查询表的两种检索方式：</p><ol><li>全表扫描</li><li>索引检索（缩小扫描范围，效率高）</li></ol><p>不能随意添加索引，索引也是数据库中的对象，也需要不断维护（维护成本），数据修改索引就需要重新排列</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>添加索引是给某一个字段添加</p><p>添加索引：<code>create index 索引名称 on 表名(字段名)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create index emp_sal_index on emp(sal);<br></code></pre></td></tr></table></figure><p>删除索引：<code>drop index 索引名称 on 表名;</code></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>数据量庞大（根据需求和环境）</li><li>该字段 DML 操作很少（字段修改，索引需要维护）</li><li>该字段经常出现在 where 字句中</li></ol><p>主键和具有 unique 约束的字段会自动添加索引，所以尽量根据主键检索</p><p>模糊查询第一个通配符使用 % 时索引失效</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>通过 B + Tree 数据结构缩小扫描范围，底层索引进行了排序、分区，索引会携带表中的“物理地址”，最终通过索引检索到数据之后，获取到关联的物理地址，通过物理地址定位表中瞬息，效率较高</p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><p>单一索引：单个字段添加索引</p><p>复合索引：多个字段联合添加一个索引</p><p>主键索引：主键自动添加索引</p><p>唯一索引：unique 约束字段自动添加索引</p><p>…</p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>同一张表的数据，通过不同的角度去看待</p><p>可以隐藏表的实现细节，保密级别较高的系统，数据库只对外提供相关视图，Java 程序员只对视图对象进行 CRUD</p><h2 id="视图操作"><a href="#视图操作" class="headerlink" title="视图操作"></a>视图操作</h2><p>创建视图：</p><p><code>create view 视图名称 as select 字段1, 字段2 from emp;</code></p><ul><li>只有 DQL 语句才能以视图对象的方式创建出来</li></ul><p>删除视图：</p><p><code>drop view 视图名称;</code></p><p>对视图的增删改查会影响到原数据</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Storage Engine</tag>
      
      <tag>Transaction</tag>
      
      <tag>Index</tag>
      
      <tag>View</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note02 Object-Oriented PART I</title>
    <link href="/2022/04/28/JavaSE%20-%20Note02%20Object-Oriented%20PART%20I/"/>
    <url>/2022/04/28/JavaSE%20-%20Note02%20Object-Oriented%20PART%20I/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象的概念（Object-Oriented）"><a href="#面向对象的概念（Object-Oriented）" class="headerlink" title="面向对象的概念（Object-Oriented）"></a>面向对象的概念（Object-Oriented）</h1><p>当我们采用面向对象的方式贯穿整个系统的话，涉及三个术语</p><ul><li>OOA（Object-Oriented Analysis）：面向对象分析</li><li>OOD（Object-Oriented Design）：面向对象设计</li><li>OOP（Object-Oriented Programming）：面向对象编程</li></ul><h2 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h2><ul><li>封装（Encapsulation）</li><li>继承（Inheritance）</li><li>多态（Polymorphism）</li></ul><h2 id="类和对象相关的概念"><a href="#类和对象相关的概念" class="headerlink" title="类和对象相关的概念"></a>类和对象相关的概念</h2><p><strong>类</strong>：是一个抽象的概念、模板，现实当中不存在，是我们人类大脑进行思考、总结、抽象的一个结果</p><p><strong>对象（实例）</strong>：现实生活中实际存在的个体</p><p><strong>实例化</strong>：通过类这个模板创建对象的过程</p><p><strong>抽象</strong>：思考总结抽取多个对象共同特征的过程</p><blockquote><p>类是对象的抽象，对象是类的具体实现</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">类</span><span class="hljs-literal">--</span><span class="hljs-comment">实例化</span><span class="hljs-literal">--</span>&gt;<span class="hljs-comment">对象（示例）</span><br><span class="hljs-comment">对象</span><span class="hljs-literal">--</span><span class="hljs-comment">抽象</span><span class="hljs-literal">--</span>&gt;<span class="hljs-comment">类</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类 &#x3D; 属性 + 方法</p><ul><li>属性来源于状态（名词）</li><li>方法来源于动作（动词）</li></ul><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] class [类名] &#123;<br>    <span class="hljs-comment">// 类体 = 属性 + 方法</span><br>    <span class="hljs-comment">// 属性在代码上以“变量”的形式存在</span><br>    <span class="hljs-comment">// 方法描述动作/行为</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="为什么属性是以变量的形式存在的？"><a href="#为什么属性是以变量的形式存在的？" class="headerlink" title="为什么属性是以变量的形式存在的？"></a>为什么属性是以变量的形式存在的？</h4><p>因为属性对应的是“数据”，数据在程序中只能放到变量中</p><blockquote><p>学生包括：</p><ul><li>sno: 131</li><li>name: “vv”</li><li>sex: ‘1’</li><li>address: “Wuhan”</li></ul></blockquote><h4 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h4><p>根据出现位置划分：</p><ul><li>方法体当中声明的变量：局部变量</li><li>方法体外声明的变量：成员变量（即全局变量，包含实例变量、类变量、常量）</li></ul><p>根据存储位置划分：</p><ul><li>栈内存：局部变量</li><li>堆内存：成员变量</li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>类是一个模板，通过一个类可以创建多个对象</p><h4 id="对象的创建和使用"><a href="#对象的创建和使用" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h4><p>语法： <code>new 类名();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br></code></pre></td></tr></table></figure><blockquote><p>与 <code>int i = 10;</code> 一个道理</p></blockquote><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>对于成员变量来说，没有手动赋值时，系统默认赋值：</p><table><thead><tr><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>0</td></tr><tr><td>short</td><td>0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>float</td><td>0.0F</td></tr><tr><td>double</td><td>0.0</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>char</td><td>\u0000</td></tr><tr><td>引用数据类型</td><td>null</td></tr></tbody></table><ul><li><code>null</code> 是一个 Java 关键字，全部小写，表示空</li></ul><h4 id="对象和引用的区别？"><a href="#对象和引用的区别？" class="headerlink" title="对象和引用的区别？"></a>对象和引用的区别？</h4><ul><li>对象是通过 <code>new</code> 出来的，在堆内存中存储</li><li>引用是保存了对象的内存地址</li></ul><h4 id="访问实例对象的语法"><a href="#访问实例对象的语法" class="headerlink" title="访问实例对象的语法"></a>访问实例对象的语法</h4><p><code>[引用].[实例变量名]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(s1.no);<br>System.out.println(s2.no);<br></code></pre></td></tr></table></figure><blockquote><p>实例变量只能通过对象访问</p></blockquote><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Student.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-type">int</span> no;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">boolean</span> sex;<br>    String addr;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// StudentTest.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <br>        s1.no = <span class="hljs-number">101</span>;<br>        s2.no = <span class="hljs-number">102</span>;<br>        <br>        System.out.println(s1.no, s2.no);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/image-java/note02-01-%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%95%E7%94%A8%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.png" alt="对象和引用执行原理"></p><h3 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h3><p>java.lang.NullPointerException</p><p>“空引用”访问实例【对象相关】的相关数据时，都会出现空指针异常</p><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><p>写在类中，用来创建对象，同时给对象的属性赋值以开辟空间</p><ul><li>当一个类没有提供任何构造方法，系统会默认提供一个无参数的构造方法，这个无参数的构造方法叫做“缺省构造器”</li><li>实例变量没有手动赋值的时候，系统会赋默认值</li><li>当一个类中提供了构造方法，系统将不再提供构造方法</li><li>无参构造方法和有参构造方法都可以调用</li><li>构造方法支持方法重载</li></ul><blockquote><p>建议将无参构造手动写出来，以确保万无一失</p></blockquote><h2 id="构造方法的语法结构"><a href="#构造方法的语法结构" class="headerlink" title="构造方法的语法结构"></a>构造方法的语法结构</h2><p><code>[修饰符列表] 构造方法名(形式参数列表) &#123;构造方法体&#125;</code></p><p>构造方法体中一般用来对属性进行赋值</p><p>e.g. <code>public Student() &#123;sno=101&#125;</code></p><h2 id="调用构造方法的语法格式"><a href="#调用构造方法的语法格式" class="headerlink" title="调用构造方法的语法格式"></a>调用构造方法的语法格式</h2><p>使用 new 运算符来调用构造方法（普通方法是用“ .”来调用）</p><p><code>new 构造方法名();</code></p><p>e.g. <code>Student s1 = new Student();</code></p>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Object-Oriented</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Java 字符串比较方法</title>
    <link href="/2022/04/26/JavaSE%20-%20Java%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95/"/>
    <url>/2022/04/26/JavaSE%20-%20Java%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Java字符串比较方法"><a href="#Java字符串比较方法" class="headerlink" title="Java字符串比较方法"></a>Java字符串比较方法</h1><p>字符串比较的常用方法有 3 </p><ol><li>equals()</li><li>equalsIgnoreCase()</li><li>compareTo()</li></ol><h2 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h2><p>逐个比较两字符串每个字符是否相同，如果两个字符串具有相同的字符和长度，返回 true，否则返回 false</p><blockquote><p>字符的大小写也在检查的范围之内</p></blockquote><p>语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str1.equals(str2);<br></code></pre></td></tr></table></figure><p>str1 和 str2 可以是字符串变量， 也可以是字符串字面量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;Hello&quot;</span>.equals(greeting);<br></code></pre></td></tr></table></figure><h2 id="equalsIgnoreCase"><a href="#equalsIgnoreCase" class="headerlink" title="equalsIgnoreCase()"></a>equalsIgnoreCase()</h2><p>与<code>equals()</code>完全相同，唯一不同的是<code>equalsIgnoreCase()</code>比较时不区分大小写，当比较两个字符串时，它会认为 A-Z 和 a-z 是一样的</p><h2 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo()"></a>compareTo()</h2><p><code>compareTo()</code> 方法用于按字典顺序比较两个字符串的大小，该比较是基于字符串各个字符的 Unicode 值。<code>compareTo()</code> 方法的语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">str.compareTo(String otherstr);<br></code></pre></td></tr></table></figure><p>它会按字典顺序将 str 表示的字符序列与 otherstr 参数表示的字符序列进行比较。如果按字典顺序 str 位于 otherster 参数之前，比较结果为一个负整数；如果 str 位于 otherstr 之后，比较结果为一个正整数；如果两个字符串相等，则结果为 0</p><blockquote><p>如果两个字符串调用 <code>equals()</code> 方法返回 true，那么调用 <code>compareTo()</code> 方法会返回 0</p></blockquote><h1 id="equals-与-x3D-x3D-的区别"><a href="#equals-与-x3D-x3D-的区别" class="headerlink" title="equals()与&#x3D;&#x3D;的区别"></a>equals()与&#x3D;&#x3D;的区别</h1><ol><li><code>equals()</code> 是方法，而 <code>==</code> 是操作符</li><li>对于基本类型的变量来说（如 <code>short</code>、 <code>int</code>、 <code>long</code>、 <code>float</code>、 <code>double</code>），只能使用 &#x3D;&#x3D; ，因为这些基本类型的变量没有 equals 方法。对于基本类型变量的比较，使用 &#x3D;&#x3D; 比较， <strong>一般比较的是它们的值</strong>。</li><li><code>equals()</code> 方法比较字符串对象中的字符，而 <code>==</code> 运算符比较两个对象引用看它们是否引用相同的实例（即指针是否指向同一地址）</li></ol><blockquote><p>对于习惯使用 C++的String类的人来说，在进行相等性检测的时候一定要特别小心。C++ 的 String 类重载了<code>==</code>运算符以便检测字符串内容的相等性。可惜 Java 没有采用这种方式，它的字符串“看起来、感觉起来”与数值一样，但进行相等性测试时，其操作方式又类似于指针。语言的设计者本应该像对 C++ 那样也进行特殊处理， 即重定义<code>==</code>运算符。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Experience</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSE - Note01 OverLoad &amp; Recursion</title>
    <link href="/2022/04/26/JavaSE%20-%20Note01%20OverLoad%20&amp;%20Recursion/"/>
    <url>/2022/04/26/JavaSE%20-%20Note01%20OverLoad%20&amp;%20Recursion/</url>
    
    <content type="html"><![CDATA[<h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><h2 id="什么情况下我们考虑使用方法重载机制？"><a href="#什么情况下我们考虑使用方法重载机制？" class="headerlink" title="什么情况下我们考虑使用方法重载机制？"></a>什么情况下我们考虑使用方法重载机制？</h2><p>当功能相似的时候，建议将方法名定义为一致的，这样代码美观，又方便编程</p><blockquote><p>如果功能不相似，坚决要让方法名不一致。</p></blockquote><h2 id="代码满足什么条件的时候构成了方法重载？"><a href="#代码满足什么条件的时候构成了方法重载？" class="headerlink" title="代码满足什么条件的时候构成了方法重载？"></a>代码满足什么条件的时候构成了方法重载？</h2><ol><li>在同一个类当中</li><li>方法名相同</li><li>形式参数列表不同（类型、个数、顺序）</li></ol><blockquote><p>方法重载和返回值类型无关，和修饰符列表无关。</p></blockquote><h2 id="方法重载的优点？"><a href="#方法重载的优点？" class="headerlink" title="方法重载的优点？"></a>方法重载的优点？</h2><ul><li>代码美观</li><li>方便代码的编写</li></ul><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 重载System.out.print，将其改为print()</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Overload</span> &#123;<br><span class="hljs-comment">// 换行的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>System.out.println();<br>&#125;<br><br><span class="hljs-comment">// 输出byte</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">byte</span> b)</span> &#123;<br>System.out.println(b);<br>&#125;<br><br><span class="hljs-comment">// 输出short</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">short</span> s)</span> &#123;<br>System.out.println(s);<br>&#125;<br><br><span class="hljs-comment">// 输出int</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>System.out.println(i);<br>&#125;<br><br><span class="hljs-comment">// 输出long</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">long</span> l)</span> &#123;<br>System.out.println(l);<br>&#125;<br><br><span class="hljs-comment">// 输出float</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">float</span> f)</span> &#123;<br>System.out.println(f);<br>&#125;<br><br><span class="hljs-comment">// 输出double</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span> &#123;<br>System.out.println(d);<br>&#125;<br><br><span class="hljs-comment">// 输出boolean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">boolean</span> b)</span> &#123;<br>System.out.println(b);<br>&#125;<br><br><span class="hljs-comment">// 输出char</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>System.out.println(c);<br>&#125;<br><br><span class="hljs-comment">// 输出String</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String s)</span> &#123;<br>System.out.println(s);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法递归"><a href="#方法递归" class="headerlink" title="方法递归"></a>方法递归</h1><p>方法自身调用自身</p><blockquote><p>使用递归的时候，必须添加结束条件，否则发生栈内存溢出错误</p><p>能够使用循环代替递归的尽量使用循环，循环的执行耗费内存少一些</p><p>递归使用不当很容易内存溢出，JVM停止工作，只有极少数情况下只能用递归</p><p>即使结束条件合法，递归太深也会导致内存溢出</p></blockquote><h2 id="递归经验"><a href="#递归经验" class="headerlink" title="递归经验"></a>递归经验</h2><h3 id="栈内存溢出错误怎么办？"><a href="#栈内存溢出错误怎么办？" class="headerlink" title="栈内存溢出错误怎么办？"></a>栈内存溢出错误怎么办？</h3><ol><li>先检查结束条件是否正确</li><li>如果正确，可以调整JVM的栈内存大小<code>java -X</code></li></ol><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用递归的方式计算N的阶乘</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HW01_FacRec</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(System.in);<br><br>System.out.println(<span class="hljs-string">&quot;Factorial of it: &quot;</span> + facRec(s.nextInt()));<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">facRec</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">return</span> n * facRec(n-<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">/*****************</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">Factorial of it: 6</span><br><span class="hljs-comment">*****************/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Overload</tag>
      
      <tag>Recursion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL - Note02 Data Query Language</title>
    <link href="/2022/04/25/MySQL%20-%20Note02%20Data%20Query%20Language/"/>
    <url>/2022/04/25/MySQL%20-%20Note02%20Data%20Query%20Language/</url>
    
    <content type="html"><![CDATA[<h1 id="查询语句（DQL）"><a href="#查询语句（DQL）" class="headerlink" title="查询语句（DQL）"></a>查询语句（DQL）</h1><h2 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h2><p>语法格式：<code>select [字段1], [字段2], [字段3], ... from [table_name];</code></p><blockquote><ol><li><p>任何一条sql语句以分号”;”结尾</p></li><li><p>sql语句不区分大小写</p></li><li><p>字段可以参与数学运算</p></li><li><p>查询全字段使用”*”（实际开发效率低下）</p></li><li><p>查询结果列重命名：<code>[字段] as [name]</code></p><blockquote><p>中文名建议用单引号，所有数据库系统通用</p><p>as关键字可以省略</p></blockquote></li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询emp表所有数据<br>select * from emp;<br>/*<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>    | EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>    +-------+--------+-----------+------+------------+---------+---------+--------+<br>    |  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>    |  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>    |  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>    |  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>    |  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>    |  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>    |  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>    |  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>    |  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>    |  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>    |  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>    |  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>    |  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>    |  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>    +-------+--------+-----------+------+------------+---------+---------+--------+<br>    14 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><ul><li><p>语法格式：<code>select [字段], ... from [table_name] where [条件];</code></p></li><li><p>执行顺序：from -&gt; where &gt; select</p></li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询工资等于5000的员工姓名？<br>select ename from emp where sal=5000;<br>/*<br>    +-------+<br>    | ename |<br>    +-------+<br>    | KING  |<br>    +-------+<br>    1 row in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询SMITH的工资<br>select sal from emp where ename=&#x27;SMITH&#x27;;<br>/*<br>    +--------+<br>    | sal    |<br>    +--------+<br>    | 800.00 |<br>    +--------+<br>    1 row in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出工资高于3000的员工<br>select ename from emp where sal&gt;3000;<br>/*<br>    +-------+<br>    | ename |<br>    +-------+<br>    | KING  |<br>    +-------+<br>    1 row in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出工资不等于3000的员工<br>select ename from emp where sal&lt;&gt;3000;<br># select ename from emp where sal!=3000;<br>/*<br>    +--------+<br>    | ename  |<br>    +--------+<br>    | SMITH  |<br>    | ALLEN  |<br>    | WARD   |<br>    | JONES  |<br>    | MARTIN |<br>    | BLAKE  |<br>    | CLARK  |<br>    | KING   |<br>    | TURNER |<br>    | ADAMS  |<br>    | JAMES  |<br>    | MILLER |<br>    +--------+<br>    12 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h3 id="between-…-and-…"><a href="#between-…-and-…" class="headerlink" title="between … and …"></a>between … and …</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出工资在1100到3000的员工<br>select ename from emp where sal between 1100 and 3000;<br># select ename from emp where sal&gt;=1100 and sal&lt;=3000;<br>/*<br>    +--------+<br>    | ename  |<br>    +--------+<br>    | ALLEN  |<br>    | WARD   |<br>    | JONES  |<br>    | MARTIN |<br>    | BLAKE  |<br>    | CLARK  |<br>    | SCOTT  |<br>    | TURNER |<br>    | ADAMS  |<br>    | FORD   |<br>    | MILLER |<br>    +--------+<br>    11 rows in set (0.00 sec)<br>*/<br><br># 左小右大，左右闭区间<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出姓名首字母在A到C之间的员工<br>select ename from emp where ename between &#x27;A&#x27; and &#x27;D&#x27;;<br>/*<br>    +-------+<br>    | ename |<br>    +-------+<br>    | ALLEN |<br>    | BLAKE |<br>    | CLARK |<br>    | ADAMS |<br>    +-------+<br>    4 rows in set (0.00 sec)<br>*/<br><br># 用在字符左开右闭<br></code></pre></td></tr></table></figure><h3 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h3><ul><li>数据库中NULL不是一个值，代表什么也没有，为空</li><li>不能用等号衡量</li><li>必须使用<code>is null</code>或者<code>is not null</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出哪些人没有津贴<br>select ename, sal, comm from emp where comm is null or comm=0;<br>/*<br>    +--------+---------+------+<br>    | ename  | sal     | comm |<br>    +--------+---------+------+<br>    | SMITH  |  800.00 | NULL |<br>    | JONES  | 2975.00 | NULL |<br>    | BLAKE  | 2850.00 | NULL |<br>    | CLARK  | 2450.00 | NULL |<br>    | SCOTT  | 3000.00 | NULL |<br>    | KING   | 5000.00 | NULL |<br>    | TURNER | 1500.00 | 0.00 |<br>    | ADAMS  | 1100.00 | NULL |<br>    | JAMES  |  950.00 | NULL |<br>    | FORD   | 3000.00 | NULL |<br>    | MILLER | 1300.00 | NULL |<br>    +--------+---------+------+<br>    11 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h3 id="and-or"><a href="#and-or" class="headerlink" title="and or"></a>and or</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出工作岗位是MANAGER和SALESMAN的员工<br>select ename, job from emp where job=&#x27;MANAGER&#x27; or job=&#x27;SALESMAN&#x27;;<br>/*<br>    +--------+----------+<br>    | ename  | job      |<br>    +--------+----------+<br>    | ALLEN  | SALESMAN |<br>    | WARD   | SALESMAN |<br>    | JONES  | MANAGER  |<br>    | MARTIN | SALESMAN |<br>    | BLAKE  | MANAGER  |<br>    | CLARK  | MANAGER  |<br>    | TURNER | SALESMAN |<br>    +--------+----------+<br>    7 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出薪资大于3000并且部门编号是20或30的员工<br>select ename, sal, deptno from emp where sal&gt;1000 and (deptno=20 or deptno=30);<br>/*<br>    +--------+---------+--------+<br>    | ename  | sal     | deptno |<br>    +--------+---------+--------+<br>    | ALLEN  | 1600.00 |     30 |<br>    | WARD   | 1250.00 |     30 |<br>    | JONES  | 2975.00 |     20 |<br>    | MARTIN | 1250.00 |     30 |<br>    | BLAKE  | 2850.00 |     30 |<br>    | SCOTT  | 3000.00 |     20 |<br>    | TURNER | 1500.00 |     30 |<br>    | ADAMS  | 1100.00 |     20 |<br>    | FORD   | 3000.00 |     20 |<br>    +--------+---------+--------+<br>    9 rows in set (0.00 sec)<br>*/<br><br># and优先级大于or<br></code></pre></td></tr></table></figure><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><ul><li>in等同于or</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出工作岗位是MANAGER和SALESMAN的员工？<br>select ename, job from emp where job in(&#x27;SALESMAN&#x27;, &#x27;MANAGER&#x27;);<br>select ename, job from emp where job=&#x27;SALESMAN&#x27; or job=&#x27;MANAGER&#x27;;<br>/*<br>    +--------+----------+<br>    | ename  | job      |<br>    +--------+----------+<br>    | ALLEN  | SALESMAN |<br>    | WARD   | SALESMAN |<br>    | JONES  | MANAGER  |<br>    | MARTIN | SALESMAN |<br>    | BLAKE  | MANAGER  |<br>    | CLARK  | MANAGER  |<br>    | TURNER | SALESMAN |<br>    +--------+----------+<br>    7 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><ul><li>not in：不在in值当中</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出工资不是800和5000的员工<br>select ename, sal from emp where sal not in(800, 5000);<br>/*<br>    +--------+---------+<br>    | ename  | sal     |<br>    +--------+---------+<br>    | ALLEN  | 1600.00 |<br>    | WARD   | 1250.00 |<br>    | JONES  | 2975.00 |<br>    | MARTIN | 1250.00 |<br>    | BLAKE  | 2850.00 |<br>    | CLARK  | 2450.00 |<br>    | SCOTT  | 3000.00 |<br>    | TURNER | 1500.00 |<br>    | ADAMS  | 1100.00 |<br>    | JAMES  |  950.00 |<br>    | FORD   | 3000.00 |<br>    | MILLER | 1300.00 |<br>    +--------+---------+<br>    12 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><ul><li><p>in 表中若有 null，需手动排除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 取得普通员工（员工代码不在 mgr 字段上）<br>select ename<br>from emp<br>where empno not in (<br>select mgr<br>    from emp<br>    where mgr is not null<br>);<br>/*<br>    +--------+<br>    | ename  |<br>    +--------+<br>    | SMITH  |<br>    | ALLEN  |<br>    | WARD   |<br>    | MARTIN |<br>    | TURNER |<br>    | ADAMS  |<br>    | JAMES  |<br>    | MILLER |<br>    +--------+<br>*/<br></code></pre></td></tr></table></figure></li></ul><h3 id="like模糊查询"><a href="#like模糊查询" class="headerlink" title="like模糊查询"></a>like模糊查询</h3><ul><li>% 代表任意多个字符</li><li>_ 代表任意一个字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出名字当中有“O”的员工<br>select ename from emp where ename like &#x27;%O%&#x27;;<br>/*<br>    +-------+<br>    | ename |<br>    +-------+<br>    | JONES |<br>    | SCOTT |<br>    | FORD  |<br>    +-------+<br>    3 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出第二个字母是“A”的员工<br>select ename from emp where ename like &#x27;_A%&#x27;;<br>/*<br>    +--------+<br>    | ename  |<br>    +--------+<br>    | WARD   |<br>    | MARTIN |<br>    | JAMES  |<br>    +--------+<br>    3 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出名字中带有下划线的员工<br>select ename from emp where ename like &#x27;%\_%&#x27;;<br><br># 使用转义符<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出名字中最后一个字母是“T”的员工<br>select ename from emp where ename like &#x27;%T&#x27;;<br>/*<br>    +-------+<br>    | ename |<br>    +-------+<br>    | SCOTT |<br>    +-------+<br>    1 row in set (0.00 sec)<br>*/<br><br># oracle账户中有一个默认账户为SCOTT，密码是Tiger，用于学习数据库的演示账户<br></code></pre></td></tr></table></figure><h2 id="排序（升序，降序）"><a href="#排序（升序，降序）" class="headerlink" title="排序（升序，降序）"></a>排序（升序，降序）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 按照工资升序，找出员工名和薪资？<br>select ename, sal from emp order by sal;<br>/*<br>    +--------+---------+<br>    | ename  | sal     |<br>    +--------+---------+<br>    | SMITH  |  800.00 |<br>    | JAMES  |  950.00 |<br>    | ADAMS  | 1100.00 |<br>    | WARD   | 1250.00 |<br>    | MARTIN | 1250.00 |<br>    | MILLER | 1300.00 |<br>    | TURNER | 1500.00 |<br>    | ALLEN  | 1600.00 |<br>    | CLARK  | 2450.00 |<br>    | BLAKE  | 2850.00 |<br>    | JONES  | 2975.00 |<br>    | FORD   | 3000.00 |<br>    | SCOTT  | 3000.00 |<br>    | KING   | 5000.00 |<br>    +--------+---------+<br>    14 rows in set (0.00 sec)<br>*/<br><br># 升序asc（可省略）<br>select ename, sal from emp order by sal asc;<br># 降序desc<br>select ename, sal from emp order by sal desc;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 按照工资的降序排列，当工资相同时按照名字升序排列<br>select ename, sal from emp order by sal desc, ename asc;<br>/*<br>    +--------+---------+<br>    | ename  | sal     |<br>    +--------+---------+<br>    | KING   | 5000.00 |<br>    | FORD   | 3000.00 |<br>    | SCOTT  | 3000.00 |<br>    | JONES  | 2975.00 |<br>    | BLAKE  | 2850.00 |<br>    | CLARK  | 2450.00 |<br>    | ALLEN  | 1600.00 |<br>    | TURNER | 1500.00 |<br>    | MILLER | 1300.00 |<br>    | MARTIN | 1250.00 |<br>    | WARD   | 1250.00 |<br>    | ADAMS  | 1100.00 |<br>    | JAMES  |  950.00 |<br>    | SMITH  |  800.00 |<br>    +--------+---------+<br>    14 rows in set (0.00 sec)<br>*/<br><br># 多个排序字段使用“，”隔开<br># 越靠前的字段主导能力越强<br># 当前面的字段无法排序时，遵从后面的排序规则<br># 排序可以按照select的字段顺序数排序（不够健壮）<br>select * from emp order by 6;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出工作岗位是SALESMAN的员工，并且按照工资的降序排列<br>select ename, job, sal from emp where job=&#x27;SALESMAN&#x27; order by sal desc;<br>/*<br>    +--------+----------+---------+<br>    | ename  | job      | sal     |<br>    +--------+----------+---------+<br>    | ALLEN  | SALESMAN | 1600.00 |<br>    | TURNER | SALESMAN | 1500.00 |<br>    | WARD   | SALESMAN | 1250.00 |<br>    | MARTIN | SALESMAN | 1250.00 |<br>    +--------+----------+---------+<br>    4 rows in set (0.00 sec)<br>*/<br><br># 执行顺序：from -&gt; where -&gt; select -&gt; order by<br></code></pre></td></tr></table></figure><h2 id="分组函数（多行处理行数）"><a href="#分组函数（多行处理行数）" class="headerlink" title="分组函数（多行处理行数）"></a>分组函数（多行处理行数）</h2><p>特点：输入多行，输出一行</p><blockquote><p>单行处理函数：输入一行，输出一行</p><p><strong>任何数据与NULL运算结果都为NULL</strong>（使用<code>ifnull([column], 0)</code>空处理函数将NULL转换为0）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename, ifnull(comm, 0) from emp;<br>/*<br>+--------+-----------------+<br>| ename  | ifnull(comm, 0) |<br>+--------+-----------------+<br>| SMITH  |            0.00 |<br>| ALLEN  |          300.00 |<br>| WARD   |          500.00 |<br>| JONES  |            0.00 |<br>| MARTIN |         1400.00 |<br>| BLAKE  |            0.00 |<br>| CLARK  |            0.00 |<br>| SCOTT  |            0.00 |<br>| KING   |            0.00 |<br>| TURNER |            0.00 |<br>| ADAMS  |            0.00 |<br>| JAMES  |            0.00 |<br>| FORD   |            0.00 |<br>| MILLER |            0.00 |<br>+--------+-----------------+<br>14 rows in set (0.01 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 计算每个员工的年薪<br>select ename, (sal+ifnull(comm,0))*12 as year_sal from emp;<br>/*<br>+--------+----------+<br>| ename  | year_sal |<br>+--------+----------+<br>| SMITH  |  9600.00 |<br>| ALLEN  | 22800.00 |<br>| WARD   | 21000.00 |<br>| JONES  | 35700.00 |<br>| MARTIN | 31800.00 |<br>| BLAKE  | 34200.00 |<br>| CLARK  | 29400.00 |<br>| SCOTT  | 36000.00 |<br>| KING   | 60000.00 |<br>| TURNER | 18000.00 |<br>| ADAMS  | 13200.00 |<br>| JAMES  | 11400.00 |<br>| FORD   | 36000.00 |<br>| MILLER | 15600.00 |<br>+--------+----------+<br>14 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure></blockquote><p>分组函数只有5个</p><ul><li>count 计数</li><li>sum 求和</li><li>avg 平均值</li><li>max 最大值</li><li>min 最小值</li></ul><blockquote><p>所有的分组函数都是对<strong>“某一组”数据</strong>进行操作的</p><p><strong>分组函数自动忽略NULL</strong></p><p>分组函数不可以直接出现在where语句当中（分组函数执行在group by、having后，而这两个在where后）</p><p>count(*)和count([column])：前者统计总记录条数，后者统计字段中不为NULL的元素总数</p><p>分组处理函数可组合起来使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出工资总和<br>select sum(sal) from emp;<br>/*<br>    +----------+<br>    | sum(sal) |<br>    +----------+<br>    | 29025.00 |<br>    +----------+<br>    1 row in set (0.01 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出工资高于平均工资的员工（子查询）<br>select ename, sal from emp where sal&gt;(select avg(sal) from emp);<br>/*<br>    +-------+---------+<br>    | ename | sal     |<br>    +-------+---------+<br>    | JONES | 2975.00 |<br>    | BLAKE | 2850.00 |<br>    | CLARK | 2450.00 |<br>    | SCOTT | 3000.00 |<br>    | KING  | 5000.00 |<br>    | FORD  | 3000.00 |<br>    +-------+---------+<br>    6 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h2 id="group-by-和-having"><a href="#group-by-和-having" class="headerlink" title="group by 和 having"></a>group by 和 having</h2><ul><li>group by：按照某个字段或者某些字段进行分组</li><li>having：对分组之后的数据进行再次过滤</li></ul><blockquote><p>执行顺序：from -&gt; where -&gt; group by -&gt; having -&gt; select分组函数 -&gt; order by</p><p>分组函数一般会与group by联合使用</p><p>sql语句没有group by，整张语句将会自成一组</p><p><strong>当一条语句中有group by，select后面只能跟分组函数和分组的字段</strong></p><p>在where中筛选条件比使用having效率更高</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个工作岗位的最高薪资<br>select job, max(sal) from emp group by job;<br>/*<br>    +-----------+----------+<br>    | job       | max(sal) |<br>    +-----------+----------+<br>    | ANALYST   |  3000.00 |<br>    | CLERK     |  1300.00 |<br>    | MANAGER   |  2975.00 |<br>    | PRESIDENT |  5000.00 |<br>    | SALESMAN  |  1600.00 |<br>    +-----------+----------+<br>    5 rows in set (0.01 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个工作岗位的平均工资<br>select job, avg(sal) from emp group by job;<br>/*<br>    +-----------+-------------+<br>    | job       | avg(sal)    |<br>    +-----------+-------------+<br>    | ANALYST   | 3000.000000 |<br>    | CLERK     | 1037.500000 |<br>    | MANAGER   | 2758.333333 |<br>    | PRESIDENT | 5000.000000 |<br>    | SALESMAN  | 1400.000000 |<br>    +-----------+-------------+<br>    5 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个部门不同工作岗位的最高薪资<br>select deptno, job, max(sal) from emp group by deptno, job;<br>/*<br>    +--------+-----------+----------+<br>    | deptno | job       | max(sal) |<br>    +--------+-----------+----------+<br>    |     10 | CLERK     |  1300.00 |<br>    |     10 | MANAGER   |  2450.00 |<br>    |     10 | PRESIDENT |  5000.00 |<br>    |     20 | ANALYST   |  3000.00 |<br>    |     20 | CLERK     |  1100.00 |<br>    |     20 | MANAGER   |  2975.00 |<br>    |     30 | CLERK     |   950.00 |<br>    |     30 | MANAGER   |  2850.00 |<br>    |     30 | SALESMAN  |  1600.00 |<br>    +--------+-----------+----------+<br>    9 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个部门的最高薪资，要求显示薪资大于2900的数据<br><br># 效率过低，可以先筛除数据，再进行分组<br># select deptno, max(sal) from emp group by deptno having max(sal)&gt;2900;<br><br># 效率高，优先考虑使用where过滤数据<br>select deptno, max(sal) from emp where sal&gt;2900 group by deptno;<br>/*<br>    +--------+----------+<br>    | deptno | max(sal) |<br>    +--------+----------+<br>    |     10 |  5000.00 |<br>    |     20 |  3000.00 |<br>    +--------+----------+<br>    2 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个部门的平均薪资，要求显示薪资大于2000的数据（where搞不定）<br>select deptno, avg(sal) from emp group by deptno having avg(sal)&gt;2000;<br>/*<br>    +--------+-------------+<br>    | deptno | avg(sal)    |<br>    +--------+-------------+<br>    |     10 | 2916.666667 |<br>    |     20 | 2175.000000 |<br>    +--------+-------------+<br>    2 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h2 id="完整的DQL语句"><a href="#完整的DQL语句" class="headerlink" title="完整的DQL语句"></a>完整的DQL语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select5<br>...<br>from1<br>...<br>where2<br>...<br>group by3<br>...<br>having4<br>...<br>order by6<br>...<br></code></pre></td></tr></table></figure><h2 id="查询结果集的去重"><a href="#查询结果集的去重" class="headerlink" title="查询结果集的去重"></a>查询结果集的去重</h2><p>select后加上distinct关键字即可</p><blockquote><p>distinct只能出现在所有字段前</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct job from emp;<br>/*<br>    +-----------+<br>    | job       |<br>    +-----------+<br>    | CLERK     |<br>    | SALESMAN  |<br>    | MANAGER   |<br>    | ANALYST   |<br>    | PRESIDENT |<br>    +-----------+<br>    5 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 统计岗位数量<br>select count(distinct job) from emp;<br>/*<br>    +---------------------+<br>    | count(distinct job) |<br>    +---------------------+<br>    |                   5 |<br>    +---------------------+<br>    1 row in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h2 id="笛卡尔积现象"><a href="#笛卡尔积现象" class="headerlink" title="笛卡尔积现象"></a>笛卡尔积现象</h2><p>当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果是两张表记录条数的乘积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每一个员工的部门名称，要求显示员工名和部门名<br>select ename,dname from emp, dept;<br>/*<br>    +--------+------------+<br>    | ename  | dname      |<br>    +--------+------------+<br>    | SMITH  | ACCOUNTING |<br>    | SMITH  | RESEARCH   |<br>    | SMITH  | SALES      |<br>    | SMITH  | OPERATIONS |<br>    | ALLEN  | ACCOUNTING |<br>    | ALLEN  | RESEARCH   |<br>    | ALLEN  | SALES      |<br>    | ALLEN  | OPERATIONS |<br>    ...<br>    56 rows in set (0.01 sec)<br>*/<br></code></pre></td></tr></table></figure><p>加条件进行过滤以避免笛卡尔积现象</p><blockquote><p>避免了笛卡尔积现象，不会减少记录的匹配次数，只不过显示的是有效记录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每一个员工的部门名称，要求显示员工名和部门名<br># SQL92语法，以后不用<br>select e.ename, d.dname<br>from emp e, dept d<br>where e.deptno = d.deptno;<br>/*<br>    +--------+------------+<br>    | ename  | dname      |<br>    +--------+------------+<br>    | CLARK  | ACCOUNTING |<br>    | KING   | ACCOUNTING |<br>    | MILLER | ACCOUNTING |<br>    | SMITH  | RESEARCH   |<br>    | JONES  | RESEARCH   |<br>    | SCOTT  | RESEARCH   |<br>    | ADAMS  | RESEARCH   |<br>    | FORD   | RESEARCH   |<br>    | ALLEN  | SALES      |<br>    | WARD   | SALES      |<br>    | MARTIN | SALES      |<br>    | BLAKE  | SALES      |<br>    | TURNER | SALES      |<br>    | JAMES  | SALES      |<br>    +--------+------------+<br>    14 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h2 id="表的别名"><a href="#表的别名" class="headerlink" title="表的别名"></a>表的别名</h2><p>关于表的别名</p><p><code>select e.name,d.dname from emp e,dept d;</code></p><ul><li>执行效率高</li><li>可读性好</li></ul><h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><p>实际的业务中，大部分情况都是多张表联合查询取出最终结果，否则存在数据冗余</p><p>根据表的连接方式来分类，包括</p><ul><li>内连接<ul><li>等值连接：等量关系</li><li>非等值连接：例如between…and…</li><li>自连接</li></ul></li><li>外连接<ul><li>左外连接（左连接）</li><li>右外连接（右连接）</li></ul></li><li>全连接（很少用）</li></ul><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><p>A和B表进行连接，凡是A表和B表能够匹配上的记录查询出来，就是内连接</p><blockquote><p>AB两张表没有主副之分，两张表平等</p><p><code>(inner) join [table] on [table]</code>语法inner可省略</p></blockquote><h3 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h3><p>最大的特点是条件是等量关系</p><p>语法：<code>... A join B on 连接条件 where ...</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 查询每个员工的部门名称，要求显示员工名和部门名<br><br># SQL92（古早）<br>select e.ename, d.dname<br>from emp e, dept d<br>where e.deptno = d.deptno;<br><br># SQL99（常用）<br># SQL99语法结构更清晰一些：表的连接条件和后来的where条件分离<br>select e.ename, d.dname<br>from emp e<br>inner join dept d<br>on e.deptno = d.deptno;<br><br>/*<br>    +--------+------------+<br>    | ename  | dname      |<br>    +--------+------------+<br>    | CLARK  | ACCOUNTING |<br>    | KING   | ACCOUNTING |<br>    | MILLER | ACCOUNTING |<br>    | SMITH  | RESEARCH   |<br>    | JONES  | RESEARCH   |<br>    | SCOTT  | RESEARCH   |<br>    | ADAMS  | RESEARCH   |<br>    | FORD   | RESEARCH   |<br>    | ALLEN  | SALES      |<br>    | WARD   | SALES      |<br>    | MARTIN | SALES      |<br>    | BLAKE  | SALES      |<br>    | TURNER | SALES      |<br>    | JAMES  | SALES      |<br>    +--------+------------+<br>    14 rows in set (0.01 sec)<br>*/<br></code></pre></td></tr></table></figure><h3 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个员工的工资等级，要求显示员工名、工资、工资等级<br>select e.ename, e.sal, s.grade<br>from emp e<br>inner join salgrade s<br>on e.sal between s.losal and s.hisal;<br>/*<br>    +--------+---------+-------+<br>    | ename  | sal     | grade |<br>    +--------+---------+-------+<br>    | SMITH  |  800.00 |     1 |<br>    | ALLEN  | 1600.00 |     3 |<br>    | WARD   | 1250.00 |     2 |<br>    | JONES  | 2975.00 |     4 |<br>    | MARTIN | 1250.00 |     2 |<br>    | BLAKE  | 2850.00 |     4 |<br>    | CLARK  | 2450.00 |     4 |<br>    | SCOTT  | 3000.00 |     4 |<br>    | KING   | 5000.00 |     5 |<br>    | TURNER | 1500.00 |     3 |<br>    | ADAMS  | 1100.00 |     1 |<br>    | JAMES  |  950.00 |     1 |<br>    | FORD   | 3000.00 |     4 |<br>    | MILLER | 1300.00 |     2 |<br>    +--------+---------+-------+<br>    14 rows in set (0.02 sec)<br>*/<br></code></pre></td></tr></table></figure><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>最大的特点是：一张表看作两张表（自己连接自己）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个员工的上级领导，要求显示员工名和对应的领导名<br># 内连接跳过了King（最高领导）<br>select a.ename as emp_name, b.ename as mgr_name<br>from emp a<br>inner join emp b<br>on a.mgr = b.empno;<br>/*<br>    +----------+----------+<br>    | emp_name | mgr_name |<br>    +----------+----------+<br>    | SMITH    | FORD     |<br>    | ALLEN    | BLAKE    |<br>    | WARD     | BLAKE    |<br>    | JONES    | KING     |<br>    | MARTIN   | BLAKE    |<br>    | BLAKE    | KING     |<br>    | CLARK    | KING     |<br>    | SCOTT    | JONES    |<br>    | TURNER   | BLAKE    |<br>    | ADAMS    | SCOTT    |<br>    | JAMES    | BLAKE    |<br>    | FORD     | JONES    |<br>    | MILLER   | CLARK    |<br>    +----------+----------+<br>    13 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><p>A和B表进行连接，AB两张表中有一张是主表，一张表是副表，主要查询主表的数据，捎带着查询副表</p><blockquote><p>当副表没有数据和主表匹配上，<strong>副表自动模拟出NULL与之匹配</strong>（区别于内连接的直接丢弃）</p><p>左右外连接可以相互转换</p><p><code>[left|right] (outer) join [table]</code>中outer可以省略</p><p>实际开发外连接使用居多</p></blockquote><h3 id="左外连接（左连接）"><a href="#左外连接（左连接）" class="headerlink" title="左外连接（左连接）"></a>左外连接（左连接）</h3><p>左边的是主表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个员工的上级领导，显示员工名和领导<br># 外连接包含King（最高领导），显示为NULL<br>select a.ename as emp_name, b.ename as mgr_name<br>from emp a<br>left join emp b<br>on a.mgr = b.empno;<br>/*<br>    +----------+----------+<br>    | emp_name | mgr_name |<br>    +----------+----------+<br>    | SMITH    | FORD     |<br>    | ALLEN    | BLAKE    |<br>    | WARD     | BLAKE    |<br>    | JONES    | KING     |<br>    | MARTIN   | BLAKE    |<br>    | BLAKE    | KING     |<br>    | CLARK    | KING     |<br>    | SCOTT    | JONES    |<br>    | KING     | NULL     |<br>    | TURNER   | BLAKE    |<br>    | ADAMS    | SCOTT    |<br>    | JAMES    | BLAKE    |<br>    | FORD     | JONES    |<br>    | MILLER   | CLARK    |<br>    +----------+----------+<br>    14 rows in set (0.03 sec)<br>*/<br></code></pre></td></tr></table></figure><h3 id="右外连接（右连接）"><a href="#右外连接（右连接）" class="headerlink" title="右外连接（右连接）"></a>右外连接（右连接）</h3><p>右边的是主表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个员工的上级领导，显示员工名和领导<br># 外连接包含King（最高领导），显示为NULL<br>select a.ename, b.ename<br>from emp b<br>right join emp a<br>on a.mgr = b.empno;<br>/*<br>    +--------+-------+<br>    | ename  | ename |<br>    +--------+-------+<br>    | SMITH  | FORD  |<br>    | ALLEN  | BLAKE |<br>    | WARD   | BLAKE |<br>    | JONES  | KING  |<br>    | MARTIN | BLAKE |<br>    | BLAKE  | KING  |<br>    | CLARK  | KING  |<br>    | SCOTT  | JONES |<br>    | KING   | NULL  |<br>    | TURNER | BLAKE |<br>    | ADAMS  | SCOTT |<br>    | JAMES  | BLAKE |<br>    | FORD   | JONES |<br>    | MILLER | CLARK |<br>    +--------+-------+<br>    14 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h3 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出哪个部门没有员工<br>select d.*<br>from emp e<br>right join dept d<br>on d.deptno = e.deptno<br>where e.deptno is null;<br>/*<br>    +--------+------------+--------+<br>    | DEPTNO | DNAME      | LOC    |<br>    +--------+------------+--------+<br>    |     40 | OPERATIONS | BOSTON |<br>    +--------+------------+--------+<br>    1 row in set (0.01 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 三张表查询<br># 找出每一个员工的部门名称以及工资等级<br>select e.ename, d.dname, s.grade<br>from emp e<br>join dept d<br>on e.deptno=d.deptno<br>join salgrade s<br>on e.sal between s.losal and s.hisal;<br>/*<br>    +--------+------------+-------+<br>    | ename  | dname      | grade |<br>    +--------+------------+-------+<br>    | SMITH  | RESEARCH   |     1 |<br>    | ALLEN  | SALES      |     3 |<br>    | WARD   | SALES      |     2 |<br>    | JONES  | RESEARCH   |     4 |<br>    | MARTIN | SALES      |     2 |<br>    | BLAKE  | SALES      |     4 |<br>    | CLARK  | ACCOUNTING |     4 |<br>    | SCOTT  | RESEARCH   |     4 |<br>    | KING   | ACCOUNTING |     5 |<br>    | TURNER | SALES      |     3 |<br>    | ADAMS  | RESEARCH   |     1 |<br>    | JAMES  | SALES      |     1 |<br>    | FORD   | RESEARCH   |     4 |<br>    | MILLER | ACCOUNTING |     2 |<br>    +--------+------------+-------+<br>    14 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个员工的部门名称、工资等级以及上级领导<br>select e.ename, d.dname, s.grade, e1.ename as mgr<br>from emp e<br>join dept d<br>on e.deptno = d.deptno<br>join salgrade s<br>on e.sal between s.losal and s.hisal<br>left join emp e1<br>on e.mgr = e1.empno;<br>/*<br>    +--------+------------+-------+-------+<br>    | ename  | dname      | grade | mgr   |<br>    +--------+------------+-------+-------+<br>    | SMITH  | RESEARCH   |     1 | FORD  |<br>    | ALLEN  | SALES      |     3 | BLAKE |<br>    | WARD   | SALES      |     2 | BLAKE |<br>    | JONES  | RESEARCH   |     4 | KING  |<br>    | MARTIN | SALES      |     2 | BLAKE |<br>    | BLAKE  | SALES      |     4 | KING  |<br>    | CLARK  | ACCOUNTING |     4 | KING  |<br>    | SCOTT  | RESEARCH   |     4 | JONES |<br>    | KING   | ACCOUNTING |     5 | NULL  |<br>    | TURNER | SALES      |     3 | BLAKE |<br>    | ADAMS  | RESEARCH   |     1 | SCOTT |<br>    | JAMES  | SALES      |     1 | BLAKE |<br>    | FORD   | RESEARCH   |     4 | JONES |<br>    | MILLER | ACCOUNTING |     2 | CLARK |<br>    +--------+------------+-------+-------+<br>    14 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>select语句中嵌套select语句，被嵌套的select语句是子查询</p><h2 id="子查询出现位置"><a href="#子查询出现位置" class="headerlink" title="子查询出现位置"></a>子查询出现位置</h2><p>select</p><p>​…(select)…</p><p>from</p><p>​…(select)…</p><p>where</p><p>​…(select)…</p><h3 id="where中嵌套子查询"><a href="#where中嵌套子查询" class="headerlink" title="where中嵌套子查询"></a>where中嵌套子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出高于平均薪资的员工信息<br>select ename, sal<br>from emp<br>where sal &gt; (select avg(sal) from emp);<br>/*<br>    +-------+---------+<br>    | ename | sal     |<br>    +-------+---------+<br>    | JONES | 2975.00 |<br>    | BLAKE | 2850.00 |<br>    | CLARK | 2450.00 |<br>    | SCOTT | 3000.00 |<br>    | KING  | 5000.00 |<br>    | FORD  | 3000.00 |<br>    +-------+---------+<br>    6 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h3 id="from中嵌套子查询"><a href="#from中嵌套子查询" class="headerlink" title="from中嵌套子查询"></a>from中嵌套子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 不一定非要在from中嵌套子查询<br># 找出每个部门平均薪水的等级<br>select t.*, s.grade<br>from (select deptno, avg(sal) as avg_sal from emp group by deptno) t<br>join salgrade s<br>on t.avg_sal between s.losal and s.hisal;<br>/*<br>    +--------+-------------+-------+<br>    | deptno | avg_sal     | grade |<br>    +--------+-------------+-------+<br>    |     30 | 1566.666667 |     3 |<br>    |     10 | 2916.666667 |     4 |<br>    |     20 | 2175.000000 |     4 |<br>    +--------+-------------+-------+<br>    3 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个部门平均的薪水等级<br>select e.deptno, avg(grade) as avg_grade<br>from emp e<br>join salgrade s<br>on e.sal between s.losal and s.hisal<br>group by e.deptno;<br>/*<br>    +--------+-----------+<br>    | deptno | avg_grade |<br>    +--------+-----------+<br>    |     10 |    3.6667 |<br>    |     20 |    2.8000 |<br>    |     30 |    2.5000 |<br>    +--------+-----------+<br>    3 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h3 id="在select中嵌套子查询"><a href="#在select中嵌套子查询" class="headerlink" title="在select中嵌套子查询"></a>在select中嵌套子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出每个员工所在的部门名，要求显示员工名和部门名<br>/* <br># 之前的方法<br>    select e.ename, d.dname<br>    from emp e<br>    join dept d<br>    on e.deptno = d.deptno;<br>*/<br><br># 本方法<br>select e.ename, (<br>    select d.dname<br>    from dept d<br>    where e.deptno = d.deptno<br>) as dname<br>from emp e;<br><br>/*<br>    +--------+------------+<br>    | ename  | dname      |<br>    +--------+------------+<br>    | SMITH  | RESEARCH   |<br>    | ALLEN  | SALES      |<br>    | WARD   | SALES      |<br>    | JONES  | RESEARCH   |<br>    | MARTIN | SALES      |<br>    | BLAKE  | SALES      |<br>    | CLARK  | ACCOUNTING |<br>    | SCOTT  | RESEARCH   |<br>    | KING   | ACCOUNTING |<br>    | TURNER | SALES      |<br>    | ADAMS  | RESEARCH   |<br>    | JAMES  | SALES      |<br>    | FORD   | RESEARCH   |<br>    | MILLER | ACCOUNTING |<br>    +--------+------------+<br>    14 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h1 id="union"><a href="#union" class="headerlink" title="union"></a>union</h1><p>可以将查询结果集相加（可以用作两张不相关的表）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出工作岗位是SALESMAN和MANAGER的员工？<br><br># 经典写法（or或in）<br># select ename,job from emp where job in(&#x27;SALESMAN&#x27;, &#x27;MANAGER&#x27;);<br>/*<br>    +--------+----------+<br>    | ename  | job      |<br>    +--------+----------+<br>    | ALLEN  | SALESMAN |<br>    | WARD   | SALESMAN |<br>    | JONES  | MANAGER  |<br>    | MARTIN | SALESMAN |<br>    | BLAKE  | MANAGER  |<br>    | CLARK  | MANAGER  |<br>    | TURNER | SALESMAN |<br>    +--------+----------+<br>    7 rows in set (0.01 sec)<br>*/<br><br># union写法（结果一样但顺序不一样）<br>select ename, job from emp where job=&#x27;SALESMAN&#x27;<br>union<br>select ename, job from emp where job=&#x27;MANAGER&#x27;;<br>/*<br>    +--------+----------+<br>    | ename  | job      |<br>    +--------+----------+<br>    | ALLEN  | SALESMAN |<br>    | WARD   | SALESMAN |<br>    | MARTIN | SALESMAN |<br>    | TURNER | SALESMAN |<br>    | JONES  | MANAGER  |<br>    | BLAKE  | MANAGER  |<br>    | CLARK  | MANAGER  |<br>    +--------+----------+<br>    7 rows in set (0.01 sec)<br>*/<br></code></pre></td></tr></table></figure><h1 id="limit"><a href="#limit" class="headerlink" title="*limit"></a>*limit</h1><ul><li><p>用作分页查询，取结果集中的部分数据</p></li><li><p>语法机制：<code>limit [startIndex], [length]</code></p><ul><li><p>startIndex表示起始位置</p></li><li><p>length表示取几个</p></li></ul></li></ul><blockquote><p>MySQL特有（Oracle有相同的机制：rownum）</p><p>若只填一个数字，则默认<code>startIndex</code>为0</p><p>limit 是sql语句最后执行的一个环节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># sql语句执行顺序<br>select5<br>...<br>from1<br>...<br>where2<br>...<br>group by3<br>...<br>having4<br>...<br>order by6<br>...<br>limit7<br>...;<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 取出工资前5名的员工（思路：降序取前5个）<br>select ename,sal from emp order by sal desc limit 0, 5;<br>/*<br>    +-------+---------+<br>    | ename | sal     |<br>    +-------+---------+<br>    | KING  | 5000.00 |<br>    | SCOTT | 3000.00 |<br>    | FORD  | 3000.00 |<br>    | JONES | 2975.00 |<br>    | BLAKE | 2850.00 |<br>    +-------+---------+<br>    5 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 找出工资排名在第4到第9名的员工？<br>select ename, sal<br>from emp<br>order by sal desc<br>limit 3, 6;<br>/*<br>    +--------+---------+<br>    | ename  | sal     |<br>    +--------+---------+<br>    | JONES  | 2975.00 |<br>    | BLAKE  | 2850.00 |<br>    | CLARK  | 2450.00 |<br>    | ALLEN  | 1600.00 |<br>    | TURNER | 1500.00 |<br>    | MILLER | 1300.00 |<br>    +--------+---------+<br>    6 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h2 id="通用的标准分页sql"><a href="#通用的标准分页sql" class="headerlink" title="通用的标准分页sql"></a>通用的标准分页sql</h2><p>每页显示<code>page_size</code>条记录</p><p>第<code>page_no</code>页：<code>limit (pages_no-1)*page_size, page_size</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Java代码示例</span><br><span class="hljs-type">int</span> <span class="hljs-variable">page_no</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<span class="hljs-comment">// 页码是2</span><br><span class="hljs-type">int</span> <span class="hljs-variable">page_size</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">// 每页显示10条</span><br><br>limit (page_no-<span class="hljs-number">1</span>)*page_size, page_size;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL - Note01 Table</title>
    <link href="/2022/04/17/MySQL%20-%20Note01%20Table/"/>
    <url>/2022/04/17/MySQL%20-%20Note01%20Table/</url>
    
    <content type="html"><![CDATA[<h1 id="DB-DBMS-SQL"><a href="#DB-DBMS-SQL" class="headerlink" title="DB, DBMS, SQL"></a>DB, DBMS, SQL</h1><ul><li>DB(DataBase): 数据库（在硬盘上以文件形式存在）</li><li>DBMS(DataBase Management System): 数据库管理系统（MySQL, Oracle, SQL Server, DB2, Sybase…)</li><li>SQL(Sequel): 结构化查询语言，是一门标准通用的语言，适合所有的数据库产品</li></ul><blockquote><p>DBMS -(执行)-&gt; SQL -(操作)-&gt; DB</p></blockquote><h1 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h1><p>table是数据库的基本组成单元，所有的数据都以表格的形式组织，可读性非常强。</p><ul><li><p>一个表包括行和列</p><p>行：被称为数据&#x2F;记录（data）</p><p>列：被称为字段（column）</p><table><thead><tr><th align="center">学号（int）</th><th align="center">姓名（archar）</th><th align="center">年龄（int）</th></tr></thead><tbody><tr><td align="center">101</td><td align="center">张三</td><td align="center">20</td></tr><tr><td align="center">102</td><td align="center">李四</td><td align="center">21</td></tr></tbody></table><blockquote><p>每个字段应该包括：字段名、数据类型、相关约束</p></blockquote></li><li><p>导入的learning表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show tables;<br>/*<br>+--------------------+<br>    | Tables_in_learning |<br>    +--------------------+<br>    | dept               |部门表<br>    | emp                |员工表<br>    | salgrade           |工资等级表<br>    +--------------------+<br>    3 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc dept;<br>/*<br>    +--------+-------------+------+-----+---------+-------+<br>    | Field  | Type        | Null | Key | Default | Extra |<br>    +--------+-------------+------+-----+---------+-------+<br>    | DEPTNO | int(2)      | NO   | PRI | NULL    |       |部门编号<br>    | DNAME  | varchar(14) | YES  |     | NULL    |       |部门名称<br>    | LOC    | varchar(13) | YES  |     | NULL    |       |部门位置<br>    +--------+-------------+------+-----+---------+-------+<br>    3 rows in set (0.01 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc emp;<br>/*<br>    +----------+-------------+------+-----+---------+-------+<br>    | Field    | Type        | Null | Key | Default | Extra |<br>    +----------+-------------+------+-----+---------+-------+<br>    | EMPNO    | int(4)      | NO   | PRI | NULL    |       |员工编号<br>    | ENAME    | varchar(10) | YES  |     | NULL    |       |员工姓名<br>    | JOB      | varchar(9)  | YES  |     | NULL    |       |员工岗位<br>    | MGR      | int(4)      | YES  |     | NULL    |       |上级领导编号<br>    | HIREDATE | date        | YES  |     | NULL    |       |入职日期<br>    | SAL      | double(7,2) | YES  |     | NULL    |       |薪资<br>    | COMM     | double(7,2) | YES  |     | NULL    |       |补助/津贴<br>    | DEPTNO   | int(2)      | YES  |     | NULL    |       |部门编号<br>    +----------+-------------+------+-----+---------+-------+<br>    8 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc salgrade;<br>/*<br>    +-------+---------+------+-----+---------+-------+<br>    | Field | Type    | Null | Key | Default | Extra |<br>    +-------+---------+------+-----+---------+-------+<br>    | GRADE | int(11) | YES  |     | NULL    |       |等级<br>    | LOSAL | int(11) | YES  |     | NULL    |       |最低薪资<br>    | HISAL | int(11) | YES  |     | NULL    |       |最高薪资<br>    +-------+---------+------+-----+---------+-------+<br>    3 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure></li></ul><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 建表语法格式<br># 表名一般用t_或tbl_开头用以区分<br>create table [table_name](<br>[字段1] [数据类型] [约束],<br>    [字段2] [数据类型] [约束],<br>    [字段3] [数据类型] [约束],<br>    ...<br>);<br><br>/*<br>eg.创建学生表：<br>学号（bigint）、姓名（varchar）、性别（char）、班级编号（int）、生日（char）<br>*/<br>create table t_student(<br>    no bigint(11),<br>    name varchar(255),<br>    sex char(1),<br>    classno int(4),<br>    birth char(10)<br>);<br></code></pre></td></tr></table></figure><h3 id="MySQL中常见的数据类型："><a href="#MySQL中常见的数据类型：" class="headerlink" title="MySQL中常见的数据类型："></a>MySQL中常见的数据类型：</h3><table><thead><tr><th>Date Struct</th><th>Java</th><th>Description</th></tr></thead><tbody><tr><td>int（整数型）</td><td>int</td><td></td></tr><tr><td>bigint（长整型）</td><td>long</td><td></td></tr><tr><td>float（浮点型）</td><td>float, double</td><td></td></tr><tr><td>char（定长字符串）</td><td>String</td><td>性别、生日</td></tr><tr><td>varchar（可变长字符串）</td><td>StringBuffer, StringBuilder</td><td>姓名、简介</td></tr><tr><td>date（日期类型）</td><td>java.sql.Date</td><td></td></tr><tr><td>BLOB（二进制大对象）</td><td>Object</td><td>Binary Large Object（存储图片、视频等流媒体信息）</td></tr><tr><td>CLOB（字符大对象）</td><td>Object</td><td>Character Large Object（存储较大的文本，如4G的字符串）</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="约束（Constraint）"><a href="#约束（Constraint）" class="headerlink" title="约束（Constraint）"></a>约束（Constraint）</h3><p>在创建表的时候，可以给表的字段添加相应的约束。添加约束的目的是为了保证表中数据的合法性、有效性、完整性。</p><p>常见的约束</p><table><thead><tr><th>约束名</th><th>约束作用</th></tr></thead><tbody><tr><td>非空约束（not null）</td><td>约束的字段不能为NULL</td></tr><tr><td>唯一约束（unique）</td><td>约束的字段不能重复</td></tr><tr><td>主键约束（primary key）</td><td>简称PK，约束的字段既不能为NULL，也不能重复</td></tr><tr><td>外键约束（foreign key）</td><td>简称FK…</td></tr><tr><td>default</td><td>default [value]：添加默认数据</td></tr></tbody></table><blockquote><p>检查约束（check）：仅Oracle数据库有，MySQL暂不支持</p></blockquote><h4 id="非空约束（not-null）"><a href="#非空约束（not-null）" class="headerlink" title="非空约束（not null）"></a>非空约束（not null）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table t_user(<br>id int,<br>    username varchar(255) not null,<br>    password varchar(255)<br>);<br><br>insert into t_user(id, password) value(101, &#x27;123&#x27;);<br>/*<br>ERROR 1364 (HY000): Field &#x27;username&#x27; doesn&#x27;t have a default value<br>*/<br></code></pre></td></tr></table></figure><h4 id="唯一性约束（unique）"><a href="#唯一性约束（unique）" class="headerlink" title="唯一性约束（unique）"></a>唯一性约束（unique）</h4><p>唯一性约束修饰的字段具有唯一性，不能重复，但可以为NULL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># eg.给某一列添加 unique（列级约束）<br>drop table if exists t_user;<br><br>create table t_user(<br>id int unique,<br>    username varchar(255)<br>);<br><br>insert into t_user values(101, &#x27;vv&#x27;), (101, &#x27;yy&#x27;);<br><br># ERROR 1062 (23000): Duplicate entry &#x27;101&#x27; for key &#x27;id&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># eg.给两个列或者多个列添加 unique (表级约束)<br>/*<br>使用：unique([name1], [name2])<br>    联合检测 [name1][name2]<br>*/<br>drop table if exists t_user;<br><br>create table t_user(<br>id int,<br>    user_id int,<br>    user_name char(2),<br>    unique(user_id, user_name)<br>);<br><br>insert into t_user<br>values(101, 001, &#x27;vv&#x27;),<br>(101, 002, &#x27;yy&#x27;),<br>(102, 001, &#x27;zz&#x27;);<br><br>/*<br>    +------+---------+-----------+<br>    | id   | user_id | user_name |<br>    +------+---------+-----------+<br>    |  101 |       1 | vv        |<br>    |  101 |       2 | yy        |<br>    |  102 |       1 | zz        |<br>    +------+---------+-----------+<br>    3 rows in set (0.00 sec)<br>*/<br></code></pre></td></tr></table></figure><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><p>主键中的字段不能为空，也不能重复</p><p>如何给一张表添加主键约束？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table if exists t_user;<br><br>create table t_user(<br>id int primary key,<br>    username varchar(2),<br>    email varchar(255)<br>);<br><br>insert into t_user<br>values(101, &#x27;vv&#x27;, &#x27;vv@123.com&#x27;),<br>(102, &#x27;yy&#x27;, &#x27;yy@456.com&#x27;),<br>(103, &#x27;zz&#x27;, &#x27;zz@789.com&#x27;);<br><br>insert into t_user(id, username, email) values(101, &#x27;xx&#x27;, &#x27;xx@101.com&#x27;);<br># ERROR 1062 (23000): Duplicate entry &#x27;101&#x27; for key &#x27;PRIMARY&#x27;<br><br>insert into t_user(username, email) values(&#x27;xx&#x27;, &#x27;xx@101.com&#x27;);<br># ERROR 1364 (HY000): Field &#x27;id&#x27; doesn&#x27;t have a default value<br></code></pre></td></tr></table></figure><blockquote><p>表级约束：<code>primary key([字段1], [字段2])</code></p></blockquote><h5 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h5><p>主键约束：<code>primary key</code></p><p>主键字段：添加了主键约束的字段</p><p>主键值：id字段中的每个值</p><h5 id="主键作用"><a href="#主键作用" class="headerlink" title="主键作用"></a>主键作用</h5><p>主键值是这行记录在这样表中的唯一标识，<strong>一张表的主键约束只能有一个</strong></p><blockquote><p>表的设计三范式中，第一范式就要求任何一张表都应有主键</p></blockquote><h5 id="主键分类"><a href="#主键分类" class="headerlink" title="主键分类"></a>主键分类</h5><ul><li><p>根据主键字段的字段数量来划分：</p><p>单一主键：推荐、常用</p><p>复合主键：使用表级约束多个字段联合起来添加一个主键约束（不建议，违背三范式）</p></li><li><p>根据主键性质来划分：</p><p>自然主键：和业务没有任何关系的自然数</p><p>业务主键：主键和系统的业务挂钩（不建议）</p><blockquote><p>最好不要用业务挂钩的字段作为主键，业务改变后，主键无法更改时则冲突</p><p>例如：银行卡卡号、身份证号</p></blockquote></li></ul><h5 id="MySQL-提供主键值自增"><a href="#MySQL-提供主键值自增" class="headerlink" title="*MySQL 提供主键值自增"></a>*MySQL 提供主键值自增</h5><p>在约束后添加 <code>auto_increment</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table if exists t_user;<br><br>create table t_user(<br>id int primary key auto_increment,<br>    user_name varchar(2)<br>);<br><br>insert into t_user(user_name)<br>values(&#x27;vv&#x27;), (&#x27;yy&#x27;), (&#x27;zz&#x27;), (&#x27;xx&#x27;);<br><br>select * from t_user;<br></code></pre></td></tr></table></figure><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><p>外键约束的字段必须来自于指定表中的某一字段值</p><blockquote><p>外键可以为 NULL</p><p>不一定引用主键，起码得有唯一性（unique）</p></blockquote><h5 id="相关术语-1"><a href="#相关术语-1" class="headerlink" title="相关术语"></a>相关术语</h5><p>外键约束：<code>foreign key([name]) references [table]([name])</code></p><p>外键字段：添加有外键约束的字段</p><p>外键值：外键字段中的每一个值</p><h5 id="父子表"><a href="#父子表" class="headerlink" title="父子表"></a>父子表</h5><p>设计数据库表，用来维护学生和班级信息</p><p>方案1：一张表存储所有数据（不推荐，冗余）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">---------------------------------------------<br>sno(pk)snameclassnoclassname<br>---------------------------------------------<br>1vv1804软工4班<br>2yy1806软工6班<br>3zz1703软工3班<br></code></pre></td></tr></table></figure><p>方案2：两张表（班级表和学生表）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">t_class 班级表（父表）<br>----------------------<br>classno(pk)cname<br>----------------------<br>1804软工4班<br>1806软工6班<br>1703软工3班<br><br>t_student 学生表（子表）<br>--------------------------------<br>snosnameclassno（fk）<br>--------------------------------<br>1vv1804<br>2yy1806<br>3zz1703<br></code></pre></td></tr></table></figure><ul><li>t_student 中的 calssno 引用 t_class 中的 classno 字段，此时 t_student 叫做子表，t_class 叫做父表</li><li>顺序要求：<ul><li>创建时先父再子</li><li>删除时先子再父</li></ul></li></ul><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table if exists t_student;<br>drop table if exists t_class;<br><br>create table t_class(<br>classno int,<br>    classname varchar(255),<br>    primary key(classno)<br>);<br><br>create table t_student(<br>sno int,<br>    sname varchar(255),<br>    classno int,<br>    primary key(sno),<br>    foreign key(classno) references t_class(classno)<br>);<br><br>insert into t_class<br>values(1804, &#x27;PG4&#x27;),<br>(1806, &#x27;PG6&#x27;),<br>(1703, &#x27;PG3&#x27;);<br><br>insert into t_student<br>values(1, &#x27;vv&#x27;, 1804),<br>(2, &#x27;yy&#x27;, 1806),<br>(3, &#x27;zz&#x27;, 1703);<br><br>select * from t_class;<br>select * from t_student;<br><br>/*<br>    +---------+-----------+<br>    | classno | classname |<br>    +---------+-----------+<br>    |    1703 | PG3       |<br>    |    1804 | PG4       |<br>    |    1806 | PG6       |<br>    +---------+-----------+<br>    3 rows in set (0.00 sec)<br>    <br>    +-----+-------+---------+<br>    | sno | sname | classno |<br>    +-----+-------+---------+<br>    |   1 | vv    |    1804 |<br>    |   2 | yy    |    1806 |<br>    |   3 | zz    |    1703 |<br>    +-----+-------+---------+<br>    3 rows in set (0.00 sec)<br>*/<br><br># 子表尝试插入不存在的 fk<br>insert into t_student values(4, &#x27;zz&#x27;, 1901);<br>/*<br>    ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`learning`.`t_student`, CONSTRAINT `t_student_ibfk_1` FOREIGN KEY (`classno`) REFERENCES `t_class` (`classno`))<br>*/<br></code></pre></td></tr></table></figure><h2 id="insert语句插入数据"><a href="#insert语句插入数据" class="headerlink" title="insert语句插入数据"></a>insert语句插入数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法格式<br>insert into [table_name](字段1,字段2,字段3,...) values(值1,值2,值3,...)<br><br># eg1.插入数据<br>insert into t_student(no, name, sex, classno, birth)<br>values(20184225131, &#x27;vv&#x27;, &#x27;1&#x27;, 1804, &#x27;2000-12-26&#x27;);<br><br># eg2.插入数据<br># 省略字段，则values全填写<br>insert into t_student<br>values(20184225132, &#x27;yy&#x27;, &#x27;0&#x27;, 1804, &#x27;2000-4-7&#x27;);<br><br># eg3.插入数据<br># 一次插入多行数据<br>insert into t_student<br>values(20184225133, &#x27;xx&#x27;, &#x27;1&#x27;, 1804, &#x27;2011-12-5&#x27;),<br>(20184225134, &#x27;zz&#x27;, &#x27;0&#x27;, 1804, &#x27;2001-4-16&#x27;);<br><br>/*<br>    +-------------+------+------+---------+------------+<br>    | no          | name | sex  | classno | birth      |<br>    +-------------+------+------+---------+------------+<br>    | 20184225131 | vv   | 1    |    1804 | 2000-12-26 |<br>    | 20184225132 | yy   | 0    |    1804 | 2000-4-7   |<br>    | 20184225133 | xx   | 1    |    1804 | 2011-12-5  |<br>    | 20184225134 | zz   | 0    |    1804 | 2001-4-16  |<br>    +-------------+------+------+---------+------------+<br>    4 rows in set (0.00 sec)<br>*/<br><br>/*<br>    字段的数量和值的数量相同<br>    数据类型要对应相同<br>    顺序无关<br>    空字段自动插入NULL<br>    insert只能增，执行成功后表格必然多一行记录<br>*/<br></code></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p>通用语法： <code>drop table [table_name]</code></p><p>MySQL语法： <code>drop table if exists [table_name];</code></p><blockquote><p><code>if exists</code>：如果存在</p></blockquote><h2 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h2><p>将查询结果当作表创建出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法格式<br>create table [table_name] <br>as [DQL语句];<br><br># eg<br>create table emp1<br>as select * from emp;<br></code></pre></td></tr></table></figure><h2 id="插入表"><a href="#插入表" class="headerlink" title="插入表"></a>插入表</h2><p>将查询结果当作表插入到别的表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 语法格式<br>insert into [table_name] [DQL语句];<br><br># eg<br>insert into emp1 select * from dept;<br></code></pre></td></tr></table></figure><h2 id="修改表数据"><a href="#修改表数据" class="headerlink" title="修改表数据"></a>修改表数据</h2><p>语法格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update [table_name]<br>set [字段1]=[值1], [字段2]=[值2], ...<br>where [条件];<br></code></pre></td></tr></table></figure><ul><li>没有条件整张表数据全部更新</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 将部门10的LOC修改为SHANGHAI，将部门名称修改为RENSHIBU<br>update dept1 set dname=&#x27;RENSHIBU&#x27;, loc=&#x27;SHANGHAI&#x27; where deptno=&#x27;10&#x27;;<br>/*<br>    +--------+------------+----------+<br>    | DEPTNO | DNAME      | LOC      |<br>    +--------+------------+----------+<br>    |     10 | RENSHIBU   | SHANGHAI |<br>    |     20 | RESEARCH   | DALLAS   |<br>    |     30 | SALES      | CHICAGO  |<br>    |     40 | OPERATIONS | BOSTON   |<br>    +--------+------------+----------+<br>*/<br></code></pre></td></tr></table></figure><h2 id="删除表数据"><a href="#删除表数据" class="headerlink" title="删除表数据"></a>删除表数据</h2><p>语法格式：<code>delete from [table_name] where [条件];</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># eg.删除20部门数据<br>delete from dept1 where deptno=&#x27;20&#x27;;<br></code></pre></td></tr></table></figure><ul><li>没有条件全部删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># eg.删除所有数据<br>delete from dept1;<br></code></pre></td></tr></table></figure><h3 id="如何删除大表中的数据？"><a href="#如何删除大表中的数据？" class="headerlink" title="*如何删除大表中的数据？"></a>*如何删除大表中的数据？</h3><p>可以使用 <code>truncate</code> 截断表数据，仅留下表头字段名，危险系数高，不可以回滚</p><blockquote><p>delete 仅擦除数据，不释放空间，删除效率低下</p></blockquote><p>语法格式：<code>truncate table [table_name];</code></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Basics</tag>
      
      <tag>Table</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL - Note00 Basics Command</title>
    <link href="/2022/04/17/MySQL%20-%20Note00%20Basics%20Command/"/>
    <url>/2022/04/17/MySQL%20-%20Note00%20Basics%20Command/</url>
    
    <content type="html"><![CDATA[<h1 id="通用SQL语句分类"><a href="#通用SQL语句分类" class="headerlink" title="通用SQL语句分类"></a>通用SQL语句分类</h1><ul><li>DQL（Data <strong>Query</strong> Language 数据<strong>查询</strong>语言）：<code>select</code>语句都是DQL查询语句</li><li>DML（Data <strong>Manipulation</strong> Language 数据<strong>操作</strong>语言）：<code>insert</code> <code>delete</code> <code>update</code>，对表中的数据进行增删改</li><li>DDL（Data Definition Language 数据定义语言）：<code>create</code> <code>drop</code> <code>alter</code>，对表结构的增删改</li><li>TCL（<strong>Transaction</strong> Control Language <strong>事务</strong>控制语言）：<code>commit</code>提交事务、<code>rollback</code>回滚事务</li><li>DCL（Data Control Language 数据控制语言）：<code>grant</code>授权、<code>revoke</code>撤销权限等</li></ul><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li><p>控制面板登录命令：<code>mysql -u[user] -p[password]</code></p><blockquote><p>若考虑安全性可以使用：<code>mysql -u[user] -p</code>，密码在提示框内以星号显示。</p></blockquote></li><li><p>结束一条语句：<code>/c</code></p></li><li><p>退出MySQL：<code>exit</code></p></li><li><p>使用数据库：<code>use [database_name];</code></p></li><li><p>初始化DB脚本文件：<code>source [path.sql]</code></p></li></ul><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><ul><li>创建数据库：<code>create database [database_name];</code></li></ul><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><ul><li>删除数据库：<code>drop database [database_name];</code></li></ul><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><ul><li>查看所有数据库：<code>show databases;</code></li><li>查询当前使用的数据库：<code>select database();</code></li><li>查询数据库版本：<code>select version();</code></li><li>查看表：<code>show tables;</code></li><li>查看表结构：<code>desc [table_name];</code></li><li>查看创建表的语句：<code>show create table emp;</code></li><li>查看其它数据库中的表：<code>show tables from [database_name];</code></li><li>查看执行计划：语句前加上 <code>explain</code></li></ul><h1 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h1><h2 id="记得原密码"><a href="#记得原密码" class="headerlink" title="记得原密码"></a>记得原密码</h2><ul><li><p>登录MySQL</p><p><code>set password for [user]@localhost = password(&#39;new_password&#39;);</code></p></li><li><p>登录MySQL，用update直接编辑user表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">use mysql;<br>update user set password=password(&#x27;[password]&#x27;) where user=&#x27;root&#x27; and host=&#x27;localhost&#x27;;<br>flush privileges;<br></code></pre></td></tr></table></figure></li><li><p>用mysqladmin</p><p><code>mysqladmin -u[user] -p[old_password] password [new_password]</code></p></li></ul><h2 id="忘记原密码"><a href="#忘记原密码" class="headerlink" title="忘记原密码"></a>忘记原密码</h2><p>以Windows为例</p><ol><li><p>关闭正在运行的MySQL服务</p></li><li><p>打开DOS窗口，转到<code>mysql\bin</code>目录</p></li><li><p>输入<code>mysqld --skip-grant-tables</code>后回车</p><blockquote><p>启动MySQL时跳过权限表认证</p></blockquote></li><li><p>再打开一个DOS窗口，转到<code>mysql\bin</code>目录</p></li><li><p>输入<code>mysql</code>回车，如果成功，将出现MySQL提示符&gt;</p></li><li><p>输入<code>use mysql;</code>连接权限数据库</p></li><li><p>输入<code>update user set password=password(&#39;[password]&#39;) where user=&#39;root&#39;;</code>更改密码</p></li><li><p>输入<code>flush privileges;</code>刷新权限（必须步骤）</p></li><li><p>输入<code>quit</code>退出</p></li><li><p>注销系统再进入，使用root和新密码登录</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Command</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows - DOS 常用命令与 WIN 快捷键</title>
    <link href="/2022/03/24/Windows%20-%20DOS%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B8%8E%20WIN%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/03/24/Windows%20-%20DOS%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B8%8E%20WIN%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="dos常用命令"><a href="#dos常用命令" class="headerlink" title="dos常用命令"></a>dos常用命令</h1><ul><li><p>回到根目录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /<br></code></pre></td></tr></table></figure></li><li><p>清屏</p>  <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">cls</span><br></code></pre></td></tr></table></figure></li><li><p>查看当前目录下的文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dir</span><br></code></pre></td></tr></table></figure></li><li><p>退出DOS命令窗口</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure></li><li><p>自动补全：<code>Tab键</code></p></li><li><p>删除文件或目录下所有文件夹</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">del</span><br><span class="hljs-selector-tag">del</span> *<span class="hljs-selector-attr">[name]</span><span class="hljs-comment">// 删除匹配到的文件</span><br></code></pre></td></tr></table></figure></li><li><p>删除文件夹</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">rd</span><br></code></pre></td></tr></table></figure></li><li><p>查看ip地址</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ipconfig<br>ipconfig /<span class="hljs-built_in">all</span><span class="hljs-comment">// 查看详细信息</span><br>ipconfig/flushdns<span class="hljs-comment">// 刷新dns缓存</span><br></code></pre></td></tr></table></figure></li><li><p>测试连通性</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">ping</span> <span class="hljs-selector-attr">[网址/域名]</span><br><span class="hljs-selector-tag">ping</span> <span class="hljs-selector-attr">[网址/域名]</span> <span class="hljs-selector-tag">-t</span><span class="hljs-comment">// 连续测试</span><br></code></pre></td></tr></table></figure></li><li><p>终止无限命令：<code>Ctrl + C</code></p></li><li><p><code>拖动文件到dos窗口</code>，会自动生成文件的绝对路径</p></li><li><p><code>文件夹目录地址输入cmd</code>，会进入到目录的命令窗口</p></li></ul><h1 id="win快捷键"><a href="#win快捷键" class="headerlink" title="win快捷键"></a>win快捷键</h1><ul><li>回到文件头：<code>Ctrl + Home</code></li><li>回到文件尾：<code>Ctrl + End</code></li><li>选中一个单词<ul><li>鼠标：<code>双击</code></li><li>键盘：<code>Ctrl + Shift + Left/Right</code></li></ul></li><li>选中一行：<ul><li>鼠标：<code>三击</code></li><li>键盘：<code>Shift + Home/End</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Command</tag>
      
      <tag>Shortcut</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java - Study Road</title>
    <link href="/2022/03/24/Java%20-%20Study%20Road/"/>
    <url>/2022/03/24/Java%20-%20Study%20Road/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-Study-Road"><a href="#Java-Study-Road" class="headerlink" title="Java Study Road"></a>Java Study Road</h1><h2 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a>JavaSE</h2><p>Java语言的基础，是Java最基本的库</p><ul><li><code>JavaSE 基础</code> <em>2022-03-24 ~ 2022-06-06</em></li><li><code>JavaSE 进阶</code> <em>2022-06-06 ~ 2022-07-13</em></li><li><code>JDK14 新特性</code> <em>2022-07-13 ~ 2022-07-13</em></li></ul><h2 id="DataBase"><a href="#DataBase" class="headerlink" title="DataBase"></a>DataBase</h2><ul><li><p><code>MySQL</code> <em>2022-4-17 ~ 2022-5-11</em></p></li><li><p><code>JDBC</code> <em>2022-07-13 ~ 2022-07-20</em></p><p>Java 语言连接数据库</p></li><li><p><em>Oracle</em></p></li></ul><h2 id="Web-前端（Browser）"><a href="#Web-前端（Browser）" class="headerlink" title="Web 前端（Browser）"></a>Web 前端（Browser）</h2><ul><li><code>HTML</code> <em>2022-07-20 ～ 2022-07-21</em></li><li><code>CSS</code> <em>2022-07-21 ～ 2022-07-21</em></li><li><code>JavaScript</code> <em>2022-07-22 ～ 2022-07-25</em></li></ul><h2 id="JavaWeb（Server）"><a href="#JavaWeb（Server）" class="headerlink" title="JavaWeb（Server）"></a>JavaWeb（Server）</h2><p><em>2022-07-26 ~ 2022-08-12</em></p><ul><li><p><code>网络通信流程</code></p><p>B&#x2F;S 结构系统通信流程</p></li><li><p><code>HTTP &amp; Tomcat</code></p></li><li><p><code>Servlet</code></p></li><li><p><code>JSP</code></p></li></ul><h2 id="Web-前端进阶"><a href="#Web-前端进阶" class="headerlink" title="Web 前端进阶"></a>Web 前端进阶</h2><ul><li><p><code>AJAX</code> <em>2022-08-13 ~ 2022-08-17</em></p><p>发送异步请求的技术</p></li><li><p><code>jQuery</code> <em>2022-08-18 ~ 2022-08-18</em></p><p>JavaScript 语言的高级框架</p></li></ul><h2 id="Project-JavaWeb-old"><a href="#Project-JavaWeb-old" class="headerlink" title="[Project] JavaWeb (old)"></a><em>[Project] JavaWeb (old)</em></h2><p>基于 Servlet + JSP + MySQL + JDBC + HTML + CSS + JavaScript + jQuery + AJAX 的 Web 项目</p><ul><li>SVN</li><li>EGOV 项目（政府部门使用的电子政务系统）</li></ul><h2 id="SSM-Framwork（new）"><a href="#SSM-Framwork（new）" class="headerlink" title="SSM Framwork（new）"></a>SSM Framwork（new）</h2><ul><li><code>Maven 入门</code> <em>2022-08-19 ~ 2022-08-20</em></li><li><code>MyBatis</code> <em>2022-08-20 ~ 2022-08-24</em><ul><li><code>JDK 动态代理</code></li></ul></li><li><code>Spring</code> <em>2022-08-25 ~ 2022-09-01</em></li><li><code>SpringMVC</code> <em>2022-09-01 ~ 2022-09-05</em></li><li><em>SSH Framwork（old）</em><ul><li>Hibernate</li><li>Spring</li><li>Struct</li></ul></li></ul><h2 id="Project-SSM-new"><a href="#Project-SSM-new" class="headerlink" title="[Project] SSM (new)"></a>[Project] SSM (new)</h2><p><a href="https://wataaaame.github.io/2022/09/06/Project%20-%20CRM%20%E5%AE%A2%E6%88%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/">CRM 项目（客户关系管理系统）</a> <em>2022-09-06 ~ 2022-09-27</em></p><h2 id="互联网分布式（高薪）"><a href="#互联网分布式（高薪）" class="headerlink" title="互联网分布式（高薪）"></a>互联网分布式（高薪）</h2><ul><li><code>redis</code></li><li><code>Dubbo</code></li><li><code>SpringBoot</code></li><li><code>Maven 实战进阶</code></li><li><code>Nginx</code></li><li><code>SpringCloud</code></li><li><code>SpringSession</code></li><li><code>FastDFS</code></li><li><code>RabbitMQ 实战</code></li><li><code>MySQL 集群</code></li><li><code>MyCat</code></li><li><code>Shiro</code></li></ul><h2 id="Project-分布式"><a href="#Project-分布式" class="headerlink" title="[Project] 分布式"></a>[Project] 分布式</h2><ul><li>商业级的项目练习，实战操作</li></ul><h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><ul><li><code>Linux</code></li><li><code>git</code></li><li><code>数据结构</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study Road</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Blog - Hexo+Fluid &amp; GitHub 搭建个人博客</title>
    <link href="/2022/03/23/Blog%20-%20Hexo+Fluid%20&amp;%20GitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/03/23/Blog%20-%20Hexo+Fluid%20&amp;%20GitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>本文章演示的过程基于虚拟机Windows 7旗舰版系统。</p><h1 id="Before-Starting"><a href="#Before-Starting" class="headerlink" title="Before Starting"></a>Before Starting</h1><ol><li><p>注册GitHub账户</p><p>官网地址：<a href="https://github.com/">GitHub</a></p></li><li><p>下载所需工具（设置好安装目录后，一路下一步）</p><p>nodejs（win7支持版本：node-v13.14.0-x64）</p><p>git（Git-2.34.0-64-bit）</p></li><li><p>安装完毕后，使用快捷键<code>win+R</code>，输入<code>cmd</code>打开命令行，并分别输入以下命令来测试是否安装成功</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br>git --version<br></code></pre></td></tr></table></figure></li><li><p>安装淘宝源cnpm</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure></li><li><p>下载Hexo</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure></li><li><p>检查Hexo版本号验证是否安装成功</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure></li></ol><h1 id="Work-it-out"><a href="#Work-it-out" class="headerlink" title="Work it out"></a>Work it out</h1><h2 id="关联SSH"><a href="#关联SSH" class="headerlink" title="关联SSH"></a>关联SSH</h2><ol><li><p>登录GitHub</p></li><li><p>新建一个Repository</p><p>名称：<code>[user_name].github.io</code></p></li><li><p>桌面右键，点击<code>git bash here</code></p></li><li><p>输入ssh检测ssh是否安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh<br></code></pre></td></tr></table></figure></li><li><p>使用命令行创建ssh key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;[user_mail]&quot;</span><br></code></pre></td></tr></table></figure><p><strong>连续按4次回车</strong></p></li><li><p>进入到<code>C:\user\[name]\.ssh\id_rsa.pub</code>（用记事本打开，复制密钥）</p></li><li><p>找到<code>GitHub -&gt; Setting -&gt; SSH and GPG keys</code></p></li><li><p>新建一个<code>SSH Key</code>（名称随意）</p></li><li><p>粘贴复制出来的Key</p></li><li><p>在<code>Git</code>中输入命令测试ssh是否绑定成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p><strong># 错误提示：Time out</strong></p><blockquote><p>进入~&#x2F;.ssh下，创建config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi config<br></code></pre></td></tr></table></figure><p>编辑文件内容</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host github.com<br><span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port <span class="hljs-number">443</span><br><br>Host gitlab.com<br>Hostname altssh.gitlab.com<br><span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>Port <span class="hljs-number">443</span><br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure></blockquote></li></ol><h2 id="创建本地博客"><a href="#创建本地博客" class="headerlink" title="创建本地博客"></a>创建本地博客</h2><ol><li><p>新建一个目录（用于存放博客文件夹），进入到目录，右键<code>git bash here</code></p></li><li><p>初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure></li><li><p>生成本地页面，进入本地端口预览效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hexo server</span><br>hexo s<br></code></pre></td></tr></table></figure></li></ol><h3 id="主题配置（以Floid为例）"><a href="#主题配置（以Floid为例）" class="headerlink" title="主题配置（以Floid为例）"></a>主题配置（以Floid为例）</h3><p><strong># 第三方开源主题可以自己按照文档配置</strong></p><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><h4 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h4><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h4 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h4><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><blockquote><p>WARNING</p><p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p></blockquote><h4 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h4><p>在博客目录下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm update --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>详情请见：<a href="https://hexo.fluid-dev.com/docs/">Hexo Floid 用户手册</a></p><h2 id="发布到GitHub"><a href="#发布到GitHub" class="headerlink" title="发布到GitHub"></a>发布到GitHub</h2><h3 id="deployment文件配置"><a href="#deployment文件配置" class="headerlink" title="deployment文件配置"></a>deployment文件配置</h3><ol><li><p>blog目录找到<code>_config.yml</code></p></li><li><p>修改最后一行<code>deployment</code>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repository:</span> [<span class="hljs-string">仓库ssh地址</span>] <span class="hljs-comment"># 在仓库页code下找到链接</span><br><span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>blog文件夹右键<code>git bash here</code></p><ol><li><p>安装hexo-deployer-git自动部署发布工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>生成blog页面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hexo generate</span><br>hexo g<br></code></pre></td></tr></table></figure></li><li><p>部署到GitHub命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hexo deploy</span><br>hexo d<br></code></pre></td></tr></table></figure></li><li><p>部署完成后，在浏览器输入页面地址已访问blog</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">https://</span>[<span class="hljs-string">username</span>].github.io<br></code></pre></td></tr></table></figure><p><strong># 如果访问不了，可以刷新dns缓存</strong></p><blockquote><p>cmd控制台输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig/flushdns<br></code></pre></td></tr></table></figure></blockquote></li></ol><h1 id="After-Building"><a href="#After-Building" class="headerlink" title="After Building"></a>After Building</h1><h2 id="文章创建"><a href="#文章创建" class="headerlink" title="文章创建"></a>文章创建</h2><ul><li><p>创建markdown文件</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type"></span>[layout[post, draft, page]] <span class="hljs-string">&quot;[title]&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>layout布局：<strong>post（文章）</strong>、draft（草稿）、page（页面）</p><ul><li><p>启动服务器时加上<code>--draft</code>来查看草稿</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">hexo <span class="hljs-keyword">server</span> <span class="hljs-comment">--draft</span><br></code></pre></td></tr></table></figure></li><li><p>还可以在站点配置文件中把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p></li><li><p>我们可以通过 <code>publish</code> 命令将草稿发布文章或者页面，它将会被移动到指定的文件夹。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo publish <span class="hljs-selector-attr">[layout]</span> &quot;<span class="hljs-selector-attr">[title]</span>&quot;<br></code></pre></td></tr></table></figure></li></ul></blockquote></li><li><p>Front-matter</p><p>当我们创建一个md文件后，打开后会看到一些内容，这些称为<code>Front-matter</code>，它是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: Hello World # 标题就是我们上面创建的时候指定的名字<br><span class="hljs-section">date: 2013/7/13 20:46:25 # 文件创建的时间</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><blockquote><p>在<code>Typora</code>中我们在md文件的首行（必须是第一行）输入<code>---</code> ，然后按回车就可以插入<code>Front-matter</code>了。</p></blockquote></li><li><p><strong>Front-matter预定义参数</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">layout  布局  默认为true，如果你不想你的文章被处理，可以设置为false<br>title  标题  标题会显示在最上方居中位置     <br>date  建立日期    如果不指定则为默认值-文件创建日期，可以自定义。<br>update  更新日期  如果不指定则为默认值-文件修改后重新生成静态文件的日期。<br>comments  是否开启文章的评论功能 默认值为true<br>tags  标签（不适用于页面page布局）<br>categoreies  分类（不适用于页面page布局）<br>permalink  覆盖文章网址<br>keywords  仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）<br>excerpt用于Fluid主题中的摘要<br>comment bool开启评论<br></code></pre></td></tr></table></figure></li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p><strong>清除缓存：</strong><code>hexo clean</code></p></li><li><p><strong>生成静态文件：</strong><code>hexo generate</code>可简写为<code>hexo g</code></p></li><li><p><strong>启动本地服务器：</strong><code>hexo server</code>可简写为<code>hexo s</code>，常用参数<code>-p（--port）</code>重设端口</p></li><li><p><strong>部署到云服务器：</strong><code>hexo deploy</code>可简写为<code>hexo d</code>，用于将网站部署到服务器上。<br>常用参数：<code>-g（--generate）</code>，<code>hexo d -g</code>部署前预先生成静态文件，等同于 <code>hexo g -d</code></p><blockquote><p><strong>一般发布文章或者修改博客后需要这些操作：</strong>清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 我们可以写成一条命令</span><br>hexo clean <span class="hljs-meta">&amp;&amp; hexo g &amp;&amp; hexo s</span><br>hexo d<br></code></pre></td></tr></table></figure><p>详情请见：<a href="https://hexo.bootcss.com/docs/">Hexo官方文档</a></p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
